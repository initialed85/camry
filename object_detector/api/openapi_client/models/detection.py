# coding: utf-8

"""
    Djangolang

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.array_of_vec2_inner import ArrayOfVec2Inner
from typing import Optional, Set
from typing_extensions import Self

class Detection(BaseModel):
    """
    Detection
    """ # noqa: E501
    bounding_box: Optional[List[ArrayOfVec2Inner]] = None
    camera_id: Optional[StrictStr] = None
    camera_id_object: Optional[Camera] = None
    centroid: Optional[ArrayOfVec2Inner] = None
    class_id: Optional[StrictInt] = None
    class_name: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    deleted_at: Optional[datetime] = None
    id: Optional[StrictStr] = None
    score: Optional[Union[StrictFloat, StrictInt]] = None
    seen_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    video_id: Optional[StrictStr] = None
    video_id_object: Optional[Video] = None
    __properties: ClassVar[List[str]] = ["bounding_box", "camera_id", "camera_id_object", "centroid", "class_id", "class_name", "created_at", "deleted_at", "id", "score", "seen_at", "updated_at", "video_id", "video_id_object"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Detection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bounding_box (list)
        _items = []
        if self.bounding_box:
            for _item in self.bounding_box:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bounding_box'] = _items
        # override the default output from pydantic by calling `to_dict()` of camera_id_object
        if self.camera_id_object:
            _dict['camera_id_object'] = self.camera_id_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of centroid
        if self.centroid:
            _dict['centroid'] = self.centroid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_id_object
        if self.video_id_object:
            _dict['video_id_object'] = self.video_id_object.to_dict()
        # set to None if bounding_box (nullable) is None
        # and model_fields_set contains the field
        if self.bounding_box is None and "bounding_box" in self.model_fields_set:
            _dict['bounding_box'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Detection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bounding_box": [ArrayOfVec2Inner.from_dict(_item) for _item in obj["bounding_box"]] if obj.get("bounding_box") is not None else None,
            "camera_id": obj.get("camera_id"),
            "camera_id_object": Camera.from_dict(obj["camera_id_object"]) if obj.get("camera_id_object") is not None else None,
            "centroid": ArrayOfVec2Inner.from_dict(obj["centroid"]) if obj.get("centroid") is not None else None,
            "class_id": obj.get("class_id"),
            "class_name": obj.get("class_name"),
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "id": obj.get("id"),
            "score": obj.get("score"),
            "seen_at": obj.get("seen_at"),
            "updated_at": obj.get("updated_at"),
            "video_id": obj.get("video_id"),
            "video_id_object": Video.from_dict(obj["video_id_object"]) if obj.get("video_id_object") is not None else None
        })
        return _obj

from openapi_client.models.camera import Camera
from openapi_client.models.video import Video
# TODO: Rewrite to not use raise_errors
Detection.model_rebuild(raise_errors=False)

