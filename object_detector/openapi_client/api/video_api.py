# coding: utf-8

"""
    Djangolang

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Any, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.get_videos200_response import GetVideos200Response
from openapi_client.models.video import Video

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class VideoApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_video(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_video_serialize(
            primary_key=primary_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_video_with_http_info(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_video_serialize(
            primary_key=primary_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_video_without_preload_content(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_video_serialize(
            primary_key=primary_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_video_serialize(
        self,
        primary_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if primary_key is not None:
            _path_params['primaryKey'] = primary_key
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/videos/{primaryKey}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_video(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetVideos200Response:
        """get_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_video_serialize(
            primary_key=primary_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_video_with_http_info(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetVideos200Response]:
        """get_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_video_serialize(
            primary_key=primary_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_video_without_preload_content(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_video_serialize(
            primary_key=primary_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_video_serialize(
        self,
        primary_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if primary_key is not None:
            _path_params['primaryKey'] = primary_key
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/videos/{primaryKey}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_videos(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="SQL LIMIT operator")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="SQL OFFSET operator")] = None,
        id__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        id__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        id__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        id__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        id__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        id__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        id__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        id__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        id__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        id__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        id__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        id__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        id__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        id__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        created_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        created_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        created_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        created_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        created_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        created_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        created_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        created_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        created_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        updated_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        updated_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        updated_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        updated_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        updated_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        updated_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        updated_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        updated_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        updated_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        deleted_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        deleted_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        deleted_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        deleted_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        deleted_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        deleted_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        deleted_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        deleted_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        deleted_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        file_name__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        file_name__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        file_name__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        file_name__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        file_name__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        file_name__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        file_name__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_name__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_name__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        started_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        started_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        started_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        started_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        started_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        started_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        started_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        started_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        started_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        ended_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        ended_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        ended_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        ended_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        ended_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        ended_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        ended_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        ended_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        ended_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        duration__eq: Annotated[Optional[StrictInt], Field(description="SQL = operator")] = None,
        duration__ne: Annotated[Optional[StrictInt], Field(description="SQL != operator")] = None,
        duration__gt: Annotated[Optional[StrictInt], Field(description="SQL > operator, may not work with all column types")] = None,
        duration__gte: Annotated[Optional[StrictInt], Field(description="SQL >= operator, may not work with all column types")] = None,
        duration__lt: Annotated[Optional[StrictInt], Field(description="SQL < operator, may not work with all column types")] = None,
        duration__lte: Annotated[Optional[StrictInt], Field(description="SQL <= operator, may not work with all column types")] = None,
        duration__in: Annotated[Optional[StrictInt], Field(description="SQL IN operator, permits comma-separated values")] = None,
        duration__nin: Annotated[Optional[StrictInt], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        duration__notin: Annotated[Optional[StrictInt], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        duration__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        duration__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        duration__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        duration__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        duration__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__eq: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL = operator")] = None,
        file_size__ne: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL != operator")] = None,
        file_size__gt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL > operator, may not work with all column types")] = None,
        file_size__gte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL >= operator, may not work with all column types")] = None,
        file_size__lt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL < operator, may not work with all column types")] = None,
        file_size__lte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL <= operator, may not work with all column types")] = None,
        file_size__in: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL IN operator, permits comma-separated values")] = None,
        file_size__nin: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_size__notin: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_size__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        thumbnail_name__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        thumbnail_name__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        thumbnail_name__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        thumbnail_name__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        thumbnail_name__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        thumbnail_name__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        thumbnail_name__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        thumbnail_name__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        thumbnail_name__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        status__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        status__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        status__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        status__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        status__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        status__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        status__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        status__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        status__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        status__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        status__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        status__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        status__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        status__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        camera_id__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        camera_id__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        camera_id__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        camera_id__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        camera_id__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        camera_id__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        camera_id__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        camera_id__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        camera_id__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetVideos200Response:
        """get_videos


        :param limit: SQL LIMIT operator
        :type limit: int
        :param offset: SQL OFFSET operator
        :type offset: int
        :param id__eq: SQL = operator
        :type id__eq: str
        :param id__ne: SQL != operator
        :type id__ne: str
        :param id__gt: SQL > operator, may not work with all column types
        :type id__gt: str
        :param id__gte: SQL >= operator, may not work with all column types
        :type id__gte: str
        :param id__lt: SQL < operator, may not work with all column types
        :type id__lt: str
        :param id__lte: SQL <= operator, may not work with all column types
        :type id__lte: str
        :param id__in: SQL IN operator, permits comma-separated values
        :type id__in: str
        :param id__nin: SQL NOT IN operator, permits comma-separated values
        :type id__nin: str
        :param id__notin: SQL NOT IN operator, permits comma-separated values
        :type id__notin: str
        :param id__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type id__isnull: str
        :param id__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type id__nisnull: str
        :param id__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type id__isnotnull: str
        :param id__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__l: str
        :param id__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__like: str
        :param id__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nl: str
        :param id__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nlike: str
        :param id__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__notlike: str
        :param id__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__il: str
        :param id__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__ilike: str
        :param id__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nil: str
        :param id__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nilike: str
        :param id__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__notilike: str
        :param id__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type id__desc: str
        :param id__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type id__asc: str
        :param created_at__eq: SQL = operator
        :type created_at__eq: datetime
        :param created_at__ne: SQL != operator
        :type created_at__ne: datetime
        :param created_at__gt: SQL > operator, may not work with all column types
        :type created_at__gt: datetime
        :param created_at__gte: SQL >= operator, may not work with all column types
        :type created_at__gte: datetime
        :param created_at__lt: SQL < operator, may not work with all column types
        :type created_at__lt: datetime
        :param created_at__lte: SQL <= operator, may not work with all column types
        :type created_at__lte: datetime
        :param created_at__in: SQL IN operator, permits comma-separated values
        :type created_at__in: datetime
        :param created_at__nin: SQL NOT IN operator, permits comma-separated values
        :type created_at__nin: datetime
        :param created_at__notin: SQL NOT IN operator, permits comma-separated values
        :type created_at__notin: datetime
        :param created_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type created_at__isnull: str
        :param created_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type created_at__nisnull: str
        :param created_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type created_at__isnotnull: str
        :param created_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__l: str
        :param created_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__like: str
        :param created_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nl: str
        :param created_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nlike: str
        :param created_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__notlike: str
        :param created_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__il: str
        :param created_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__ilike: str
        :param created_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nil: str
        :param created_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nilike: str
        :param created_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__notilike: str
        :param created_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type created_at__desc: str
        :param created_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type created_at__asc: str
        :param updated_at__eq: SQL = operator
        :type updated_at__eq: datetime
        :param updated_at__ne: SQL != operator
        :type updated_at__ne: datetime
        :param updated_at__gt: SQL > operator, may not work with all column types
        :type updated_at__gt: datetime
        :param updated_at__gte: SQL >= operator, may not work with all column types
        :type updated_at__gte: datetime
        :param updated_at__lt: SQL < operator, may not work with all column types
        :type updated_at__lt: datetime
        :param updated_at__lte: SQL <= operator, may not work with all column types
        :type updated_at__lte: datetime
        :param updated_at__in: SQL IN operator, permits comma-separated values
        :type updated_at__in: datetime
        :param updated_at__nin: SQL NOT IN operator, permits comma-separated values
        :type updated_at__nin: datetime
        :param updated_at__notin: SQL NOT IN operator, permits comma-separated values
        :type updated_at__notin: datetime
        :param updated_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type updated_at__isnull: str
        :param updated_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type updated_at__nisnull: str
        :param updated_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type updated_at__isnotnull: str
        :param updated_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__l: str
        :param updated_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__like: str
        :param updated_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nl: str
        :param updated_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nlike: str
        :param updated_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__notlike: str
        :param updated_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__il: str
        :param updated_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__ilike: str
        :param updated_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nil: str
        :param updated_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nilike: str
        :param updated_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__notilike: str
        :param updated_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type updated_at__desc: str
        :param updated_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type updated_at__asc: str
        :param deleted_at__eq: SQL = operator
        :type deleted_at__eq: datetime
        :param deleted_at__ne: SQL != operator
        :type deleted_at__ne: datetime
        :param deleted_at__gt: SQL > operator, may not work with all column types
        :type deleted_at__gt: datetime
        :param deleted_at__gte: SQL >= operator, may not work with all column types
        :type deleted_at__gte: datetime
        :param deleted_at__lt: SQL < operator, may not work with all column types
        :type deleted_at__lt: datetime
        :param deleted_at__lte: SQL <= operator, may not work with all column types
        :type deleted_at__lte: datetime
        :param deleted_at__in: SQL IN operator, permits comma-separated values
        :type deleted_at__in: datetime
        :param deleted_at__nin: SQL NOT IN operator, permits comma-separated values
        :type deleted_at__nin: datetime
        :param deleted_at__notin: SQL NOT IN operator, permits comma-separated values
        :type deleted_at__notin: datetime
        :param deleted_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type deleted_at__isnull: str
        :param deleted_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type deleted_at__nisnull: str
        :param deleted_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type deleted_at__isnotnull: str
        :param deleted_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__l: str
        :param deleted_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__like: str
        :param deleted_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nl: str
        :param deleted_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nlike: str
        :param deleted_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__notlike: str
        :param deleted_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__il: str
        :param deleted_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__ilike: str
        :param deleted_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nil: str
        :param deleted_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nilike: str
        :param deleted_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__notilike: str
        :param deleted_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type deleted_at__desc: str
        :param deleted_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type deleted_at__asc: str
        :param file_name__eq: SQL = operator
        :type file_name__eq: str
        :param file_name__ne: SQL != operator
        :type file_name__ne: str
        :param file_name__gt: SQL > operator, may not work with all column types
        :type file_name__gt: str
        :param file_name__gte: SQL >= operator, may not work with all column types
        :type file_name__gte: str
        :param file_name__lt: SQL < operator, may not work with all column types
        :type file_name__lt: str
        :param file_name__lte: SQL <= operator, may not work with all column types
        :type file_name__lte: str
        :param file_name__in: SQL IN operator, permits comma-separated values
        :type file_name__in: str
        :param file_name__nin: SQL NOT IN operator, permits comma-separated values
        :type file_name__nin: str
        :param file_name__notin: SQL NOT IN operator, permits comma-separated values
        :type file_name__notin: str
        :param file_name__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type file_name__isnull: str
        :param file_name__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_name__nisnull: str
        :param file_name__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_name__isnotnull: str
        :param file_name__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__l: str
        :param file_name__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__like: str
        :param file_name__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nl: str
        :param file_name__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nlike: str
        :param file_name__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__notlike: str
        :param file_name__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__il: str
        :param file_name__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__ilike: str
        :param file_name__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nil: str
        :param file_name__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nilike: str
        :param file_name__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__notilike: str
        :param file_name__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type file_name__desc: str
        :param file_name__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type file_name__asc: str
        :param started_at__eq: SQL = operator
        :type started_at__eq: datetime
        :param started_at__ne: SQL != operator
        :type started_at__ne: datetime
        :param started_at__gt: SQL > operator, may not work with all column types
        :type started_at__gt: datetime
        :param started_at__gte: SQL >= operator, may not work with all column types
        :type started_at__gte: datetime
        :param started_at__lt: SQL < operator, may not work with all column types
        :type started_at__lt: datetime
        :param started_at__lte: SQL <= operator, may not work with all column types
        :type started_at__lte: datetime
        :param started_at__in: SQL IN operator, permits comma-separated values
        :type started_at__in: datetime
        :param started_at__nin: SQL NOT IN operator, permits comma-separated values
        :type started_at__nin: datetime
        :param started_at__notin: SQL NOT IN operator, permits comma-separated values
        :type started_at__notin: datetime
        :param started_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type started_at__isnull: str
        :param started_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type started_at__nisnull: str
        :param started_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type started_at__isnotnull: str
        :param started_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__l: str
        :param started_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__like: str
        :param started_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nl: str
        :param started_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nlike: str
        :param started_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__notlike: str
        :param started_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__il: str
        :param started_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__ilike: str
        :param started_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nil: str
        :param started_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nilike: str
        :param started_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__notilike: str
        :param started_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type started_at__desc: str
        :param started_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type started_at__asc: str
        :param ended_at__eq: SQL = operator
        :type ended_at__eq: datetime
        :param ended_at__ne: SQL != operator
        :type ended_at__ne: datetime
        :param ended_at__gt: SQL > operator, may not work with all column types
        :type ended_at__gt: datetime
        :param ended_at__gte: SQL >= operator, may not work with all column types
        :type ended_at__gte: datetime
        :param ended_at__lt: SQL < operator, may not work with all column types
        :type ended_at__lt: datetime
        :param ended_at__lte: SQL <= operator, may not work with all column types
        :type ended_at__lte: datetime
        :param ended_at__in: SQL IN operator, permits comma-separated values
        :type ended_at__in: datetime
        :param ended_at__nin: SQL NOT IN operator, permits comma-separated values
        :type ended_at__nin: datetime
        :param ended_at__notin: SQL NOT IN operator, permits comma-separated values
        :type ended_at__notin: datetime
        :param ended_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type ended_at__isnull: str
        :param ended_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type ended_at__nisnull: str
        :param ended_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type ended_at__isnotnull: str
        :param ended_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__l: str
        :param ended_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__like: str
        :param ended_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nl: str
        :param ended_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nlike: str
        :param ended_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__notlike: str
        :param ended_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__il: str
        :param ended_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__ilike: str
        :param ended_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nil: str
        :param ended_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nilike: str
        :param ended_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__notilike: str
        :param ended_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type ended_at__desc: str
        :param ended_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type ended_at__asc: str
        :param duration__eq: SQL = operator
        :type duration__eq: int
        :param duration__ne: SQL != operator
        :type duration__ne: int
        :param duration__gt: SQL > operator, may not work with all column types
        :type duration__gt: int
        :param duration__gte: SQL >= operator, may not work with all column types
        :type duration__gte: int
        :param duration__lt: SQL < operator, may not work with all column types
        :type duration__lt: int
        :param duration__lte: SQL <= operator, may not work with all column types
        :type duration__lte: int
        :param duration__in: SQL IN operator, permits comma-separated values
        :type duration__in: int
        :param duration__nin: SQL NOT IN operator, permits comma-separated values
        :type duration__nin: int
        :param duration__notin: SQL NOT IN operator, permits comma-separated values
        :type duration__notin: int
        :param duration__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type duration__isnull: str
        :param duration__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type duration__nisnull: str
        :param duration__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type duration__isnotnull: str
        :param duration__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__l: str
        :param duration__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__like: str
        :param duration__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nl: str
        :param duration__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nlike: str
        :param duration__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__notlike: str
        :param duration__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__il: str
        :param duration__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__ilike: str
        :param duration__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nil: str
        :param duration__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nilike: str
        :param duration__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__notilike: str
        :param duration__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type duration__desc: str
        :param duration__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type duration__asc: str
        :param file_size__eq: SQL = operator
        :type file_size__eq: float
        :param file_size__ne: SQL != operator
        :type file_size__ne: float
        :param file_size__gt: SQL > operator, may not work with all column types
        :type file_size__gt: float
        :param file_size__gte: SQL >= operator, may not work with all column types
        :type file_size__gte: float
        :param file_size__lt: SQL < operator, may not work with all column types
        :type file_size__lt: float
        :param file_size__lte: SQL <= operator, may not work with all column types
        :type file_size__lte: float
        :param file_size__in: SQL IN operator, permits comma-separated values
        :type file_size__in: float
        :param file_size__nin: SQL NOT IN operator, permits comma-separated values
        :type file_size__nin: float
        :param file_size__notin: SQL NOT IN operator, permits comma-separated values
        :type file_size__notin: float
        :param file_size__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type file_size__isnull: str
        :param file_size__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_size__nisnull: str
        :param file_size__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_size__isnotnull: str
        :param file_size__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__l: str
        :param file_size__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__like: str
        :param file_size__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nl: str
        :param file_size__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nlike: str
        :param file_size__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__notlike: str
        :param file_size__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__il: str
        :param file_size__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__ilike: str
        :param file_size__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nil: str
        :param file_size__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nilike: str
        :param file_size__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__notilike: str
        :param file_size__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type file_size__desc: str
        :param file_size__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type file_size__asc: str
        :param thumbnail_name__eq: SQL = operator
        :type thumbnail_name__eq: str
        :param thumbnail_name__ne: SQL != operator
        :type thumbnail_name__ne: str
        :param thumbnail_name__gt: SQL > operator, may not work with all column types
        :type thumbnail_name__gt: str
        :param thumbnail_name__gte: SQL >= operator, may not work with all column types
        :type thumbnail_name__gte: str
        :param thumbnail_name__lt: SQL < operator, may not work with all column types
        :type thumbnail_name__lt: str
        :param thumbnail_name__lte: SQL <= operator, may not work with all column types
        :type thumbnail_name__lte: str
        :param thumbnail_name__in: SQL IN operator, permits comma-separated values
        :type thumbnail_name__in: str
        :param thumbnail_name__nin: SQL NOT IN operator, permits comma-separated values
        :type thumbnail_name__nin: str
        :param thumbnail_name__notin: SQL NOT IN operator, permits comma-separated values
        :type thumbnail_name__notin: str
        :param thumbnail_name__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__isnull: str
        :param thumbnail_name__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__nisnull: str
        :param thumbnail_name__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__isnotnull: str
        :param thumbnail_name__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__l: str
        :param thumbnail_name__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__like: str
        :param thumbnail_name__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nl: str
        :param thumbnail_name__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nlike: str
        :param thumbnail_name__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__notlike: str
        :param thumbnail_name__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__il: str
        :param thumbnail_name__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__ilike: str
        :param thumbnail_name__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nil: str
        :param thumbnail_name__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nilike: str
        :param thumbnail_name__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__notilike: str
        :param thumbnail_name__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__desc: str
        :param thumbnail_name__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__asc: str
        :param status__eq: SQL = operator
        :type status__eq: str
        :param status__ne: SQL != operator
        :type status__ne: str
        :param status__gt: SQL > operator, may not work with all column types
        :type status__gt: str
        :param status__gte: SQL >= operator, may not work with all column types
        :type status__gte: str
        :param status__lt: SQL < operator, may not work with all column types
        :type status__lt: str
        :param status__lte: SQL <= operator, may not work with all column types
        :type status__lte: str
        :param status__in: SQL IN operator, permits comma-separated values
        :type status__in: str
        :param status__nin: SQL NOT IN operator, permits comma-separated values
        :type status__nin: str
        :param status__notin: SQL NOT IN operator, permits comma-separated values
        :type status__notin: str
        :param status__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type status__isnull: str
        :param status__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type status__nisnull: str
        :param status__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type status__isnotnull: str
        :param status__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__l: str
        :param status__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__like: str
        :param status__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nl: str
        :param status__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nlike: str
        :param status__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__notlike: str
        :param status__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__il: str
        :param status__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__ilike: str
        :param status__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nil: str
        :param status__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nilike: str
        :param status__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__notilike: str
        :param status__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type status__desc: str
        :param status__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type status__asc: str
        :param camera_id__eq: SQL = operator
        :type camera_id__eq: str
        :param camera_id__ne: SQL != operator
        :type camera_id__ne: str
        :param camera_id__gt: SQL > operator, may not work with all column types
        :type camera_id__gt: str
        :param camera_id__gte: SQL >= operator, may not work with all column types
        :type camera_id__gte: str
        :param camera_id__lt: SQL < operator, may not work with all column types
        :type camera_id__lt: str
        :param camera_id__lte: SQL <= operator, may not work with all column types
        :type camera_id__lte: str
        :param camera_id__in: SQL IN operator, permits comma-separated values
        :type camera_id__in: str
        :param camera_id__nin: SQL NOT IN operator, permits comma-separated values
        :type camera_id__nin: str
        :param camera_id__notin: SQL NOT IN operator, permits comma-separated values
        :type camera_id__notin: str
        :param camera_id__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type camera_id__isnull: str
        :param camera_id__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type camera_id__nisnull: str
        :param camera_id__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type camera_id__isnotnull: str
        :param camera_id__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__l: str
        :param camera_id__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__like: str
        :param camera_id__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nl: str
        :param camera_id__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nlike: str
        :param camera_id__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__notlike: str
        :param camera_id__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__il: str
        :param camera_id__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__ilike: str
        :param camera_id__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nil: str
        :param camera_id__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nilike: str
        :param camera_id__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__notilike: str
        :param camera_id__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type camera_id__desc: str
        :param camera_id__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type camera_id__asc: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_videos_serialize(
            limit=limit,
            offset=offset,
            id__eq=id__eq,
            id__ne=id__ne,
            id__gt=id__gt,
            id__gte=id__gte,
            id__lt=id__lt,
            id__lte=id__lte,
            id__in=id__in,
            id__nin=id__nin,
            id__notin=id__notin,
            id__isnull=id__isnull,
            id__nisnull=id__nisnull,
            id__isnotnull=id__isnotnull,
            id__l=id__l,
            id__like=id__like,
            id__nl=id__nl,
            id__nlike=id__nlike,
            id__notlike=id__notlike,
            id__il=id__il,
            id__ilike=id__ilike,
            id__nil=id__nil,
            id__nilike=id__nilike,
            id__notilike=id__notilike,
            id__desc=id__desc,
            id__asc=id__asc,
            created_at__eq=created_at__eq,
            created_at__ne=created_at__ne,
            created_at__gt=created_at__gt,
            created_at__gte=created_at__gte,
            created_at__lt=created_at__lt,
            created_at__lte=created_at__lte,
            created_at__in=created_at__in,
            created_at__nin=created_at__nin,
            created_at__notin=created_at__notin,
            created_at__isnull=created_at__isnull,
            created_at__nisnull=created_at__nisnull,
            created_at__isnotnull=created_at__isnotnull,
            created_at__l=created_at__l,
            created_at__like=created_at__like,
            created_at__nl=created_at__nl,
            created_at__nlike=created_at__nlike,
            created_at__notlike=created_at__notlike,
            created_at__il=created_at__il,
            created_at__ilike=created_at__ilike,
            created_at__nil=created_at__nil,
            created_at__nilike=created_at__nilike,
            created_at__notilike=created_at__notilike,
            created_at__desc=created_at__desc,
            created_at__asc=created_at__asc,
            updated_at__eq=updated_at__eq,
            updated_at__ne=updated_at__ne,
            updated_at__gt=updated_at__gt,
            updated_at__gte=updated_at__gte,
            updated_at__lt=updated_at__lt,
            updated_at__lte=updated_at__lte,
            updated_at__in=updated_at__in,
            updated_at__nin=updated_at__nin,
            updated_at__notin=updated_at__notin,
            updated_at__isnull=updated_at__isnull,
            updated_at__nisnull=updated_at__nisnull,
            updated_at__isnotnull=updated_at__isnotnull,
            updated_at__l=updated_at__l,
            updated_at__like=updated_at__like,
            updated_at__nl=updated_at__nl,
            updated_at__nlike=updated_at__nlike,
            updated_at__notlike=updated_at__notlike,
            updated_at__il=updated_at__il,
            updated_at__ilike=updated_at__ilike,
            updated_at__nil=updated_at__nil,
            updated_at__nilike=updated_at__nilike,
            updated_at__notilike=updated_at__notilike,
            updated_at__desc=updated_at__desc,
            updated_at__asc=updated_at__asc,
            deleted_at__eq=deleted_at__eq,
            deleted_at__ne=deleted_at__ne,
            deleted_at__gt=deleted_at__gt,
            deleted_at__gte=deleted_at__gte,
            deleted_at__lt=deleted_at__lt,
            deleted_at__lte=deleted_at__lte,
            deleted_at__in=deleted_at__in,
            deleted_at__nin=deleted_at__nin,
            deleted_at__notin=deleted_at__notin,
            deleted_at__isnull=deleted_at__isnull,
            deleted_at__nisnull=deleted_at__nisnull,
            deleted_at__isnotnull=deleted_at__isnotnull,
            deleted_at__l=deleted_at__l,
            deleted_at__like=deleted_at__like,
            deleted_at__nl=deleted_at__nl,
            deleted_at__nlike=deleted_at__nlike,
            deleted_at__notlike=deleted_at__notlike,
            deleted_at__il=deleted_at__il,
            deleted_at__ilike=deleted_at__ilike,
            deleted_at__nil=deleted_at__nil,
            deleted_at__nilike=deleted_at__nilike,
            deleted_at__notilike=deleted_at__notilike,
            deleted_at__desc=deleted_at__desc,
            deleted_at__asc=deleted_at__asc,
            file_name__eq=file_name__eq,
            file_name__ne=file_name__ne,
            file_name__gt=file_name__gt,
            file_name__gte=file_name__gte,
            file_name__lt=file_name__lt,
            file_name__lte=file_name__lte,
            file_name__in=file_name__in,
            file_name__nin=file_name__nin,
            file_name__notin=file_name__notin,
            file_name__isnull=file_name__isnull,
            file_name__nisnull=file_name__nisnull,
            file_name__isnotnull=file_name__isnotnull,
            file_name__l=file_name__l,
            file_name__like=file_name__like,
            file_name__nl=file_name__nl,
            file_name__nlike=file_name__nlike,
            file_name__notlike=file_name__notlike,
            file_name__il=file_name__il,
            file_name__ilike=file_name__ilike,
            file_name__nil=file_name__nil,
            file_name__nilike=file_name__nilike,
            file_name__notilike=file_name__notilike,
            file_name__desc=file_name__desc,
            file_name__asc=file_name__asc,
            started_at__eq=started_at__eq,
            started_at__ne=started_at__ne,
            started_at__gt=started_at__gt,
            started_at__gte=started_at__gte,
            started_at__lt=started_at__lt,
            started_at__lte=started_at__lte,
            started_at__in=started_at__in,
            started_at__nin=started_at__nin,
            started_at__notin=started_at__notin,
            started_at__isnull=started_at__isnull,
            started_at__nisnull=started_at__nisnull,
            started_at__isnotnull=started_at__isnotnull,
            started_at__l=started_at__l,
            started_at__like=started_at__like,
            started_at__nl=started_at__nl,
            started_at__nlike=started_at__nlike,
            started_at__notlike=started_at__notlike,
            started_at__il=started_at__il,
            started_at__ilike=started_at__ilike,
            started_at__nil=started_at__nil,
            started_at__nilike=started_at__nilike,
            started_at__notilike=started_at__notilike,
            started_at__desc=started_at__desc,
            started_at__asc=started_at__asc,
            ended_at__eq=ended_at__eq,
            ended_at__ne=ended_at__ne,
            ended_at__gt=ended_at__gt,
            ended_at__gte=ended_at__gte,
            ended_at__lt=ended_at__lt,
            ended_at__lte=ended_at__lte,
            ended_at__in=ended_at__in,
            ended_at__nin=ended_at__nin,
            ended_at__notin=ended_at__notin,
            ended_at__isnull=ended_at__isnull,
            ended_at__nisnull=ended_at__nisnull,
            ended_at__isnotnull=ended_at__isnotnull,
            ended_at__l=ended_at__l,
            ended_at__like=ended_at__like,
            ended_at__nl=ended_at__nl,
            ended_at__nlike=ended_at__nlike,
            ended_at__notlike=ended_at__notlike,
            ended_at__il=ended_at__il,
            ended_at__ilike=ended_at__ilike,
            ended_at__nil=ended_at__nil,
            ended_at__nilike=ended_at__nilike,
            ended_at__notilike=ended_at__notilike,
            ended_at__desc=ended_at__desc,
            ended_at__asc=ended_at__asc,
            duration__eq=duration__eq,
            duration__ne=duration__ne,
            duration__gt=duration__gt,
            duration__gte=duration__gte,
            duration__lt=duration__lt,
            duration__lte=duration__lte,
            duration__in=duration__in,
            duration__nin=duration__nin,
            duration__notin=duration__notin,
            duration__isnull=duration__isnull,
            duration__nisnull=duration__nisnull,
            duration__isnotnull=duration__isnotnull,
            duration__l=duration__l,
            duration__like=duration__like,
            duration__nl=duration__nl,
            duration__nlike=duration__nlike,
            duration__notlike=duration__notlike,
            duration__il=duration__il,
            duration__ilike=duration__ilike,
            duration__nil=duration__nil,
            duration__nilike=duration__nilike,
            duration__notilike=duration__notilike,
            duration__desc=duration__desc,
            duration__asc=duration__asc,
            file_size__eq=file_size__eq,
            file_size__ne=file_size__ne,
            file_size__gt=file_size__gt,
            file_size__gte=file_size__gte,
            file_size__lt=file_size__lt,
            file_size__lte=file_size__lte,
            file_size__in=file_size__in,
            file_size__nin=file_size__nin,
            file_size__notin=file_size__notin,
            file_size__isnull=file_size__isnull,
            file_size__nisnull=file_size__nisnull,
            file_size__isnotnull=file_size__isnotnull,
            file_size__l=file_size__l,
            file_size__like=file_size__like,
            file_size__nl=file_size__nl,
            file_size__nlike=file_size__nlike,
            file_size__notlike=file_size__notlike,
            file_size__il=file_size__il,
            file_size__ilike=file_size__ilike,
            file_size__nil=file_size__nil,
            file_size__nilike=file_size__nilike,
            file_size__notilike=file_size__notilike,
            file_size__desc=file_size__desc,
            file_size__asc=file_size__asc,
            thumbnail_name__eq=thumbnail_name__eq,
            thumbnail_name__ne=thumbnail_name__ne,
            thumbnail_name__gt=thumbnail_name__gt,
            thumbnail_name__gte=thumbnail_name__gte,
            thumbnail_name__lt=thumbnail_name__lt,
            thumbnail_name__lte=thumbnail_name__lte,
            thumbnail_name__in=thumbnail_name__in,
            thumbnail_name__nin=thumbnail_name__nin,
            thumbnail_name__notin=thumbnail_name__notin,
            thumbnail_name__isnull=thumbnail_name__isnull,
            thumbnail_name__nisnull=thumbnail_name__nisnull,
            thumbnail_name__isnotnull=thumbnail_name__isnotnull,
            thumbnail_name__l=thumbnail_name__l,
            thumbnail_name__like=thumbnail_name__like,
            thumbnail_name__nl=thumbnail_name__nl,
            thumbnail_name__nlike=thumbnail_name__nlike,
            thumbnail_name__notlike=thumbnail_name__notlike,
            thumbnail_name__il=thumbnail_name__il,
            thumbnail_name__ilike=thumbnail_name__ilike,
            thumbnail_name__nil=thumbnail_name__nil,
            thumbnail_name__nilike=thumbnail_name__nilike,
            thumbnail_name__notilike=thumbnail_name__notilike,
            thumbnail_name__desc=thumbnail_name__desc,
            thumbnail_name__asc=thumbnail_name__asc,
            status__eq=status__eq,
            status__ne=status__ne,
            status__gt=status__gt,
            status__gte=status__gte,
            status__lt=status__lt,
            status__lte=status__lte,
            status__in=status__in,
            status__nin=status__nin,
            status__notin=status__notin,
            status__isnull=status__isnull,
            status__nisnull=status__nisnull,
            status__isnotnull=status__isnotnull,
            status__l=status__l,
            status__like=status__like,
            status__nl=status__nl,
            status__nlike=status__nlike,
            status__notlike=status__notlike,
            status__il=status__il,
            status__ilike=status__ilike,
            status__nil=status__nil,
            status__nilike=status__nilike,
            status__notilike=status__notilike,
            status__desc=status__desc,
            status__asc=status__asc,
            camera_id__eq=camera_id__eq,
            camera_id__ne=camera_id__ne,
            camera_id__gt=camera_id__gt,
            camera_id__gte=camera_id__gte,
            camera_id__lt=camera_id__lt,
            camera_id__lte=camera_id__lte,
            camera_id__in=camera_id__in,
            camera_id__nin=camera_id__nin,
            camera_id__notin=camera_id__notin,
            camera_id__isnull=camera_id__isnull,
            camera_id__nisnull=camera_id__nisnull,
            camera_id__isnotnull=camera_id__isnotnull,
            camera_id__l=camera_id__l,
            camera_id__like=camera_id__like,
            camera_id__nl=camera_id__nl,
            camera_id__nlike=camera_id__nlike,
            camera_id__notlike=camera_id__notlike,
            camera_id__il=camera_id__il,
            camera_id__ilike=camera_id__ilike,
            camera_id__nil=camera_id__nil,
            camera_id__nilike=camera_id__nilike,
            camera_id__notilike=camera_id__notilike,
            camera_id__desc=camera_id__desc,
            camera_id__asc=camera_id__asc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_videos_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="SQL LIMIT operator")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="SQL OFFSET operator")] = None,
        id__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        id__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        id__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        id__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        id__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        id__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        id__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        id__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        id__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        id__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        id__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        id__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        id__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        id__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        created_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        created_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        created_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        created_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        created_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        created_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        created_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        created_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        created_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        updated_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        updated_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        updated_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        updated_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        updated_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        updated_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        updated_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        updated_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        updated_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        deleted_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        deleted_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        deleted_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        deleted_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        deleted_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        deleted_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        deleted_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        deleted_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        deleted_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        file_name__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        file_name__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        file_name__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        file_name__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        file_name__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        file_name__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        file_name__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_name__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_name__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        started_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        started_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        started_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        started_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        started_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        started_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        started_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        started_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        started_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        ended_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        ended_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        ended_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        ended_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        ended_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        ended_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        ended_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        ended_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        ended_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        duration__eq: Annotated[Optional[StrictInt], Field(description="SQL = operator")] = None,
        duration__ne: Annotated[Optional[StrictInt], Field(description="SQL != operator")] = None,
        duration__gt: Annotated[Optional[StrictInt], Field(description="SQL > operator, may not work with all column types")] = None,
        duration__gte: Annotated[Optional[StrictInt], Field(description="SQL >= operator, may not work with all column types")] = None,
        duration__lt: Annotated[Optional[StrictInt], Field(description="SQL < operator, may not work with all column types")] = None,
        duration__lte: Annotated[Optional[StrictInt], Field(description="SQL <= operator, may not work with all column types")] = None,
        duration__in: Annotated[Optional[StrictInt], Field(description="SQL IN operator, permits comma-separated values")] = None,
        duration__nin: Annotated[Optional[StrictInt], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        duration__notin: Annotated[Optional[StrictInt], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        duration__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        duration__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        duration__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        duration__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        duration__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__eq: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL = operator")] = None,
        file_size__ne: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL != operator")] = None,
        file_size__gt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL > operator, may not work with all column types")] = None,
        file_size__gte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL >= operator, may not work with all column types")] = None,
        file_size__lt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL < operator, may not work with all column types")] = None,
        file_size__lte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL <= operator, may not work with all column types")] = None,
        file_size__in: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL IN operator, permits comma-separated values")] = None,
        file_size__nin: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_size__notin: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_size__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        thumbnail_name__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        thumbnail_name__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        thumbnail_name__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        thumbnail_name__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        thumbnail_name__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        thumbnail_name__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        thumbnail_name__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        thumbnail_name__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        thumbnail_name__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        status__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        status__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        status__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        status__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        status__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        status__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        status__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        status__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        status__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        status__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        status__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        status__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        status__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        status__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        camera_id__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        camera_id__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        camera_id__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        camera_id__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        camera_id__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        camera_id__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        camera_id__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        camera_id__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        camera_id__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetVideos200Response]:
        """get_videos


        :param limit: SQL LIMIT operator
        :type limit: int
        :param offset: SQL OFFSET operator
        :type offset: int
        :param id__eq: SQL = operator
        :type id__eq: str
        :param id__ne: SQL != operator
        :type id__ne: str
        :param id__gt: SQL > operator, may not work with all column types
        :type id__gt: str
        :param id__gte: SQL >= operator, may not work with all column types
        :type id__gte: str
        :param id__lt: SQL < operator, may not work with all column types
        :type id__lt: str
        :param id__lte: SQL <= operator, may not work with all column types
        :type id__lte: str
        :param id__in: SQL IN operator, permits comma-separated values
        :type id__in: str
        :param id__nin: SQL NOT IN operator, permits comma-separated values
        :type id__nin: str
        :param id__notin: SQL NOT IN operator, permits comma-separated values
        :type id__notin: str
        :param id__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type id__isnull: str
        :param id__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type id__nisnull: str
        :param id__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type id__isnotnull: str
        :param id__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__l: str
        :param id__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__like: str
        :param id__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nl: str
        :param id__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nlike: str
        :param id__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__notlike: str
        :param id__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__il: str
        :param id__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__ilike: str
        :param id__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nil: str
        :param id__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nilike: str
        :param id__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__notilike: str
        :param id__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type id__desc: str
        :param id__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type id__asc: str
        :param created_at__eq: SQL = operator
        :type created_at__eq: datetime
        :param created_at__ne: SQL != operator
        :type created_at__ne: datetime
        :param created_at__gt: SQL > operator, may not work with all column types
        :type created_at__gt: datetime
        :param created_at__gte: SQL >= operator, may not work with all column types
        :type created_at__gte: datetime
        :param created_at__lt: SQL < operator, may not work with all column types
        :type created_at__lt: datetime
        :param created_at__lte: SQL <= operator, may not work with all column types
        :type created_at__lte: datetime
        :param created_at__in: SQL IN operator, permits comma-separated values
        :type created_at__in: datetime
        :param created_at__nin: SQL NOT IN operator, permits comma-separated values
        :type created_at__nin: datetime
        :param created_at__notin: SQL NOT IN operator, permits comma-separated values
        :type created_at__notin: datetime
        :param created_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type created_at__isnull: str
        :param created_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type created_at__nisnull: str
        :param created_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type created_at__isnotnull: str
        :param created_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__l: str
        :param created_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__like: str
        :param created_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nl: str
        :param created_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nlike: str
        :param created_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__notlike: str
        :param created_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__il: str
        :param created_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__ilike: str
        :param created_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nil: str
        :param created_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nilike: str
        :param created_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__notilike: str
        :param created_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type created_at__desc: str
        :param created_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type created_at__asc: str
        :param updated_at__eq: SQL = operator
        :type updated_at__eq: datetime
        :param updated_at__ne: SQL != operator
        :type updated_at__ne: datetime
        :param updated_at__gt: SQL > operator, may not work with all column types
        :type updated_at__gt: datetime
        :param updated_at__gte: SQL >= operator, may not work with all column types
        :type updated_at__gte: datetime
        :param updated_at__lt: SQL < operator, may not work with all column types
        :type updated_at__lt: datetime
        :param updated_at__lte: SQL <= operator, may not work with all column types
        :type updated_at__lte: datetime
        :param updated_at__in: SQL IN operator, permits comma-separated values
        :type updated_at__in: datetime
        :param updated_at__nin: SQL NOT IN operator, permits comma-separated values
        :type updated_at__nin: datetime
        :param updated_at__notin: SQL NOT IN operator, permits comma-separated values
        :type updated_at__notin: datetime
        :param updated_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type updated_at__isnull: str
        :param updated_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type updated_at__nisnull: str
        :param updated_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type updated_at__isnotnull: str
        :param updated_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__l: str
        :param updated_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__like: str
        :param updated_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nl: str
        :param updated_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nlike: str
        :param updated_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__notlike: str
        :param updated_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__il: str
        :param updated_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__ilike: str
        :param updated_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nil: str
        :param updated_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nilike: str
        :param updated_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__notilike: str
        :param updated_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type updated_at__desc: str
        :param updated_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type updated_at__asc: str
        :param deleted_at__eq: SQL = operator
        :type deleted_at__eq: datetime
        :param deleted_at__ne: SQL != operator
        :type deleted_at__ne: datetime
        :param deleted_at__gt: SQL > operator, may not work with all column types
        :type deleted_at__gt: datetime
        :param deleted_at__gte: SQL >= operator, may not work with all column types
        :type deleted_at__gte: datetime
        :param deleted_at__lt: SQL < operator, may not work with all column types
        :type deleted_at__lt: datetime
        :param deleted_at__lte: SQL <= operator, may not work with all column types
        :type deleted_at__lte: datetime
        :param deleted_at__in: SQL IN operator, permits comma-separated values
        :type deleted_at__in: datetime
        :param deleted_at__nin: SQL NOT IN operator, permits comma-separated values
        :type deleted_at__nin: datetime
        :param deleted_at__notin: SQL NOT IN operator, permits comma-separated values
        :type deleted_at__notin: datetime
        :param deleted_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type deleted_at__isnull: str
        :param deleted_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type deleted_at__nisnull: str
        :param deleted_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type deleted_at__isnotnull: str
        :param deleted_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__l: str
        :param deleted_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__like: str
        :param deleted_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nl: str
        :param deleted_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nlike: str
        :param deleted_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__notlike: str
        :param deleted_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__il: str
        :param deleted_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__ilike: str
        :param deleted_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nil: str
        :param deleted_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nilike: str
        :param deleted_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__notilike: str
        :param deleted_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type deleted_at__desc: str
        :param deleted_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type deleted_at__asc: str
        :param file_name__eq: SQL = operator
        :type file_name__eq: str
        :param file_name__ne: SQL != operator
        :type file_name__ne: str
        :param file_name__gt: SQL > operator, may not work with all column types
        :type file_name__gt: str
        :param file_name__gte: SQL >= operator, may not work with all column types
        :type file_name__gte: str
        :param file_name__lt: SQL < operator, may not work with all column types
        :type file_name__lt: str
        :param file_name__lte: SQL <= operator, may not work with all column types
        :type file_name__lte: str
        :param file_name__in: SQL IN operator, permits comma-separated values
        :type file_name__in: str
        :param file_name__nin: SQL NOT IN operator, permits comma-separated values
        :type file_name__nin: str
        :param file_name__notin: SQL NOT IN operator, permits comma-separated values
        :type file_name__notin: str
        :param file_name__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type file_name__isnull: str
        :param file_name__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_name__nisnull: str
        :param file_name__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_name__isnotnull: str
        :param file_name__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__l: str
        :param file_name__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__like: str
        :param file_name__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nl: str
        :param file_name__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nlike: str
        :param file_name__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__notlike: str
        :param file_name__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__il: str
        :param file_name__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__ilike: str
        :param file_name__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nil: str
        :param file_name__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nilike: str
        :param file_name__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__notilike: str
        :param file_name__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type file_name__desc: str
        :param file_name__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type file_name__asc: str
        :param started_at__eq: SQL = operator
        :type started_at__eq: datetime
        :param started_at__ne: SQL != operator
        :type started_at__ne: datetime
        :param started_at__gt: SQL > operator, may not work with all column types
        :type started_at__gt: datetime
        :param started_at__gte: SQL >= operator, may not work with all column types
        :type started_at__gte: datetime
        :param started_at__lt: SQL < operator, may not work with all column types
        :type started_at__lt: datetime
        :param started_at__lte: SQL <= operator, may not work with all column types
        :type started_at__lte: datetime
        :param started_at__in: SQL IN operator, permits comma-separated values
        :type started_at__in: datetime
        :param started_at__nin: SQL NOT IN operator, permits comma-separated values
        :type started_at__nin: datetime
        :param started_at__notin: SQL NOT IN operator, permits comma-separated values
        :type started_at__notin: datetime
        :param started_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type started_at__isnull: str
        :param started_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type started_at__nisnull: str
        :param started_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type started_at__isnotnull: str
        :param started_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__l: str
        :param started_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__like: str
        :param started_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nl: str
        :param started_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nlike: str
        :param started_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__notlike: str
        :param started_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__il: str
        :param started_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__ilike: str
        :param started_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nil: str
        :param started_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nilike: str
        :param started_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__notilike: str
        :param started_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type started_at__desc: str
        :param started_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type started_at__asc: str
        :param ended_at__eq: SQL = operator
        :type ended_at__eq: datetime
        :param ended_at__ne: SQL != operator
        :type ended_at__ne: datetime
        :param ended_at__gt: SQL > operator, may not work with all column types
        :type ended_at__gt: datetime
        :param ended_at__gte: SQL >= operator, may not work with all column types
        :type ended_at__gte: datetime
        :param ended_at__lt: SQL < operator, may not work with all column types
        :type ended_at__lt: datetime
        :param ended_at__lte: SQL <= operator, may not work with all column types
        :type ended_at__lte: datetime
        :param ended_at__in: SQL IN operator, permits comma-separated values
        :type ended_at__in: datetime
        :param ended_at__nin: SQL NOT IN operator, permits comma-separated values
        :type ended_at__nin: datetime
        :param ended_at__notin: SQL NOT IN operator, permits comma-separated values
        :type ended_at__notin: datetime
        :param ended_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type ended_at__isnull: str
        :param ended_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type ended_at__nisnull: str
        :param ended_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type ended_at__isnotnull: str
        :param ended_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__l: str
        :param ended_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__like: str
        :param ended_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nl: str
        :param ended_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nlike: str
        :param ended_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__notlike: str
        :param ended_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__il: str
        :param ended_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__ilike: str
        :param ended_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nil: str
        :param ended_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nilike: str
        :param ended_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__notilike: str
        :param ended_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type ended_at__desc: str
        :param ended_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type ended_at__asc: str
        :param duration__eq: SQL = operator
        :type duration__eq: int
        :param duration__ne: SQL != operator
        :type duration__ne: int
        :param duration__gt: SQL > operator, may not work with all column types
        :type duration__gt: int
        :param duration__gte: SQL >= operator, may not work with all column types
        :type duration__gte: int
        :param duration__lt: SQL < operator, may not work with all column types
        :type duration__lt: int
        :param duration__lte: SQL <= operator, may not work with all column types
        :type duration__lte: int
        :param duration__in: SQL IN operator, permits comma-separated values
        :type duration__in: int
        :param duration__nin: SQL NOT IN operator, permits comma-separated values
        :type duration__nin: int
        :param duration__notin: SQL NOT IN operator, permits comma-separated values
        :type duration__notin: int
        :param duration__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type duration__isnull: str
        :param duration__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type duration__nisnull: str
        :param duration__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type duration__isnotnull: str
        :param duration__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__l: str
        :param duration__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__like: str
        :param duration__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nl: str
        :param duration__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nlike: str
        :param duration__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__notlike: str
        :param duration__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__il: str
        :param duration__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__ilike: str
        :param duration__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nil: str
        :param duration__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nilike: str
        :param duration__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__notilike: str
        :param duration__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type duration__desc: str
        :param duration__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type duration__asc: str
        :param file_size__eq: SQL = operator
        :type file_size__eq: float
        :param file_size__ne: SQL != operator
        :type file_size__ne: float
        :param file_size__gt: SQL > operator, may not work with all column types
        :type file_size__gt: float
        :param file_size__gte: SQL >= operator, may not work with all column types
        :type file_size__gte: float
        :param file_size__lt: SQL < operator, may not work with all column types
        :type file_size__lt: float
        :param file_size__lte: SQL <= operator, may not work with all column types
        :type file_size__lte: float
        :param file_size__in: SQL IN operator, permits comma-separated values
        :type file_size__in: float
        :param file_size__nin: SQL NOT IN operator, permits comma-separated values
        :type file_size__nin: float
        :param file_size__notin: SQL NOT IN operator, permits comma-separated values
        :type file_size__notin: float
        :param file_size__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type file_size__isnull: str
        :param file_size__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_size__nisnull: str
        :param file_size__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_size__isnotnull: str
        :param file_size__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__l: str
        :param file_size__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__like: str
        :param file_size__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nl: str
        :param file_size__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nlike: str
        :param file_size__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__notlike: str
        :param file_size__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__il: str
        :param file_size__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__ilike: str
        :param file_size__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nil: str
        :param file_size__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nilike: str
        :param file_size__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__notilike: str
        :param file_size__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type file_size__desc: str
        :param file_size__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type file_size__asc: str
        :param thumbnail_name__eq: SQL = operator
        :type thumbnail_name__eq: str
        :param thumbnail_name__ne: SQL != operator
        :type thumbnail_name__ne: str
        :param thumbnail_name__gt: SQL > operator, may not work with all column types
        :type thumbnail_name__gt: str
        :param thumbnail_name__gte: SQL >= operator, may not work with all column types
        :type thumbnail_name__gte: str
        :param thumbnail_name__lt: SQL < operator, may not work with all column types
        :type thumbnail_name__lt: str
        :param thumbnail_name__lte: SQL <= operator, may not work with all column types
        :type thumbnail_name__lte: str
        :param thumbnail_name__in: SQL IN operator, permits comma-separated values
        :type thumbnail_name__in: str
        :param thumbnail_name__nin: SQL NOT IN operator, permits comma-separated values
        :type thumbnail_name__nin: str
        :param thumbnail_name__notin: SQL NOT IN operator, permits comma-separated values
        :type thumbnail_name__notin: str
        :param thumbnail_name__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__isnull: str
        :param thumbnail_name__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__nisnull: str
        :param thumbnail_name__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__isnotnull: str
        :param thumbnail_name__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__l: str
        :param thumbnail_name__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__like: str
        :param thumbnail_name__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nl: str
        :param thumbnail_name__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nlike: str
        :param thumbnail_name__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__notlike: str
        :param thumbnail_name__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__il: str
        :param thumbnail_name__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__ilike: str
        :param thumbnail_name__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nil: str
        :param thumbnail_name__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nilike: str
        :param thumbnail_name__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__notilike: str
        :param thumbnail_name__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__desc: str
        :param thumbnail_name__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__asc: str
        :param status__eq: SQL = operator
        :type status__eq: str
        :param status__ne: SQL != operator
        :type status__ne: str
        :param status__gt: SQL > operator, may not work with all column types
        :type status__gt: str
        :param status__gte: SQL >= operator, may not work with all column types
        :type status__gte: str
        :param status__lt: SQL < operator, may not work with all column types
        :type status__lt: str
        :param status__lte: SQL <= operator, may not work with all column types
        :type status__lte: str
        :param status__in: SQL IN operator, permits comma-separated values
        :type status__in: str
        :param status__nin: SQL NOT IN operator, permits comma-separated values
        :type status__nin: str
        :param status__notin: SQL NOT IN operator, permits comma-separated values
        :type status__notin: str
        :param status__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type status__isnull: str
        :param status__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type status__nisnull: str
        :param status__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type status__isnotnull: str
        :param status__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__l: str
        :param status__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__like: str
        :param status__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nl: str
        :param status__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nlike: str
        :param status__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__notlike: str
        :param status__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__il: str
        :param status__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__ilike: str
        :param status__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nil: str
        :param status__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nilike: str
        :param status__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__notilike: str
        :param status__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type status__desc: str
        :param status__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type status__asc: str
        :param camera_id__eq: SQL = operator
        :type camera_id__eq: str
        :param camera_id__ne: SQL != operator
        :type camera_id__ne: str
        :param camera_id__gt: SQL > operator, may not work with all column types
        :type camera_id__gt: str
        :param camera_id__gte: SQL >= operator, may not work with all column types
        :type camera_id__gte: str
        :param camera_id__lt: SQL < operator, may not work with all column types
        :type camera_id__lt: str
        :param camera_id__lte: SQL <= operator, may not work with all column types
        :type camera_id__lte: str
        :param camera_id__in: SQL IN operator, permits comma-separated values
        :type camera_id__in: str
        :param camera_id__nin: SQL NOT IN operator, permits comma-separated values
        :type camera_id__nin: str
        :param camera_id__notin: SQL NOT IN operator, permits comma-separated values
        :type camera_id__notin: str
        :param camera_id__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type camera_id__isnull: str
        :param camera_id__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type camera_id__nisnull: str
        :param camera_id__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type camera_id__isnotnull: str
        :param camera_id__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__l: str
        :param camera_id__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__like: str
        :param camera_id__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nl: str
        :param camera_id__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nlike: str
        :param camera_id__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__notlike: str
        :param camera_id__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__il: str
        :param camera_id__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__ilike: str
        :param camera_id__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nil: str
        :param camera_id__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nilike: str
        :param camera_id__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__notilike: str
        :param camera_id__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type camera_id__desc: str
        :param camera_id__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type camera_id__asc: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_videos_serialize(
            limit=limit,
            offset=offset,
            id__eq=id__eq,
            id__ne=id__ne,
            id__gt=id__gt,
            id__gte=id__gte,
            id__lt=id__lt,
            id__lte=id__lte,
            id__in=id__in,
            id__nin=id__nin,
            id__notin=id__notin,
            id__isnull=id__isnull,
            id__nisnull=id__nisnull,
            id__isnotnull=id__isnotnull,
            id__l=id__l,
            id__like=id__like,
            id__nl=id__nl,
            id__nlike=id__nlike,
            id__notlike=id__notlike,
            id__il=id__il,
            id__ilike=id__ilike,
            id__nil=id__nil,
            id__nilike=id__nilike,
            id__notilike=id__notilike,
            id__desc=id__desc,
            id__asc=id__asc,
            created_at__eq=created_at__eq,
            created_at__ne=created_at__ne,
            created_at__gt=created_at__gt,
            created_at__gte=created_at__gte,
            created_at__lt=created_at__lt,
            created_at__lte=created_at__lte,
            created_at__in=created_at__in,
            created_at__nin=created_at__nin,
            created_at__notin=created_at__notin,
            created_at__isnull=created_at__isnull,
            created_at__nisnull=created_at__nisnull,
            created_at__isnotnull=created_at__isnotnull,
            created_at__l=created_at__l,
            created_at__like=created_at__like,
            created_at__nl=created_at__nl,
            created_at__nlike=created_at__nlike,
            created_at__notlike=created_at__notlike,
            created_at__il=created_at__il,
            created_at__ilike=created_at__ilike,
            created_at__nil=created_at__nil,
            created_at__nilike=created_at__nilike,
            created_at__notilike=created_at__notilike,
            created_at__desc=created_at__desc,
            created_at__asc=created_at__asc,
            updated_at__eq=updated_at__eq,
            updated_at__ne=updated_at__ne,
            updated_at__gt=updated_at__gt,
            updated_at__gte=updated_at__gte,
            updated_at__lt=updated_at__lt,
            updated_at__lte=updated_at__lte,
            updated_at__in=updated_at__in,
            updated_at__nin=updated_at__nin,
            updated_at__notin=updated_at__notin,
            updated_at__isnull=updated_at__isnull,
            updated_at__nisnull=updated_at__nisnull,
            updated_at__isnotnull=updated_at__isnotnull,
            updated_at__l=updated_at__l,
            updated_at__like=updated_at__like,
            updated_at__nl=updated_at__nl,
            updated_at__nlike=updated_at__nlike,
            updated_at__notlike=updated_at__notlike,
            updated_at__il=updated_at__il,
            updated_at__ilike=updated_at__ilike,
            updated_at__nil=updated_at__nil,
            updated_at__nilike=updated_at__nilike,
            updated_at__notilike=updated_at__notilike,
            updated_at__desc=updated_at__desc,
            updated_at__asc=updated_at__asc,
            deleted_at__eq=deleted_at__eq,
            deleted_at__ne=deleted_at__ne,
            deleted_at__gt=deleted_at__gt,
            deleted_at__gte=deleted_at__gte,
            deleted_at__lt=deleted_at__lt,
            deleted_at__lte=deleted_at__lte,
            deleted_at__in=deleted_at__in,
            deleted_at__nin=deleted_at__nin,
            deleted_at__notin=deleted_at__notin,
            deleted_at__isnull=deleted_at__isnull,
            deleted_at__nisnull=deleted_at__nisnull,
            deleted_at__isnotnull=deleted_at__isnotnull,
            deleted_at__l=deleted_at__l,
            deleted_at__like=deleted_at__like,
            deleted_at__nl=deleted_at__nl,
            deleted_at__nlike=deleted_at__nlike,
            deleted_at__notlike=deleted_at__notlike,
            deleted_at__il=deleted_at__il,
            deleted_at__ilike=deleted_at__ilike,
            deleted_at__nil=deleted_at__nil,
            deleted_at__nilike=deleted_at__nilike,
            deleted_at__notilike=deleted_at__notilike,
            deleted_at__desc=deleted_at__desc,
            deleted_at__asc=deleted_at__asc,
            file_name__eq=file_name__eq,
            file_name__ne=file_name__ne,
            file_name__gt=file_name__gt,
            file_name__gte=file_name__gte,
            file_name__lt=file_name__lt,
            file_name__lte=file_name__lte,
            file_name__in=file_name__in,
            file_name__nin=file_name__nin,
            file_name__notin=file_name__notin,
            file_name__isnull=file_name__isnull,
            file_name__nisnull=file_name__nisnull,
            file_name__isnotnull=file_name__isnotnull,
            file_name__l=file_name__l,
            file_name__like=file_name__like,
            file_name__nl=file_name__nl,
            file_name__nlike=file_name__nlike,
            file_name__notlike=file_name__notlike,
            file_name__il=file_name__il,
            file_name__ilike=file_name__ilike,
            file_name__nil=file_name__nil,
            file_name__nilike=file_name__nilike,
            file_name__notilike=file_name__notilike,
            file_name__desc=file_name__desc,
            file_name__asc=file_name__asc,
            started_at__eq=started_at__eq,
            started_at__ne=started_at__ne,
            started_at__gt=started_at__gt,
            started_at__gte=started_at__gte,
            started_at__lt=started_at__lt,
            started_at__lte=started_at__lte,
            started_at__in=started_at__in,
            started_at__nin=started_at__nin,
            started_at__notin=started_at__notin,
            started_at__isnull=started_at__isnull,
            started_at__nisnull=started_at__nisnull,
            started_at__isnotnull=started_at__isnotnull,
            started_at__l=started_at__l,
            started_at__like=started_at__like,
            started_at__nl=started_at__nl,
            started_at__nlike=started_at__nlike,
            started_at__notlike=started_at__notlike,
            started_at__il=started_at__il,
            started_at__ilike=started_at__ilike,
            started_at__nil=started_at__nil,
            started_at__nilike=started_at__nilike,
            started_at__notilike=started_at__notilike,
            started_at__desc=started_at__desc,
            started_at__asc=started_at__asc,
            ended_at__eq=ended_at__eq,
            ended_at__ne=ended_at__ne,
            ended_at__gt=ended_at__gt,
            ended_at__gte=ended_at__gte,
            ended_at__lt=ended_at__lt,
            ended_at__lte=ended_at__lte,
            ended_at__in=ended_at__in,
            ended_at__nin=ended_at__nin,
            ended_at__notin=ended_at__notin,
            ended_at__isnull=ended_at__isnull,
            ended_at__nisnull=ended_at__nisnull,
            ended_at__isnotnull=ended_at__isnotnull,
            ended_at__l=ended_at__l,
            ended_at__like=ended_at__like,
            ended_at__nl=ended_at__nl,
            ended_at__nlike=ended_at__nlike,
            ended_at__notlike=ended_at__notlike,
            ended_at__il=ended_at__il,
            ended_at__ilike=ended_at__ilike,
            ended_at__nil=ended_at__nil,
            ended_at__nilike=ended_at__nilike,
            ended_at__notilike=ended_at__notilike,
            ended_at__desc=ended_at__desc,
            ended_at__asc=ended_at__asc,
            duration__eq=duration__eq,
            duration__ne=duration__ne,
            duration__gt=duration__gt,
            duration__gte=duration__gte,
            duration__lt=duration__lt,
            duration__lte=duration__lte,
            duration__in=duration__in,
            duration__nin=duration__nin,
            duration__notin=duration__notin,
            duration__isnull=duration__isnull,
            duration__nisnull=duration__nisnull,
            duration__isnotnull=duration__isnotnull,
            duration__l=duration__l,
            duration__like=duration__like,
            duration__nl=duration__nl,
            duration__nlike=duration__nlike,
            duration__notlike=duration__notlike,
            duration__il=duration__il,
            duration__ilike=duration__ilike,
            duration__nil=duration__nil,
            duration__nilike=duration__nilike,
            duration__notilike=duration__notilike,
            duration__desc=duration__desc,
            duration__asc=duration__asc,
            file_size__eq=file_size__eq,
            file_size__ne=file_size__ne,
            file_size__gt=file_size__gt,
            file_size__gte=file_size__gte,
            file_size__lt=file_size__lt,
            file_size__lte=file_size__lte,
            file_size__in=file_size__in,
            file_size__nin=file_size__nin,
            file_size__notin=file_size__notin,
            file_size__isnull=file_size__isnull,
            file_size__nisnull=file_size__nisnull,
            file_size__isnotnull=file_size__isnotnull,
            file_size__l=file_size__l,
            file_size__like=file_size__like,
            file_size__nl=file_size__nl,
            file_size__nlike=file_size__nlike,
            file_size__notlike=file_size__notlike,
            file_size__il=file_size__il,
            file_size__ilike=file_size__ilike,
            file_size__nil=file_size__nil,
            file_size__nilike=file_size__nilike,
            file_size__notilike=file_size__notilike,
            file_size__desc=file_size__desc,
            file_size__asc=file_size__asc,
            thumbnail_name__eq=thumbnail_name__eq,
            thumbnail_name__ne=thumbnail_name__ne,
            thumbnail_name__gt=thumbnail_name__gt,
            thumbnail_name__gte=thumbnail_name__gte,
            thumbnail_name__lt=thumbnail_name__lt,
            thumbnail_name__lte=thumbnail_name__lte,
            thumbnail_name__in=thumbnail_name__in,
            thumbnail_name__nin=thumbnail_name__nin,
            thumbnail_name__notin=thumbnail_name__notin,
            thumbnail_name__isnull=thumbnail_name__isnull,
            thumbnail_name__nisnull=thumbnail_name__nisnull,
            thumbnail_name__isnotnull=thumbnail_name__isnotnull,
            thumbnail_name__l=thumbnail_name__l,
            thumbnail_name__like=thumbnail_name__like,
            thumbnail_name__nl=thumbnail_name__nl,
            thumbnail_name__nlike=thumbnail_name__nlike,
            thumbnail_name__notlike=thumbnail_name__notlike,
            thumbnail_name__il=thumbnail_name__il,
            thumbnail_name__ilike=thumbnail_name__ilike,
            thumbnail_name__nil=thumbnail_name__nil,
            thumbnail_name__nilike=thumbnail_name__nilike,
            thumbnail_name__notilike=thumbnail_name__notilike,
            thumbnail_name__desc=thumbnail_name__desc,
            thumbnail_name__asc=thumbnail_name__asc,
            status__eq=status__eq,
            status__ne=status__ne,
            status__gt=status__gt,
            status__gte=status__gte,
            status__lt=status__lt,
            status__lte=status__lte,
            status__in=status__in,
            status__nin=status__nin,
            status__notin=status__notin,
            status__isnull=status__isnull,
            status__nisnull=status__nisnull,
            status__isnotnull=status__isnotnull,
            status__l=status__l,
            status__like=status__like,
            status__nl=status__nl,
            status__nlike=status__nlike,
            status__notlike=status__notlike,
            status__il=status__il,
            status__ilike=status__ilike,
            status__nil=status__nil,
            status__nilike=status__nilike,
            status__notilike=status__notilike,
            status__desc=status__desc,
            status__asc=status__asc,
            camera_id__eq=camera_id__eq,
            camera_id__ne=camera_id__ne,
            camera_id__gt=camera_id__gt,
            camera_id__gte=camera_id__gte,
            camera_id__lt=camera_id__lt,
            camera_id__lte=camera_id__lte,
            camera_id__in=camera_id__in,
            camera_id__nin=camera_id__nin,
            camera_id__notin=camera_id__notin,
            camera_id__isnull=camera_id__isnull,
            camera_id__nisnull=camera_id__nisnull,
            camera_id__isnotnull=camera_id__isnotnull,
            camera_id__l=camera_id__l,
            camera_id__like=camera_id__like,
            camera_id__nl=camera_id__nl,
            camera_id__nlike=camera_id__nlike,
            camera_id__notlike=camera_id__notlike,
            camera_id__il=camera_id__il,
            camera_id__ilike=camera_id__ilike,
            camera_id__nil=camera_id__nil,
            camera_id__nilike=camera_id__nilike,
            camera_id__notilike=camera_id__notilike,
            camera_id__desc=camera_id__desc,
            camera_id__asc=camera_id__asc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_videos_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="SQL LIMIT operator")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="SQL OFFSET operator")] = None,
        id__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        id__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        id__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        id__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        id__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        id__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        id__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        id__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        id__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        id__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        id__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        id__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        id__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        id__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        id__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        created_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        created_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        created_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        created_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        created_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        created_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        created_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        created_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        created_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        created_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        created_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        updated_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        updated_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        updated_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        updated_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        updated_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        updated_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        updated_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        updated_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        updated_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        updated_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        updated_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        deleted_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        deleted_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        deleted_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        deleted_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        deleted_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        deleted_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        deleted_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        deleted_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        deleted_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        deleted_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        deleted_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        file_name__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        file_name__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        file_name__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        file_name__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        file_name__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        file_name__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        file_name__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_name__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_name__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_name__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        file_name__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        started_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        started_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        started_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        started_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        started_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        started_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        started_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        started_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        started_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        started_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        started_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__eq: Annotated[Optional[datetime], Field(description="SQL = operator")] = None,
        ended_at__ne: Annotated[Optional[datetime], Field(description="SQL != operator")] = None,
        ended_at__gt: Annotated[Optional[datetime], Field(description="SQL > operator, may not work with all column types")] = None,
        ended_at__gte: Annotated[Optional[datetime], Field(description="SQL >= operator, may not work with all column types")] = None,
        ended_at__lt: Annotated[Optional[datetime], Field(description="SQL < operator, may not work with all column types")] = None,
        ended_at__lte: Annotated[Optional[datetime], Field(description="SQL <= operator, may not work with all column types")] = None,
        ended_at__in: Annotated[Optional[datetime], Field(description="SQL IN operator, permits comma-separated values")] = None,
        ended_at__nin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        ended_at__notin: Annotated[Optional[datetime], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        ended_at__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        ended_at__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        ended_at__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        duration__eq: Annotated[Optional[StrictInt], Field(description="SQL = operator")] = None,
        duration__ne: Annotated[Optional[StrictInt], Field(description="SQL != operator")] = None,
        duration__gt: Annotated[Optional[StrictInt], Field(description="SQL > operator, may not work with all column types")] = None,
        duration__gte: Annotated[Optional[StrictInt], Field(description="SQL >= operator, may not work with all column types")] = None,
        duration__lt: Annotated[Optional[StrictInt], Field(description="SQL < operator, may not work with all column types")] = None,
        duration__lte: Annotated[Optional[StrictInt], Field(description="SQL <= operator, may not work with all column types")] = None,
        duration__in: Annotated[Optional[StrictInt], Field(description="SQL IN operator, permits comma-separated values")] = None,
        duration__nin: Annotated[Optional[StrictInt], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        duration__notin: Annotated[Optional[StrictInt], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        duration__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        duration__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        duration__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        duration__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        duration__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        duration__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__eq: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL = operator")] = None,
        file_size__ne: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL != operator")] = None,
        file_size__gt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL > operator, may not work with all column types")] = None,
        file_size__gte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL >= operator, may not work with all column types")] = None,
        file_size__lt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL < operator, may not work with all column types")] = None,
        file_size__lte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL <= operator, may not work with all column types")] = None,
        file_size__in: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL IN operator, permits comma-separated values")] = None,
        file_size__nin: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_size__notin: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        file_size__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        file_size__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        file_size__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        thumbnail_name__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        thumbnail_name__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        thumbnail_name__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        thumbnail_name__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        thumbnail_name__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        thumbnail_name__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        thumbnail_name__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        thumbnail_name__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        thumbnail_name__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        thumbnail_name__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        thumbnail_name__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        status__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        status__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        status__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        status__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        status__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        status__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        status__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        status__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        status__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        status__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        status__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        status__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        status__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        status__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        status__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__eq: Annotated[Optional[StrictStr], Field(description="SQL = operator")] = None,
        camera_id__ne: Annotated[Optional[StrictStr], Field(description="SQL != operator")] = None,
        camera_id__gt: Annotated[Optional[StrictStr], Field(description="SQL > operator, may not work with all column types")] = None,
        camera_id__gte: Annotated[Optional[StrictStr], Field(description="SQL >= operator, may not work with all column types")] = None,
        camera_id__lt: Annotated[Optional[StrictStr], Field(description="SQL < operator, may not work with all column types")] = None,
        camera_id__lte: Annotated[Optional[StrictStr], Field(description="SQL <= operator, may not work with all column types")] = None,
        camera_id__in: Annotated[Optional[StrictStr], Field(description="SQL IN operator, permits comma-separated values")] = None,
        camera_id__nin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        camera_id__notin: Annotated[Optional[StrictStr], Field(description="SQL NOT IN operator, permits comma-separated values")] = None,
        camera_id__isnull: Annotated[Optional[StrictStr], Field(description="SQL IS NULL operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__nisnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__isnotnull: Annotated[Optional[StrictStr], Field(description="SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__l: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__like: Annotated[Optional[StrictStr], Field(description="SQL LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nl: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__notlike: Annotated[Optional[StrictStr], Field(description="SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__il: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__ilike: Annotated[Optional[StrictStr], Field(description="SQL ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nil: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__nilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__notilike: Annotated[Optional[StrictStr], Field(description="SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %")] = None,
        camera_id__desc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)")] = None,
        camera_id__asc: Annotated[Optional[StrictStr], Field(description="SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_videos


        :param limit: SQL LIMIT operator
        :type limit: int
        :param offset: SQL OFFSET operator
        :type offset: int
        :param id__eq: SQL = operator
        :type id__eq: str
        :param id__ne: SQL != operator
        :type id__ne: str
        :param id__gt: SQL > operator, may not work with all column types
        :type id__gt: str
        :param id__gte: SQL >= operator, may not work with all column types
        :type id__gte: str
        :param id__lt: SQL < operator, may not work with all column types
        :type id__lt: str
        :param id__lte: SQL <= operator, may not work with all column types
        :type id__lte: str
        :param id__in: SQL IN operator, permits comma-separated values
        :type id__in: str
        :param id__nin: SQL NOT IN operator, permits comma-separated values
        :type id__nin: str
        :param id__notin: SQL NOT IN operator, permits comma-separated values
        :type id__notin: str
        :param id__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type id__isnull: str
        :param id__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type id__nisnull: str
        :param id__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type id__isnotnull: str
        :param id__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__l: str
        :param id__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__like: str
        :param id__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nl: str
        :param id__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nlike: str
        :param id__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type id__notlike: str
        :param id__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__il: str
        :param id__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__ilike: str
        :param id__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nil: str
        :param id__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__nilike: str
        :param id__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type id__notilike: str
        :param id__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type id__desc: str
        :param id__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type id__asc: str
        :param created_at__eq: SQL = operator
        :type created_at__eq: datetime
        :param created_at__ne: SQL != operator
        :type created_at__ne: datetime
        :param created_at__gt: SQL > operator, may not work with all column types
        :type created_at__gt: datetime
        :param created_at__gte: SQL >= operator, may not work with all column types
        :type created_at__gte: datetime
        :param created_at__lt: SQL < operator, may not work with all column types
        :type created_at__lt: datetime
        :param created_at__lte: SQL <= operator, may not work with all column types
        :type created_at__lte: datetime
        :param created_at__in: SQL IN operator, permits comma-separated values
        :type created_at__in: datetime
        :param created_at__nin: SQL NOT IN operator, permits comma-separated values
        :type created_at__nin: datetime
        :param created_at__notin: SQL NOT IN operator, permits comma-separated values
        :type created_at__notin: datetime
        :param created_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type created_at__isnull: str
        :param created_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type created_at__nisnull: str
        :param created_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type created_at__isnotnull: str
        :param created_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__l: str
        :param created_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__like: str
        :param created_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nl: str
        :param created_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nlike: str
        :param created_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__notlike: str
        :param created_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__il: str
        :param created_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__ilike: str
        :param created_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nil: str
        :param created_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__nilike: str
        :param created_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type created_at__notilike: str
        :param created_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type created_at__desc: str
        :param created_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type created_at__asc: str
        :param updated_at__eq: SQL = operator
        :type updated_at__eq: datetime
        :param updated_at__ne: SQL != operator
        :type updated_at__ne: datetime
        :param updated_at__gt: SQL > operator, may not work with all column types
        :type updated_at__gt: datetime
        :param updated_at__gte: SQL >= operator, may not work with all column types
        :type updated_at__gte: datetime
        :param updated_at__lt: SQL < operator, may not work with all column types
        :type updated_at__lt: datetime
        :param updated_at__lte: SQL <= operator, may not work with all column types
        :type updated_at__lte: datetime
        :param updated_at__in: SQL IN operator, permits comma-separated values
        :type updated_at__in: datetime
        :param updated_at__nin: SQL NOT IN operator, permits comma-separated values
        :type updated_at__nin: datetime
        :param updated_at__notin: SQL NOT IN operator, permits comma-separated values
        :type updated_at__notin: datetime
        :param updated_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type updated_at__isnull: str
        :param updated_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type updated_at__nisnull: str
        :param updated_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type updated_at__isnotnull: str
        :param updated_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__l: str
        :param updated_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__like: str
        :param updated_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nl: str
        :param updated_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nlike: str
        :param updated_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__notlike: str
        :param updated_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__il: str
        :param updated_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__ilike: str
        :param updated_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nil: str
        :param updated_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__nilike: str
        :param updated_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type updated_at__notilike: str
        :param updated_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type updated_at__desc: str
        :param updated_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type updated_at__asc: str
        :param deleted_at__eq: SQL = operator
        :type deleted_at__eq: datetime
        :param deleted_at__ne: SQL != operator
        :type deleted_at__ne: datetime
        :param deleted_at__gt: SQL > operator, may not work with all column types
        :type deleted_at__gt: datetime
        :param deleted_at__gte: SQL >= operator, may not work with all column types
        :type deleted_at__gte: datetime
        :param deleted_at__lt: SQL < operator, may not work with all column types
        :type deleted_at__lt: datetime
        :param deleted_at__lte: SQL <= operator, may not work with all column types
        :type deleted_at__lte: datetime
        :param deleted_at__in: SQL IN operator, permits comma-separated values
        :type deleted_at__in: datetime
        :param deleted_at__nin: SQL NOT IN operator, permits comma-separated values
        :type deleted_at__nin: datetime
        :param deleted_at__notin: SQL NOT IN operator, permits comma-separated values
        :type deleted_at__notin: datetime
        :param deleted_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type deleted_at__isnull: str
        :param deleted_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type deleted_at__nisnull: str
        :param deleted_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type deleted_at__isnotnull: str
        :param deleted_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__l: str
        :param deleted_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__like: str
        :param deleted_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nl: str
        :param deleted_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nlike: str
        :param deleted_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__notlike: str
        :param deleted_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__il: str
        :param deleted_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__ilike: str
        :param deleted_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nil: str
        :param deleted_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__nilike: str
        :param deleted_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type deleted_at__notilike: str
        :param deleted_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type deleted_at__desc: str
        :param deleted_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type deleted_at__asc: str
        :param file_name__eq: SQL = operator
        :type file_name__eq: str
        :param file_name__ne: SQL != operator
        :type file_name__ne: str
        :param file_name__gt: SQL > operator, may not work with all column types
        :type file_name__gt: str
        :param file_name__gte: SQL >= operator, may not work with all column types
        :type file_name__gte: str
        :param file_name__lt: SQL < operator, may not work with all column types
        :type file_name__lt: str
        :param file_name__lte: SQL <= operator, may not work with all column types
        :type file_name__lte: str
        :param file_name__in: SQL IN operator, permits comma-separated values
        :type file_name__in: str
        :param file_name__nin: SQL NOT IN operator, permits comma-separated values
        :type file_name__nin: str
        :param file_name__notin: SQL NOT IN operator, permits comma-separated values
        :type file_name__notin: str
        :param file_name__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type file_name__isnull: str
        :param file_name__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_name__nisnull: str
        :param file_name__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_name__isnotnull: str
        :param file_name__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__l: str
        :param file_name__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__like: str
        :param file_name__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nl: str
        :param file_name__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nlike: str
        :param file_name__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__notlike: str
        :param file_name__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__il: str
        :param file_name__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__ilike: str
        :param file_name__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nil: str
        :param file_name__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__nilike: str
        :param file_name__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_name__notilike: str
        :param file_name__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type file_name__desc: str
        :param file_name__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type file_name__asc: str
        :param started_at__eq: SQL = operator
        :type started_at__eq: datetime
        :param started_at__ne: SQL != operator
        :type started_at__ne: datetime
        :param started_at__gt: SQL > operator, may not work with all column types
        :type started_at__gt: datetime
        :param started_at__gte: SQL >= operator, may not work with all column types
        :type started_at__gte: datetime
        :param started_at__lt: SQL < operator, may not work with all column types
        :type started_at__lt: datetime
        :param started_at__lte: SQL <= operator, may not work with all column types
        :type started_at__lte: datetime
        :param started_at__in: SQL IN operator, permits comma-separated values
        :type started_at__in: datetime
        :param started_at__nin: SQL NOT IN operator, permits comma-separated values
        :type started_at__nin: datetime
        :param started_at__notin: SQL NOT IN operator, permits comma-separated values
        :type started_at__notin: datetime
        :param started_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type started_at__isnull: str
        :param started_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type started_at__nisnull: str
        :param started_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type started_at__isnotnull: str
        :param started_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__l: str
        :param started_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__like: str
        :param started_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nl: str
        :param started_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nlike: str
        :param started_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__notlike: str
        :param started_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__il: str
        :param started_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__ilike: str
        :param started_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nil: str
        :param started_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__nilike: str
        :param started_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type started_at__notilike: str
        :param started_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type started_at__desc: str
        :param started_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type started_at__asc: str
        :param ended_at__eq: SQL = operator
        :type ended_at__eq: datetime
        :param ended_at__ne: SQL != operator
        :type ended_at__ne: datetime
        :param ended_at__gt: SQL > operator, may not work with all column types
        :type ended_at__gt: datetime
        :param ended_at__gte: SQL >= operator, may not work with all column types
        :type ended_at__gte: datetime
        :param ended_at__lt: SQL < operator, may not work with all column types
        :type ended_at__lt: datetime
        :param ended_at__lte: SQL <= operator, may not work with all column types
        :type ended_at__lte: datetime
        :param ended_at__in: SQL IN operator, permits comma-separated values
        :type ended_at__in: datetime
        :param ended_at__nin: SQL NOT IN operator, permits comma-separated values
        :type ended_at__nin: datetime
        :param ended_at__notin: SQL NOT IN operator, permits comma-separated values
        :type ended_at__notin: datetime
        :param ended_at__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type ended_at__isnull: str
        :param ended_at__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type ended_at__nisnull: str
        :param ended_at__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type ended_at__isnotnull: str
        :param ended_at__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__l: str
        :param ended_at__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__like: str
        :param ended_at__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nl: str
        :param ended_at__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nlike: str
        :param ended_at__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__notlike: str
        :param ended_at__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__il: str
        :param ended_at__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__ilike: str
        :param ended_at__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nil: str
        :param ended_at__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__nilike: str
        :param ended_at__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type ended_at__notilike: str
        :param ended_at__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type ended_at__desc: str
        :param ended_at__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type ended_at__asc: str
        :param duration__eq: SQL = operator
        :type duration__eq: int
        :param duration__ne: SQL != operator
        :type duration__ne: int
        :param duration__gt: SQL > operator, may not work with all column types
        :type duration__gt: int
        :param duration__gte: SQL >= operator, may not work with all column types
        :type duration__gte: int
        :param duration__lt: SQL < operator, may not work with all column types
        :type duration__lt: int
        :param duration__lte: SQL <= operator, may not work with all column types
        :type duration__lte: int
        :param duration__in: SQL IN operator, permits comma-separated values
        :type duration__in: int
        :param duration__nin: SQL NOT IN operator, permits comma-separated values
        :type duration__nin: int
        :param duration__notin: SQL NOT IN operator, permits comma-separated values
        :type duration__notin: int
        :param duration__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type duration__isnull: str
        :param duration__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type duration__nisnull: str
        :param duration__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type duration__isnotnull: str
        :param duration__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__l: str
        :param duration__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__like: str
        :param duration__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nl: str
        :param duration__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nlike: str
        :param duration__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__notlike: str
        :param duration__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__il: str
        :param duration__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__ilike: str
        :param duration__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nil: str
        :param duration__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__nilike: str
        :param duration__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type duration__notilike: str
        :param duration__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type duration__desc: str
        :param duration__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type duration__asc: str
        :param file_size__eq: SQL = operator
        :type file_size__eq: float
        :param file_size__ne: SQL != operator
        :type file_size__ne: float
        :param file_size__gt: SQL > operator, may not work with all column types
        :type file_size__gt: float
        :param file_size__gte: SQL >= operator, may not work with all column types
        :type file_size__gte: float
        :param file_size__lt: SQL < operator, may not work with all column types
        :type file_size__lt: float
        :param file_size__lte: SQL <= operator, may not work with all column types
        :type file_size__lte: float
        :param file_size__in: SQL IN operator, permits comma-separated values
        :type file_size__in: float
        :param file_size__nin: SQL NOT IN operator, permits comma-separated values
        :type file_size__nin: float
        :param file_size__notin: SQL NOT IN operator, permits comma-separated values
        :type file_size__notin: float
        :param file_size__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type file_size__isnull: str
        :param file_size__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_size__nisnull: str
        :param file_size__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type file_size__isnotnull: str
        :param file_size__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__l: str
        :param file_size__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__like: str
        :param file_size__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nl: str
        :param file_size__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nlike: str
        :param file_size__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__notlike: str
        :param file_size__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__il: str
        :param file_size__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__ilike: str
        :param file_size__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nil: str
        :param file_size__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__nilike: str
        :param file_size__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type file_size__notilike: str
        :param file_size__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type file_size__desc: str
        :param file_size__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type file_size__asc: str
        :param thumbnail_name__eq: SQL = operator
        :type thumbnail_name__eq: str
        :param thumbnail_name__ne: SQL != operator
        :type thumbnail_name__ne: str
        :param thumbnail_name__gt: SQL > operator, may not work with all column types
        :type thumbnail_name__gt: str
        :param thumbnail_name__gte: SQL >= operator, may not work with all column types
        :type thumbnail_name__gte: str
        :param thumbnail_name__lt: SQL < operator, may not work with all column types
        :type thumbnail_name__lt: str
        :param thumbnail_name__lte: SQL <= operator, may not work with all column types
        :type thumbnail_name__lte: str
        :param thumbnail_name__in: SQL IN operator, permits comma-separated values
        :type thumbnail_name__in: str
        :param thumbnail_name__nin: SQL NOT IN operator, permits comma-separated values
        :type thumbnail_name__nin: str
        :param thumbnail_name__notin: SQL NOT IN operator, permits comma-separated values
        :type thumbnail_name__notin: str
        :param thumbnail_name__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__isnull: str
        :param thumbnail_name__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__nisnull: str
        :param thumbnail_name__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__isnotnull: str
        :param thumbnail_name__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__l: str
        :param thumbnail_name__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__like: str
        :param thumbnail_name__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nl: str
        :param thumbnail_name__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nlike: str
        :param thumbnail_name__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__notlike: str
        :param thumbnail_name__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__il: str
        :param thumbnail_name__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__ilike: str
        :param thumbnail_name__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nil: str
        :param thumbnail_name__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__nilike: str
        :param thumbnail_name__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type thumbnail_name__notilike: str
        :param thumbnail_name__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__desc: str
        :param thumbnail_name__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type thumbnail_name__asc: str
        :param status__eq: SQL = operator
        :type status__eq: str
        :param status__ne: SQL != operator
        :type status__ne: str
        :param status__gt: SQL > operator, may not work with all column types
        :type status__gt: str
        :param status__gte: SQL >= operator, may not work with all column types
        :type status__gte: str
        :param status__lt: SQL < operator, may not work with all column types
        :type status__lt: str
        :param status__lte: SQL <= operator, may not work with all column types
        :type status__lte: str
        :param status__in: SQL IN operator, permits comma-separated values
        :type status__in: str
        :param status__nin: SQL NOT IN operator, permits comma-separated values
        :type status__nin: str
        :param status__notin: SQL NOT IN operator, permits comma-separated values
        :type status__notin: str
        :param status__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type status__isnull: str
        :param status__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type status__nisnull: str
        :param status__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type status__isnotnull: str
        :param status__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__l: str
        :param status__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__like: str
        :param status__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nl: str
        :param status__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nlike: str
        :param status__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type status__notlike: str
        :param status__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__il: str
        :param status__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__ilike: str
        :param status__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nil: str
        :param status__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__nilike: str
        :param status__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type status__notilike: str
        :param status__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type status__desc: str
        :param status__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type status__asc: str
        :param camera_id__eq: SQL = operator
        :type camera_id__eq: str
        :param camera_id__ne: SQL != operator
        :type camera_id__ne: str
        :param camera_id__gt: SQL > operator, may not work with all column types
        :type camera_id__gt: str
        :param camera_id__gte: SQL >= operator, may not work with all column types
        :type camera_id__gte: str
        :param camera_id__lt: SQL < operator, may not work with all column types
        :type camera_id__lt: str
        :param camera_id__lte: SQL <= operator, may not work with all column types
        :type camera_id__lte: str
        :param camera_id__in: SQL IN operator, permits comma-separated values
        :type camera_id__in: str
        :param camera_id__nin: SQL NOT IN operator, permits comma-separated values
        :type camera_id__nin: str
        :param camera_id__notin: SQL NOT IN operator, permits comma-separated values
        :type camera_id__notin: str
        :param camera_id__isnull: SQL IS NULL operator, value is ignored (presence of key is sufficient)
        :type camera_id__isnull: str
        :param camera_id__nisnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type camera_id__nisnull: str
        :param camera_id__isnotnull: SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
        :type camera_id__isnotnull: str
        :param camera_id__l: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__l: str
        :param camera_id__like: SQL LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__like: str
        :param camera_id__nl: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nl: str
        :param camera_id__nlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nlike: str
        :param camera_id__notlike: SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__notlike: str
        :param camera_id__il: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__il: str
        :param camera_id__ilike: SQL ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__ilike: str
        :param camera_id__nil: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nil: str
        :param camera_id__nilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__nilike: str
        :param camera_id__notilike: SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
        :type camera_id__notilike: str
        :param camera_id__desc: SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
        :type camera_id__desc: str
        :param camera_id__asc: SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
        :type camera_id__asc: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_videos_serialize(
            limit=limit,
            offset=offset,
            id__eq=id__eq,
            id__ne=id__ne,
            id__gt=id__gt,
            id__gte=id__gte,
            id__lt=id__lt,
            id__lte=id__lte,
            id__in=id__in,
            id__nin=id__nin,
            id__notin=id__notin,
            id__isnull=id__isnull,
            id__nisnull=id__nisnull,
            id__isnotnull=id__isnotnull,
            id__l=id__l,
            id__like=id__like,
            id__nl=id__nl,
            id__nlike=id__nlike,
            id__notlike=id__notlike,
            id__il=id__il,
            id__ilike=id__ilike,
            id__nil=id__nil,
            id__nilike=id__nilike,
            id__notilike=id__notilike,
            id__desc=id__desc,
            id__asc=id__asc,
            created_at__eq=created_at__eq,
            created_at__ne=created_at__ne,
            created_at__gt=created_at__gt,
            created_at__gte=created_at__gte,
            created_at__lt=created_at__lt,
            created_at__lte=created_at__lte,
            created_at__in=created_at__in,
            created_at__nin=created_at__nin,
            created_at__notin=created_at__notin,
            created_at__isnull=created_at__isnull,
            created_at__nisnull=created_at__nisnull,
            created_at__isnotnull=created_at__isnotnull,
            created_at__l=created_at__l,
            created_at__like=created_at__like,
            created_at__nl=created_at__nl,
            created_at__nlike=created_at__nlike,
            created_at__notlike=created_at__notlike,
            created_at__il=created_at__il,
            created_at__ilike=created_at__ilike,
            created_at__nil=created_at__nil,
            created_at__nilike=created_at__nilike,
            created_at__notilike=created_at__notilike,
            created_at__desc=created_at__desc,
            created_at__asc=created_at__asc,
            updated_at__eq=updated_at__eq,
            updated_at__ne=updated_at__ne,
            updated_at__gt=updated_at__gt,
            updated_at__gte=updated_at__gte,
            updated_at__lt=updated_at__lt,
            updated_at__lte=updated_at__lte,
            updated_at__in=updated_at__in,
            updated_at__nin=updated_at__nin,
            updated_at__notin=updated_at__notin,
            updated_at__isnull=updated_at__isnull,
            updated_at__nisnull=updated_at__nisnull,
            updated_at__isnotnull=updated_at__isnotnull,
            updated_at__l=updated_at__l,
            updated_at__like=updated_at__like,
            updated_at__nl=updated_at__nl,
            updated_at__nlike=updated_at__nlike,
            updated_at__notlike=updated_at__notlike,
            updated_at__il=updated_at__il,
            updated_at__ilike=updated_at__ilike,
            updated_at__nil=updated_at__nil,
            updated_at__nilike=updated_at__nilike,
            updated_at__notilike=updated_at__notilike,
            updated_at__desc=updated_at__desc,
            updated_at__asc=updated_at__asc,
            deleted_at__eq=deleted_at__eq,
            deleted_at__ne=deleted_at__ne,
            deleted_at__gt=deleted_at__gt,
            deleted_at__gte=deleted_at__gte,
            deleted_at__lt=deleted_at__lt,
            deleted_at__lte=deleted_at__lte,
            deleted_at__in=deleted_at__in,
            deleted_at__nin=deleted_at__nin,
            deleted_at__notin=deleted_at__notin,
            deleted_at__isnull=deleted_at__isnull,
            deleted_at__nisnull=deleted_at__nisnull,
            deleted_at__isnotnull=deleted_at__isnotnull,
            deleted_at__l=deleted_at__l,
            deleted_at__like=deleted_at__like,
            deleted_at__nl=deleted_at__nl,
            deleted_at__nlike=deleted_at__nlike,
            deleted_at__notlike=deleted_at__notlike,
            deleted_at__il=deleted_at__il,
            deleted_at__ilike=deleted_at__ilike,
            deleted_at__nil=deleted_at__nil,
            deleted_at__nilike=deleted_at__nilike,
            deleted_at__notilike=deleted_at__notilike,
            deleted_at__desc=deleted_at__desc,
            deleted_at__asc=deleted_at__asc,
            file_name__eq=file_name__eq,
            file_name__ne=file_name__ne,
            file_name__gt=file_name__gt,
            file_name__gte=file_name__gte,
            file_name__lt=file_name__lt,
            file_name__lte=file_name__lte,
            file_name__in=file_name__in,
            file_name__nin=file_name__nin,
            file_name__notin=file_name__notin,
            file_name__isnull=file_name__isnull,
            file_name__nisnull=file_name__nisnull,
            file_name__isnotnull=file_name__isnotnull,
            file_name__l=file_name__l,
            file_name__like=file_name__like,
            file_name__nl=file_name__nl,
            file_name__nlike=file_name__nlike,
            file_name__notlike=file_name__notlike,
            file_name__il=file_name__il,
            file_name__ilike=file_name__ilike,
            file_name__nil=file_name__nil,
            file_name__nilike=file_name__nilike,
            file_name__notilike=file_name__notilike,
            file_name__desc=file_name__desc,
            file_name__asc=file_name__asc,
            started_at__eq=started_at__eq,
            started_at__ne=started_at__ne,
            started_at__gt=started_at__gt,
            started_at__gte=started_at__gte,
            started_at__lt=started_at__lt,
            started_at__lte=started_at__lte,
            started_at__in=started_at__in,
            started_at__nin=started_at__nin,
            started_at__notin=started_at__notin,
            started_at__isnull=started_at__isnull,
            started_at__nisnull=started_at__nisnull,
            started_at__isnotnull=started_at__isnotnull,
            started_at__l=started_at__l,
            started_at__like=started_at__like,
            started_at__nl=started_at__nl,
            started_at__nlike=started_at__nlike,
            started_at__notlike=started_at__notlike,
            started_at__il=started_at__il,
            started_at__ilike=started_at__ilike,
            started_at__nil=started_at__nil,
            started_at__nilike=started_at__nilike,
            started_at__notilike=started_at__notilike,
            started_at__desc=started_at__desc,
            started_at__asc=started_at__asc,
            ended_at__eq=ended_at__eq,
            ended_at__ne=ended_at__ne,
            ended_at__gt=ended_at__gt,
            ended_at__gte=ended_at__gte,
            ended_at__lt=ended_at__lt,
            ended_at__lte=ended_at__lte,
            ended_at__in=ended_at__in,
            ended_at__nin=ended_at__nin,
            ended_at__notin=ended_at__notin,
            ended_at__isnull=ended_at__isnull,
            ended_at__nisnull=ended_at__nisnull,
            ended_at__isnotnull=ended_at__isnotnull,
            ended_at__l=ended_at__l,
            ended_at__like=ended_at__like,
            ended_at__nl=ended_at__nl,
            ended_at__nlike=ended_at__nlike,
            ended_at__notlike=ended_at__notlike,
            ended_at__il=ended_at__il,
            ended_at__ilike=ended_at__ilike,
            ended_at__nil=ended_at__nil,
            ended_at__nilike=ended_at__nilike,
            ended_at__notilike=ended_at__notilike,
            ended_at__desc=ended_at__desc,
            ended_at__asc=ended_at__asc,
            duration__eq=duration__eq,
            duration__ne=duration__ne,
            duration__gt=duration__gt,
            duration__gte=duration__gte,
            duration__lt=duration__lt,
            duration__lte=duration__lte,
            duration__in=duration__in,
            duration__nin=duration__nin,
            duration__notin=duration__notin,
            duration__isnull=duration__isnull,
            duration__nisnull=duration__nisnull,
            duration__isnotnull=duration__isnotnull,
            duration__l=duration__l,
            duration__like=duration__like,
            duration__nl=duration__nl,
            duration__nlike=duration__nlike,
            duration__notlike=duration__notlike,
            duration__il=duration__il,
            duration__ilike=duration__ilike,
            duration__nil=duration__nil,
            duration__nilike=duration__nilike,
            duration__notilike=duration__notilike,
            duration__desc=duration__desc,
            duration__asc=duration__asc,
            file_size__eq=file_size__eq,
            file_size__ne=file_size__ne,
            file_size__gt=file_size__gt,
            file_size__gte=file_size__gte,
            file_size__lt=file_size__lt,
            file_size__lte=file_size__lte,
            file_size__in=file_size__in,
            file_size__nin=file_size__nin,
            file_size__notin=file_size__notin,
            file_size__isnull=file_size__isnull,
            file_size__nisnull=file_size__nisnull,
            file_size__isnotnull=file_size__isnotnull,
            file_size__l=file_size__l,
            file_size__like=file_size__like,
            file_size__nl=file_size__nl,
            file_size__nlike=file_size__nlike,
            file_size__notlike=file_size__notlike,
            file_size__il=file_size__il,
            file_size__ilike=file_size__ilike,
            file_size__nil=file_size__nil,
            file_size__nilike=file_size__nilike,
            file_size__notilike=file_size__notilike,
            file_size__desc=file_size__desc,
            file_size__asc=file_size__asc,
            thumbnail_name__eq=thumbnail_name__eq,
            thumbnail_name__ne=thumbnail_name__ne,
            thumbnail_name__gt=thumbnail_name__gt,
            thumbnail_name__gte=thumbnail_name__gte,
            thumbnail_name__lt=thumbnail_name__lt,
            thumbnail_name__lte=thumbnail_name__lte,
            thumbnail_name__in=thumbnail_name__in,
            thumbnail_name__nin=thumbnail_name__nin,
            thumbnail_name__notin=thumbnail_name__notin,
            thumbnail_name__isnull=thumbnail_name__isnull,
            thumbnail_name__nisnull=thumbnail_name__nisnull,
            thumbnail_name__isnotnull=thumbnail_name__isnotnull,
            thumbnail_name__l=thumbnail_name__l,
            thumbnail_name__like=thumbnail_name__like,
            thumbnail_name__nl=thumbnail_name__nl,
            thumbnail_name__nlike=thumbnail_name__nlike,
            thumbnail_name__notlike=thumbnail_name__notlike,
            thumbnail_name__il=thumbnail_name__il,
            thumbnail_name__ilike=thumbnail_name__ilike,
            thumbnail_name__nil=thumbnail_name__nil,
            thumbnail_name__nilike=thumbnail_name__nilike,
            thumbnail_name__notilike=thumbnail_name__notilike,
            thumbnail_name__desc=thumbnail_name__desc,
            thumbnail_name__asc=thumbnail_name__asc,
            status__eq=status__eq,
            status__ne=status__ne,
            status__gt=status__gt,
            status__gte=status__gte,
            status__lt=status__lt,
            status__lte=status__lte,
            status__in=status__in,
            status__nin=status__nin,
            status__notin=status__notin,
            status__isnull=status__isnull,
            status__nisnull=status__nisnull,
            status__isnotnull=status__isnotnull,
            status__l=status__l,
            status__like=status__like,
            status__nl=status__nl,
            status__nlike=status__nlike,
            status__notlike=status__notlike,
            status__il=status__il,
            status__ilike=status__ilike,
            status__nil=status__nil,
            status__nilike=status__nilike,
            status__notilike=status__notilike,
            status__desc=status__desc,
            status__asc=status__asc,
            camera_id__eq=camera_id__eq,
            camera_id__ne=camera_id__ne,
            camera_id__gt=camera_id__gt,
            camera_id__gte=camera_id__gte,
            camera_id__lt=camera_id__lt,
            camera_id__lte=camera_id__lte,
            camera_id__in=camera_id__in,
            camera_id__nin=camera_id__nin,
            camera_id__notin=camera_id__notin,
            camera_id__isnull=camera_id__isnull,
            camera_id__nisnull=camera_id__nisnull,
            camera_id__isnotnull=camera_id__isnotnull,
            camera_id__l=camera_id__l,
            camera_id__like=camera_id__like,
            camera_id__nl=camera_id__nl,
            camera_id__nlike=camera_id__nlike,
            camera_id__notlike=camera_id__notlike,
            camera_id__il=camera_id__il,
            camera_id__ilike=camera_id__ilike,
            camera_id__nil=camera_id__nil,
            camera_id__nilike=camera_id__nilike,
            camera_id__notilike=camera_id__notilike,
            camera_id__desc=camera_id__desc,
            camera_id__asc=camera_id__asc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_videos_serialize(
        self,
        limit,
        offset,
        id__eq,
        id__ne,
        id__gt,
        id__gte,
        id__lt,
        id__lte,
        id__in,
        id__nin,
        id__notin,
        id__isnull,
        id__nisnull,
        id__isnotnull,
        id__l,
        id__like,
        id__nl,
        id__nlike,
        id__notlike,
        id__il,
        id__ilike,
        id__nil,
        id__nilike,
        id__notilike,
        id__desc,
        id__asc,
        created_at__eq,
        created_at__ne,
        created_at__gt,
        created_at__gte,
        created_at__lt,
        created_at__lte,
        created_at__in,
        created_at__nin,
        created_at__notin,
        created_at__isnull,
        created_at__nisnull,
        created_at__isnotnull,
        created_at__l,
        created_at__like,
        created_at__nl,
        created_at__nlike,
        created_at__notlike,
        created_at__il,
        created_at__ilike,
        created_at__nil,
        created_at__nilike,
        created_at__notilike,
        created_at__desc,
        created_at__asc,
        updated_at__eq,
        updated_at__ne,
        updated_at__gt,
        updated_at__gte,
        updated_at__lt,
        updated_at__lte,
        updated_at__in,
        updated_at__nin,
        updated_at__notin,
        updated_at__isnull,
        updated_at__nisnull,
        updated_at__isnotnull,
        updated_at__l,
        updated_at__like,
        updated_at__nl,
        updated_at__nlike,
        updated_at__notlike,
        updated_at__il,
        updated_at__ilike,
        updated_at__nil,
        updated_at__nilike,
        updated_at__notilike,
        updated_at__desc,
        updated_at__asc,
        deleted_at__eq,
        deleted_at__ne,
        deleted_at__gt,
        deleted_at__gte,
        deleted_at__lt,
        deleted_at__lte,
        deleted_at__in,
        deleted_at__nin,
        deleted_at__notin,
        deleted_at__isnull,
        deleted_at__nisnull,
        deleted_at__isnotnull,
        deleted_at__l,
        deleted_at__like,
        deleted_at__nl,
        deleted_at__nlike,
        deleted_at__notlike,
        deleted_at__il,
        deleted_at__ilike,
        deleted_at__nil,
        deleted_at__nilike,
        deleted_at__notilike,
        deleted_at__desc,
        deleted_at__asc,
        file_name__eq,
        file_name__ne,
        file_name__gt,
        file_name__gte,
        file_name__lt,
        file_name__lte,
        file_name__in,
        file_name__nin,
        file_name__notin,
        file_name__isnull,
        file_name__nisnull,
        file_name__isnotnull,
        file_name__l,
        file_name__like,
        file_name__nl,
        file_name__nlike,
        file_name__notlike,
        file_name__il,
        file_name__ilike,
        file_name__nil,
        file_name__nilike,
        file_name__notilike,
        file_name__desc,
        file_name__asc,
        started_at__eq,
        started_at__ne,
        started_at__gt,
        started_at__gte,
        started_at__lt,
        started_at__lte,
        started_at__in,
        started_at__nin,
        started_at__notin,
        started_at__isnull,
        started_at__nisnull,
        started_at__isnotnull,
        started_at__l,
        started_at__like,
        started_at__nl,
        started_at__nlike,
        started_at__notlike,
        started_at__il,
        started_at__ilike,
        started_at__nil,
        started_at__nilike,
        started_at__notilike,
        started_at__desc,
        started_at__asc,
        ended_at__eq,
        ended_at__ne,
        ended_at__gt,
        ended_at__gte,
        ended_at__lt,
        ended_at__lte,
        ended_at__in,
        ended_at__nin,
        ended_at__notin,
        ended_at__isnull,
        ended_at__nisnull,
        ended_at__isnotnull,
        ended_at__l,
        ended_at__like,
        ended_at__nl,
        ended_at__nlike,
        ended_at__notlike,
        ended_at__il,
        ended_at__ilike,
        ended_at__nil,
        ended_at__nilike,
        ended_at__notilike,
        ended_at__desc,
        ended_at__asc,
        duration__eq,
        duration__ne,
        duration__gt,
        duration__gte,
        duration__lt,
        duration__lte,
        duration__in,
        duration__nin,
        duration__notin,
        duration__isnull,
        duration__nisnull,
        duration__isnotnull,
        duration__l,
        duration__like,
        duration__nl,
        duration__nlike,
        duration__notlike,
        duration__il,
        duration__ilike,
        duration__nil,
        duration__nilike,
        duration__notilike,
        duration__desc,
        duration__asc,
        file_size__eq,
        file_size__ne,
        file_size__gt,
        file_size__gte,
        file_size__lt,
        file_size__lte,
        file_size__in,
        file_size__nin,
        file_size__notin,
        file_size__isnull,
        file_size__nisnull,
        file_size__isnotnull,
        file_size__l,
        file_size__like,
        file_size__nl,
        file_size__nlike,
        file_size__notlike,
        file_size__il,
        file_size__ilike,
        file_size__nil,
        file_size__nilike,
        file_size__notilike,
        file_size__desc,
        file_size__asc,
        thumbnail_name__eq,
        thumbnail_name__ne,
        thumbnail_name__gt,
        thumbnail_name__gte,
        thumbnail_name__lt,
        thumbnail_name__lte,
        thumbnail_name__in,
        thumbnail_name__nin,
        thumbnail_name__notin,
        thumbnail_name__isnull,
        thumbnail_name__nisnull,
        thumbnail_name__isnotnull,
        thumbnail_name__l,
        thumbnail_name__like,
        thumbnail_name__nl,
        thumbnail_name__nlike,
        thumbnail_name__notlike,
        thumbnail_name__il,
        thumbnail_name__ilike,
        thumbnail_name__nil,
        thumbnail_name__nilike,
        thumbnail_name__notilike,
        thumbnail_name__desc,
        thumbnail_name__asc,
        status__eq,
        status__ne,
        status__gt,
        status__gte,
        status__lt,
        status__lte,
        status__in,
        status__nin,
        status__notin,
        status__isnull,
        status__nisnull,
        status__isnotnull,
        status__l,
        status__like,
        status__nl,
        status__nlike,
        status__notlike,
        status__il,
        status__ilike,
        status__nil,
        status__nilike,
        status__notilike,
        status__desc,
        status__asc,
        camera_id__eq,
        camera_id__ne,
        camera_id__gt,
        camera_id__gte,
        camera_id__lt,
        camera_id__lte,
        camera_id__in,
        camera_id__nin,
        camera_id__notin,
        camera_id__isnull,
        camera_id__nisnull,
        camera_id__isnotnull,
        camera_id__l,
        camera_id__like,
        camera_id__nl,
        camera_id__nlike,
        camera_id__notlike,
        camera_id__il,
        camera_id__ilike,
        camera_id__nil,
        camera_id__nilike,
        camera_id__notilike,
        camera_id__desc,
        camera_id__asc,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if id__eq is not None:
            
            _query_params.append(('id__eq', id__eq))
            
        if id__ne is not None:
            
            _query_params.append(('id__ne', id__ne))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__in is not None:
            
            _query_params.append(('id__in', id__in))
            
        if id__nin is not None:
            
            _query_params.append(('id__nin', id__nin))
            
        if id__notin is not None:
            
            _query_params.append(('id__notin', id__notin))
            
        if id__isnull is not None:
            
            _query_params.append(('id__isnull', id__isnull))
            
        if id__nisnull is not None:
            
            _query_params.append(('id__nisnull', id__nisnull))
            
        if id__isnotnull is not None:
            
            _query_params.append(('id__isnotnull', id__isnotnull))
            
        if id__l is not None:
            
            _query_params.append(('id__l', id__l))
            
        if id__like is not None:
            
            _query_params.append(('id__like', id__like))
            
        if id__nl is not None:
            
            _query_params.append(('id__nl', id__nl))
            
        if id__nlike is not None:
            
            _query_params.append(('id__nlike', id__nlike))
            
        if id__notlike is not None:
            
            _query_params.append(('id__notlike', id__notlike))
            
        if id__il is not None:
            
            _query_params.append(('id__il', id__il))
            
        if id__ilike is not None:
            
            _query_params.append(('id__ilike', id__ilike))
            
        if id__nil is not None:
            
            _query_params.append(('id__nil', id__nil))
            
        if id__nilike is not None:
            
            _query_params.append(('id__nilike', id__nilike))
            
        if id__notilike is not None:
            
            _query_params.append(('id__notilike', id__notilike))
            
        if id__desc is not None:
            
            _query_params.append(('id__desc', id__desc))
            
        if id__asc is not None:
            
            _query_params.append(('id__asc', id__asc))
            
        if created_at__eq is not None:
            if isinstance(created_at__eq, datetime):
                _query_params.append(
                    (
                        'created_at__eq',
                        created_at__eq.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at__eq', created_at__eq))
            
        if created_at__ne is not None:
            if isinstance(created_at__ne, datetime):
                _query_params.append(
                    (
                        'created_at__ne',
                        created_at__ne.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at__ne', created_at__ne))
            
        if created_at__gt is not None:
            if isinstance(created_at__gt, datetime):
                _query_params.append(
                    (
                        'created_at__gt',
                        created_at__gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at__gt', created_at__gt))
            
        if created_at__gte is not None:
            if isinstance(created_at__gte, datetime):
                _query_params.append(
                    (
                        'created_at__gte',
                        created_at__gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at__gte', created_at__gte))
            
        if created_at__lt is not None:
            if isinstance(created_at__lt, datetime):
                _query_params.append(
                    (
                        'created_at__lt',
                        created_at__lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at__lt', created_at__lt))
            
        if created_at__lte is not None:
            if isinstance(created_at__lte, datetime):
                _query_params.append(
                    (
                        'created_at__lte',
                        created_at__lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at__lte', created_at__lte))
            
        if created_at__in is not None:
            if isinstance(created_at__in, datetime):
                _query_params.append(
                    (
                        'created_at__in',
                        created_at__in.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at__in', created_at__in))
            
        if created_at__nin is not None:
            if isinstance(created_at__nin, datetime):
                _query_params.append(
                    (
                        'created_at__nin',
                        created_at__nin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at__nin', created_at__nin))
            
        if created_at__notin is not None:
            if isinstance(created_at__notin, datetime):
                _query_params.append(
                    (
                        'created_at__notin',
                        created_at__notin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at__notin', created_at__notin))
            
        if created_at__isnull is not None:
            
            _query_params.append(('created_at__isnull', created_at__isnull))
            
        if created_at__nisnull is not None:
            
            _query_params.append(('created_at__nisnull', created_at__nisnull))
            
        if created_at__isnotnull is not None:
            
            _query_params.append(('created_at__isnotnull', created_at__isnotnull))
            
        if created_at__l is not None:
            
            _query_params.append(('created_at__l', created_at__l))
            
        if created_at__like is not None:
            
            _query_params.append(('created_at__like', created_at__like))
            
        if created_at__nl is not None:
            
            _query_params.append(('created_at__nl', created_at__nl))
            
        if created_at__nlike is not None:
            
            _query_params.append(('created_at__nlike', created_at__nlike))
            
        if created_at__notlike is not None:
            
            _query_params.append(('created_at__notlike', created_at__notlike))
            
        if created_at__il is not None:
            
            _query_params.append(('created_at__il', created_at__il))
            
        if created_at__ilike is not None:
            
            _query_params.append(('created_at__ilike', created_at__ilike))
            
        if created_at__nil is not None:
            
            _query_params.append(('created_at__nil', created_at__nil))
            
        if created_at__nilike is not None:
            
            _query_params.append(('created_at__nilike', created_at__nilike))
            
        if created_at__notilike is not None:
            
            _query_params.append(('created_at__notilike', created_at__notilike))
            
        if created_at__desc is not None:
            
            _query_params.append(('created_at__desc', created_at__desc))
            
        if created_at__asc is not None:
            
            _query_params.append(('created_at__asc', created_at__asc))
            
        if updated_at__eq is not None:
            if isinstance(updated_at__eq, datetime):
                _query_params.append(
                    (
                        'updated_at__eq',
                        updated_at__eq.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at__eq', updated_at__eq))
            
        if updated_at__ne is not None:
            if isinstance(updated_at__ne, datetime):
                _query_params.append(
                    (
                        'updated_at__ne',
                        updated_at__ne.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at__ne', updated_at__ne))
            
        if updated_at__gt is not None:
            if isinstance(updated_at__gt, datetime):
                _query_params.append(
                    (
                        'updated_at__gt',
                        updated_at__gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at__gt', updated_at__gt))
            
        if updated_at__gte is not None:
            if isinstance(updated_at__gte, datetime):
                _query_params.append(
                    (
                        'updated_at__gte',
                        updated_at__gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at__gte', updated_at__gte))
            
        if updated_at__lt is not None:
            if isinstance(updated_at__lt, datetime):
                _query_params.append(
                    (
                        'updated_at__lt',
                        updated_at__lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at__lt', updated_at__lt))
            
        if updated_at__lte is not None:
            if isinstance(updated_at__lte, datetime):
                _query_params.append(
                    (
                        'updated_at__lte',
                        updated_at__lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at__lte', updated_at__lte))
            
        if updated_at__in is not None:
            if isinstance(updated_at__in, datetime):
                _query_params.append(
                    (
                        'updated_at__in',
                        updated_at__in.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at__in', updated_at__in))
            
        if updated_at__nin is not None:
            if isinstance(updated_at__nin, datetime):
                _query_params.append(
                    (
                        'updated_at__nin',
                        updated_at__nin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at__nin', updated_at__nin))
            
        if updated_at__notin is not None:
            if isinstance(updated_at__notin, datetime):
                _query_params.append(
                    (
                        'updated_at__notin',
                        updated_at__notin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at__notin', updated_at__notin))
            
        if updated_at__isnull is not None:
            
            _query_params.append(('updated_at__isnull', updated_at__isnull))
            
        if updated_at__nisnull is not None:
            
            _query_params.append(('updated_at__nisnull', updated_at__nisnull))
            
        if updated_at__isnotnull is not None:
            
            _query_params.append(('updated_at__isnotnull', updated_at__isnotnull))
            
        if updated_at__l is not None:
            
            _query_params.append(('updated_at__l', updated_at__l))
            
        if updated_at__like is not None:
            
            _query_params.append(('updated_at__like', updated_at__like))
            
        if updated_at__nl is not None:
            
            _query_params.append(('updated_at__nl', updated_at__nl))
            
        if updated_at__nlike is not None:
            
            _query_params.append(('updated_at__nlike', updated_at__nlike))
            
        if updated_at__notlike is not None:
            
            _query_params.append(('updated_at__notlike', updated_at__notlike))
            
        if updated_at__il is not None:
            
            _query_params.append(('updated_at__il', updated_at__il))
            
        if updated_at__ilike is not None:
            
            _query_params.append(('updated_at__ilike', updated_at__ilike))
            
        if updated_at__nil is not None:
            
            _query_params.append(('updated_at__nil', updated_at__nil))
            
        if updated_at__nilike is not None:
            
            _query_params.append(('updated_at__nilike', updated_at__nilike))
            
        if updated_at__notilike is not None:
            
            _query_params.append(('updated_at__notilike', updated_at__notilike))
            
        if updated_at__desc is not None:
            
            _query_params.append(('updated_at__desc', updated_at__desc))
            
        if updated_at__asc is not None:
            
            _query_params.append(('updated_at__asc', updated_at__asc))
            
        if deleted_at__eq is not None:
            if isinstance(deleted_at__eq, datetime):
                _query_params.append(
                    (
                        'deleted_at__eq',
                        deleted_at__eq.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleted_at__eq', deleted_at__eq))
            
        if deleted_at__ne is not None:
            if isinstance(deleted_at__ne, datetime):
                _query_params.append(
                    (
                        'deleted_at__ne',
                        deleted_at__ne.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleted_at__ne', deleted_at__ne))
            
        if deleted_at__gt is not None:
            if isinstance(deleted_at__gt, datetime):
                _query_params.append(
                    (
                        'deleted_at__gt',
                        deleted_at__gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleted_at__gt', deleted_at__gt))
            
        if deleted_at__gte is not None:
            if isinstance(deleted_at__gte, datetime):
                _query_params.append(
                    (
                        'deleted_at__gte',
                        deleted_at__gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleted_at__gte', deleted_at__gte))
            
        if deleted_at__lt is not None:
            if isinstance(deleted_at__lt, datetime):
                _query_params.append(
                    (
                        'deleted_at__lt',
                        deleted_at__lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleted_at__lt', deleted_at__lt))
            
        if deleted_at__lte is not None:
            if isinstance(deleted_at__lte, datetime):
                _query_params.append(
                    (
                        'deleted_at__lte',
                        deleted_at__lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleted_at__lte', deleted_at__lte))
            
        if deleted_at__in is not None:
            if isinstance(deleted_at__in, datetime):
                _query_params.append(
                    (
                        'deleted_at__in',
                        deleted_at__in.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleted_at__in', deleted_at__in))
            
        if deleted_at__nin is not None:
            if isinstance(deleted_at__nin, datetime):
                _query_params.append(
                    (
                        'deleted_at__nin',
                        deleted_at__nin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleted_at__nin', deleted_at__nin))
            
        if deleted_at__notin is not None:
            if isinstance(deleted_at__notin, datetime):
                _query_params.append(
                    (
                        'deleted_at__notin',
                        deleted_at__notin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleted_at__notin', deleted_at__notin))
            
        if deleted_at__isnull is not None:
            
            _query_params.append(('deleted_at__isnull', deleted_at__isnull))
            
        if deleted_at__nisnull is not None:
            
            _query_params.append(('deleted_at__nisnull', deleted_at__nisnull))
            
        if deleted_at__isnotnull is not None:
            
            _query_params.append(('deleted_at__isnotnull', deleted_at__isnotnull))
            
        if deleted_at__l is not None:
            
            _query_params.append(('deleted_at__l', deleted_at__l))
            
        if deleted_at__like is not None:
            
            _query_params.append(('deleted_at__like', deleted_at__like))
            
        if deleted_at__nl is not None:
            
            _query_params.append(('deleted_at__nl', deleted_at__nl))
            
        if deleted_at__nlike is not None:
            
            _query_params.append(('deleted_at__nlike', deleted_at__nlike))
            
        if deleted_at__notlike is not None:
            
            _query_params.append(('deleted_at__notlike', deleted_at__notlike))
            
        if deleted_at__il is not None:
            
            _query_params.append(('deleted_at__il', deleted_at__il))
            
        if deleted_at__ilike is not None:
            
            _query_params.append(('deleted_at__ilike', deleted_at__ilike))
            
        if deleted_at__nil is not None:
            
            _query_params.append(('deleted_at__nil', deleted_at__nil))
            
        if deleted_at__nilike is not None:
            
            _query_params.append(('deleted_at__nilike', deleted_at__nilike))
            
        if deleted_at__notilike is not None:
            
            _query_params.append(('deleted_at__notilike', deleted_at__notilike))
            
        if deleted_at__desc is not None:
            
            _query_params.append(('deleted_at__desc', deleted_at__desc))
            
        if deleted_at__asc is not None:
            
            _query_params.append(('deleted_at__asc', deleted_at__asc))
            
        if file_name__eq is not None:
            
            _query_params.append(('file_name__eq', file_name__eq))
            
        if file_name__ne is not None:
            
            _query_params.append(('file_name__ne', file_name__ne))
            
        if file_name__gt is not None:
            
            _query_params.append(('file_name__gt', file_name__gt))
            
        if file_name__gte is not None:
            
            _query_params.append(('file_name__gte', file_name__gte))
            
        if file_name__lt is not None:
            
            _query_params.append(('file_name__lt', file_name__lt))
            
        if file_name__lte is not None:
            
            _query_params.append(('file_name__lte', file_name__lte))
            
        if file_name__in is not None:
            
            _query_params.append(('file_name__in', file_name__in))
            
        if file_name__nin is not None:
            
            _query_params.append(('file_name__nin', file_name__nin))
            
        if file_name__notin is not None:
            
            _query_params.append(('file_name__notin', file_name__notin))
            
        if file_name__isnull is not None:
            
            _query_params.append(('file_name__isnull', file_name__isnull))
            
        if file_name__nisnull is not None:
            
            _query_params.append(('file_name__nisnull', file_name__nisnull))
            
        if file_name__isnotnull is not None:
            
            _query_params.append(('file_name__isnotnull', file_name__isnotnull))
            
        if file_name__l is not None:
            
            _query_params.append(('file_name__l', file_name__l))
            
        if file_name__like is not None:
            
            _query_params.append(('file_name__like', file_name__like))
            
        if file_name__nl is not None:
            
            _query_params.append(('file_name__nl', file_name__nl))
            
        if file_name__nlike is not None:
            
            _query_params.append(('file_name__nlike', file_name__nlike))
            
        if file_name__notlike is not None:
            
            _query_params.append(('file_name__notlike', file_name__notlike))
            
        if file_name__il is not None:
            
            _query_params.append(('file_name__il', file_name__il))
            
        if file_name__ilike is not None:
            
            _query_params.append(('file_name__ilike', file_name__ilike))
            
        if file_name__nil is not None:
            
            _query_params.append(('file_name__nil', file_name__nil))
            
        if file_name__nilike is not None:
            
            _query_params.append(('file_name__nilike', file_name__nilike))
            
        if file_name__notilike is not None:
            
            _query_params.append(('file_name__notilike', file_name__notilike))
            
        if file_name__desc is not None:
            
            _query_params.append(('file_name__desc', file_name__desc))
            
        if file_name__asc is not None:
            
            _query_params.append(('file_name__asc', file_name__asc))
            
        if started_at__eq is not None:
            if isinstance(started_at__eq, datetime):
                _query_params.append(
                    (
                        'started_at__eq',
                        started_at__eq.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('started_at__eq', started_at__eq))
            
        if started_at__ne is not None:
            if isinstance(started_at__ne, datetime):
                _query_params.append(
                    (
                        'started_at__ne',
                        started_at__ne.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('started_at__ne', started_at__ne))
            
        if started_at__gt is not None:
            if isinstance(started_at__gt, datetime):
                _query_params.append(
                    (
                        'started_at__gt',
                        started_at__gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('started_at__gt', started_at__gt))
            
        if started_at__gte is not None:
            if isinstance(started_at__gte, datetime):
                _query_params.append(
                    (
                        'started_at__gte',
                        started_at__gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('started_at__gte', started_at__gte))
            
        if started_at__lt is not None:
            if isinstance(started_at__lt, datetime):
                _query_params.append(
                    (
                        'started_at__lt',
                        started_at__lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('started_at__lt', started_at__lt))
            
        if started_at__lte is not None:
            if isinstance(started_at__lte, datetime):
                _query_params.append(
                    (
                        'started_at__lte',
                        started_at__lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('started_at__lte', started_at__lte))
            
        if started_at__in is not None:
            if isinstance(started_at__in, datetime):
                _query_params.append(
                    (
                        'started_at__in',
                        started_at__in.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('started_at__in', started_at__in))
            
        if started_at__nin is not None:
            if isinstance(started_at__nin, datetime):
                _query_params.append(
                    (
                        'started_at__nin',
                        started_at__nin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('started_at__nin', started_at__nin))
            
        if started_at__notin is not None:
            if isinstance(started_at__notin, datetime):
                _query_params.append(
                    (
                        'started_at__notin',
                        started_at__notin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('started_at__notin', started_at__notin))
            
        if started_at__isnull is not None:
            
            _query_params.append(('started_at__isnull', started_at__isnull))
            
        if started_at__nisnull is not None:
            
            _query_params.append(('started_at__nisnull', started_at__nisnull))
            
        if started_at__isnotnull is not None:
            
            _query_params.append(('started_at__isnotnull', started_at__isnotnull))
            
        if started_at__l is not None:
            
            _query_params.append(('started_at__l', started_at__l))
            
        if started_at__like is not None:
            
            _query_params.append(('started_at__like', started_at__like))
            
        if started_at__nl is not None:
            
            _query_params.append(('started_at__nl', started_at__nl))
            
        if started_at__nlike is not None:
            
            _query_params.append(('started_at__nlike', started_at__nlike))
            
        if started_at__notlike is not None:
            
            _query_params.append(('started_at__notlike', started_at__notlike))
            
        if started_at__il is not None:
            
            _query_params.append(('started_at__il', started_at__il))
            
        if started_at__ilike is not None:
            
            _query_params.append(('started_at__ilike', started_at__ilike))
            
        if started_at__nil is not None:
            
            _query_params.append(('started_at__nil', started_at__nil))
            
        if started_at__nilike is not None:
            
            _query_params.append(('started_at__nilike', started_at__nilike))
            
        if started_at__notilike is not None:
            
            _query_params.append(('started_at__notilike', started_at__notilike))
            
        if started_at__desc is not None:
            
            _query_params.append(('started_at__desc', started_at__desc))
            
        if started_at__asc is not None:
            
            _query_params.append(('started_at__asc', started_at__asc))
            
        if ended_at__eq is not None:
            if isinstance(ended_at__eq, datetime):
                _query_params.append(
                    (
                        'ended_at__eq',
                        ended_at__eq.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ended_at__eq', ended_at__eq))
            
        if ended_at__ne is not None:
            if isinstance(ended_at__ne, datetime):
                _query_params.append(
                    (
                        'ended_at__ne',
                        ended_at__ne.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ended_at__ne', ended_at__ne))
            
        if ended_at__gt is not None:
            if isinstance(ended_at__gt, datetime):
                _query_params.append(
                    (
                        'ended_at__gt',
                        ended_at__gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ended_at__gt', ended_at__gt))
            
        if ended_at__gte is not None:
            if isinstance(ended_at__gte, datetime):
                _query_params.append(
                    (
                        'ended_at__gte',
                        ended_at__gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ended_at__gte', ended_at__gte))
            
        if ended_at__lt is not None:
            if isinstance(ended_at__lt, datetime):
                _query_params.append(
                    (
                        'ended_at__lt',
                        ended_at__lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ended_at__lt', ended_at__lt))
            
        if ended_at__lte is not None:
            if isinstance(ended_at__lte, datetime):
                _query_params.append(
                    (
                        'ended_at__lte',
                        ended_at__lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ended_at__lte', ended_at__lte))
            
        if ended_at__in is not None:
            if isinstance(ended_at__in, datetime):
                _query_params.append(
                    (
                        'ended_at__in',
                        ended_at__in.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ended_at__in', ended_at__in))
            
        if ended_at__nin is not None:
            if isinstance(ended_at__nin, datetime):
                _query_params.append(
                    (
                        'ended_at__nin',
                        ended_at__nin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ended_at__nin', ended_at__nin))
            
        if ended_at__notin is not None:
            if isinstance(ended_at__notin, datetime):
                _query_params.append(
                    (
                        'ended_at__notin',
                        ended_at__notin.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ended_at__notin', ended_at__notin))
            
        if ended_at__isnull is not None:
            
            _query_params.append(('ended_at__isnull', ended_at__isnull))
            
        if ended_at__nisnull is not None:
            
            _query_params.append(('ended_at__nisnull', ended_at__nisnull))
            
        if ended_at__isnotnull is not None:
            
            _query_params.append(('ended_at__isnotnull', ended_at__isnotnull))
            
        if ended_at__l is not None:
            
            _query_params.append(('ended_at__l', ended_at__l))
            
        if ended_at__like is not None:
            
            _query_params.append(('ended_at__like', ended_at__like))
            
        if ended_at__nl is not None:
            
            _query_params.append(('ended_at__nl', ended_at__nl))
            
        if ended_at__nlike is not None:
            
            _query_params.append(('ended_at__nlike', ended_at__nlike))
            
        if ended_at__notlike is not None:
            
            _query_params.append(('ended_at__notlike', ended_at__notlike))
            
        if ended_at__il is not None:
            
            _query_params.append(('ended_at__il', ended_at__il))
            
        if ended_at__ilike is not None:
            
            _query_params.append(('ended_at__ilike', ended_at__ilike))
            
        if ended_at__nil is not None:
            
            _query_params.append(('ended_at__nil', ended_at__nil))
            
        if ended_at__nilike is not None:
            
            _query_params.append(('ended_at__nilike', ended_at__nilike))
            
        if ended_at__notilike is not None:
            
            _query_params.append(('ended_at__notilike', ended_at__notilike))
            
        if ended_at__desc is not None:
            
            _query_params.append(('ended_at__desc', ended_at__desc))
            
        if ended_at__asc is not None:
            
            _query_params.append(('ended_at__asc', ended_at__asc))
            
        if duration__eq is not None:
            
            _query_params.append(('duration__eq', duration__eq))
            
        if duration__ne is not None:
            
            _query_params.append(('duration__ne', duration__ne))
            
        if duration__gt is not None:
            
            _query_params.append(('duration__gt', duration__gt))
            
        if duration__gte is not None:
            
            _query_params.append(('duration__gte', duration__gte))
            
        if duration__lt is not None:
            
            _query_params.append(('duration__lt', duration__lt))
            
        if duration__lte is not None:
            
            _query_params.append(('duration__lte', duration__lte))
            
        if duration__in is not None:
            
            _query_params.append(('duration__in', duration__in))
            
        if duration__nin is not None:
            
            _query_params.append(('duration__nin', duration__nin))
            
        if duration__notin is not None:
            
            _query_params.append(('duration__notin', duration__notin))
            
        if duration__isnull is not None:
            
            _query_params.append(('duration__isnull', duration__isnull))
            
        if duration__nisnull is not None:
            
            _query_params.append(('duration__nisnull', duration__nisnull))
            
        if duration__isnotnull is not None:
            
            _query_params.append(('duration__isnotnull', duration__isnotnull))
            
        if duration__l is not None:
            
            _query_params.append(('duration__l', duration__l))
            
        if duration__like is not None:
            
            _query_params.append(('duration__like', duration__like))
            
        if duration__nl is not None:
            
            _query_params.append(('duration__nl', duration__nl))
            
        if duration__nlike is not None:
            
            _query_params.append(('duration__nlike', duration__nlike))
            
        if duration__notlike is not None:
            
            _query_params.append(('duration__notlike', duration__notlike))
            
        if duration__il is not None:
            
            _query_params.append(('duration__il', duration__il))
            
        if duration__ilike is not None:
            
            _query_params.append(('duration__ilike', duration__ilike))
            
        if duration__nil is not None:
            
            _query_params.append(('duration__nil', duration__nil))
            
        if duration__nilike is not None:
            
            _query_params.append(('duration__nilike', duration__nilike))
            
        if duration__notilike is not None:
            
            _query_params.append(('duration__notilike', duration__notilike))
            
        if duration__desc is not None:
            
            _query_params.append(('duration__desc', duration__desc))
            
        if duration__asc is not None:
            
            _query_params.append(('duration__asc', duration__asc))
            
        if file_size__eq is not None:
            
            _query_params.append(('file_size__eq', file_size__eq))
            
        if file_size__ne is not None:
            
            _query_params.append(('file_size__ne', file_size__ne))
            
        if file_size__gt is not None:
            
            _query_params.append(('file_size__gt', file_size__gt))
            
        if file_size__gte is not None:
            
            _query_params.append(('file_size__gte', file_size__gte))
            
        if file_size__lt is not None:
            
            _query_params.append(('file_size__lt', file_size__lt))
            
        if file_size__lte is not None:
            
            _query_params.append(('file_size__lte', file_size__lte))
            
        if file_size__in is not None:
            
            _query_params.append(('file_size__in', file_size__in))
            
        if file_size__nin is not None:
            
            _query_params.append(('file_size__nin', file_size__nin))
            
        if file_size__notin is not None:
            
            _query_params.append(('file_size__notin', file_size__notin))
            
        if file_size__isnull is not None:
            
            _query_params.append(('file_size__isnull', file_size__isnull))
            
        if file_size__nisnull is not None:
            
            _query_params.append(('file_size__nisnull', file_size__nisnull))
            
        if file_size__isnotnull is not None:
            
            _query_params.append(('file_size__isnotnull', file_size__isnotnull))
            
        if file_size__l is not None:
            
            _query_params.append(('file_size__l', file_size__l))
            
        if file_size__like is not None:
            
            _query_params.append(('file_size__like', file_size__like))
            
        if file_size__nl is not None:
            
            _query_params.append(('file_size__nl', file_size__nl))
            
        if file_size__nlike is not None:
            
            _query_params.append(('file_size__nlike', file_size__nlike))
            
        if file_size__notlike is not None:
            
            _query_params.append(('file_size__notlike', file_size__notlike))
            
        if file_size__il is not None:
            
            _query_params.append(('file_size__il', file_size__il))
            
        if file_size__ilike is not None:
            
            _query_params.append(('file_size__ilike', file_size__ilike))
            
        if file_size__nil is not None:
            
            _query_params.append(('file_size__nil', file_size__nil))
            
        if file_size__nilike is not None:
            
            _query_params.append(('file_size__nilike', file_size__nilike))
            
        if file_size__notilike is not None:
            
            _query_params.append(('file_size__notilike', file_size__notilike))
            
        if file_size__desc is not None:
            
            _query_params.append(('file_size__desc', file_size__desc))
            
        if file_size__asc is not None:
            
            _query_params.append(('file_size__asc', file_size__asc))
            
        if thumbnail_name__eq is not None:
            
            _query_params.append(('thumbnail_name__eq', thumbnail_name__eq))
            
        if thumbnail_name__ne is not None:
            
            _query_params.append(('thumbnail_name__ne', thumbnail_name__ne))
            
        if thumbnail_name__gt is not None:
            
            _query_params.append(('thumbnail_name__gt', thumbnail_name__gt))
            
        if thumbnail_name__gte is not None:
            
            _query_params.append(('thumbnail_name__gte', thumbnail_name__gte))
            
        if thumbnail_name__lt is not None:
            
            _query_params.append(('thumbnail_name__lt', thumbnail_name__lt))
            
        if thumbnail_name__lte is not None:
            
            _query_params.append(('thumbnail_name__lte', thumbnail_name__lte))
            
        if thumbnail_name__in is not None:
            
            _query_params.append(('thumbnail_name__in', thumbnail_name__in))
            
        if thumbnail_name__nin is not None:
            
            _query_params.append(('thumbnail_name__nin', thumbnail_name__nin))
            
        if thumbnail_name__notin is not None:
            
            _query_params.append(('thumbnail_name__notin', thumbnail_name__notin))
            
        if thumbnail_name__isnull is not None:
            
            _query_params.append(('thumbnail_name__isnull', thumbnail_name__isnull))
            
        if thumbnail_name__nisnull is not None:
            
            _query_params.append(('thumbnail_name__nisnull', thumbnail_name__nisnull))
            
        if thumbnail_name__isnotnull is not None:
            
            _query_params.append(('thumbnail_name__isnotnull', thumbnail_name__isnotnull))
            
        if thumbnail_name__l is not None:
            
            _query_params.append(('thumbnail_name__l', thumbnail_name__l))
            
        if thumbnail_name__like is not None:
            
            _query_params.append(('thumbnail_name__like', thumbnail_name__like))
            
        if thumbnail_name__nl is not None:
            
            _query_params.append(('thumbnail_name__nl', thumbnail_name__nl))
            
        if thumbnail_name__nlike is not None:
            
            _query_params.append(('thumbnail_name__nlike', thumbnail_name__nlike))
            
        if thumbnail_name__notlike is not None:
            
            _query_params.append(('thumbnail_name__notlike', thumbnail_name__notlike))
            
        if thumbnail_name__il is not None:
            
            _query_params.append(('thumbnail_name__il', thumbnail_name__il))
            
        if thumbnail_name__ilike is not None:
            
            _query_params.append(('thumbnail_name__ilike', thumbnail_name__ilike))
            
        if thumbnail_name__nil is not None:
            
            _query_params.append(('thumbnail_name__nil', thumbnail_name__nil))
            
        if thumbnail_name__nilike is not None:
            
            _query_params.append(('thumbnail_name__nilike', thumbnail_name__nilike))
            
        if thumbnail_name__notilike is not None:
            
            _query_params.append(('thumbnail_name__notilike', thumbnail_name__notilike))
            
        if thumbnail_name__desc is not None:
            
            _query_params.append(('thumbnail_name__desc', thumbnail_name__desc))
            
        if thumbnail_name__asc is not None:
            
            _query_params.append(('thumbnail_name__asc', thumbnail_name__asc))
            
        if status__eq is not None:
            
            _query_params.append(('status__eq', status__eq))
            
        if status__ne is not None:
            
            _query_params.append(('status__ne', status__ne))
            
        if status__gt is not None:
            
            _query_params.append(('status__gt', status__gt))
            
        if status__gte is not None:
            
            _query_params.append(('status__gte', status__gte))
            
        if status__lt is not None:
            
            _query_params.append(('status__lt', status__lt))
            
        if status__lte is not None:
            
            _query_params.append(('status__lte', status__lte))
            
        if status__in is not None:
            
            _query_params.append(('status__in', status__in))
            
        if status__nin is not None:
            
            _query_params.append(('status__nin', status__nin))
            
        if status__notin is not None:
            
            _query_params.append(('status__notin', status__notin))
            
        if status__isnull is not None:
            
            _query_params.append(('status__isnull', status__isnull))
            
        if status__nisnull is not None:
            
            _query_params.append(('status__nisnull', status__nisnull))
            
        if status__isnotnull is not None:
            
            _query_params.append(('status__isnotnull', status__isnotnull))
            
        if status__l is not None:
            
            _query_params.append(('status__l', status__l))
            
        if status__like is not None:
            
            _query_params.append(('status__like', status__like))
            
        if status__nl is not None:
            
            _query_params.append(('status__nl', status__nl))
            
        if status__nlike is not None:
            
            _query_params.append(('status__nlike', status__nlike))
            
        if status__notlike is not None:
            
            _query_params.append(('status__notlike', status__notlike))
            
        if status__il is not None:
            
            _query_params.append(('status__il', status__il))
            
        if status__ilike is not None:
            
            _query_params.append(('status__ilike', status__ilike))
            
        if status__nil is not None:
            
            _query_params.append(('status__nil', status__nil))
            
        if status__nilike is not None:
            
            _query_params.append(('status__nilike', status__nilike))
            
        if status__notilike is not None:
            
            _query_params.append(('status__notilike', status__notilike))
            
        if status__desc is not None:
            
            _query_params.append(('status__desc', status__desc))
            
        if status__asc is not None:
            
            _query_params.append(('status__asc', status__asc))
            
        if camera_id__eq is not None:
            
            _query_params.append(('camera_id__eq', camera_id__eq))
            
        if camera_id__ne is not None:
            
            _query_params.append(('camera_id__ne', camera_id__ne))
            
        if camera_id__gt is not None:
            
            _query_params.append(('camera_id__gt', camera_id__gt))
            
        if camera_id__gte is not None:
            
            _query_params.append(('camera_id__gte', camera_id__gte))
            
        if camera_id__lt is not None:
            
            _query_params.append(('camera_id__lt', camera_id__lt))
            
        if camera_id__lte is not None:
            
            _query_params.append(('camera_id__lte', camera_id__lte))
            
        if camera_id__in is not None:
            
            _query_params.append(('camera_id__in', camera_id__in))
            
        if camera_id__nin is not None:
            
            _query_params.append(('camera_id__nin', camera_id__nin))
            
        if camera_id__notin is not None:
            
            _query_params.append(('camera_id__notin', camera_id__notin))
            
        if camera_id__isnull is not None:
            
            _query_params.append(('camera_id__isnull', camera_id__isnull))
            
        if camera_id__nisnull is not None:
            
            _query_params.append(('camera_id__nisnull', camera_id__nisnull))
            
        if camera_id__isnotnull is not None:
            
            _query_params.append(('camera_id__isnotnull', camera_id__isnotnull))
            
        if camera_id__l is not None:
            
            _query_params.append(('camera_id__l', camera_id__l))
            
        if camera_id__like is not None:
            
            _query_params.append(('camera_id__like', camera_id__like))
            
        if camera_id__nl is not None:
            
            _query_params.append(('camera_id__nl', camera_id__nl))
            
        if camera_id__nlike is not None:
            
            _query_params.append(('camera_id__nlike', camera_id__nlike))
            
        if camera_id__notlike is not None:
            
            _query_params.append(('camera_id__notlike', camera_id__notlike))
            
        if camera_id__il is not None:
            
            _query_params.append(('camera_id__il', camera_id__il))
            
        if camera_id__ilike is not None:
            
            _query_params.append(('camera_id__ilike', camera_id__ilike))
            
        if camera_id__nil is not None:
            
            _query_params.append(('camera_id__nil', camera_id__nil))
            
        if camera_id__nilike is not None:
            
            _query_params.append(('camera_id__nilike', camera_id__nilike))
            
        if camera_id__notilike is not None:
            
            _query_params.append(('camera_id__notilike', camera_id__notilike))
            
        if camera_id__desc is not None:
            
            _query_params.append(('camera_id__desc', camera_id__desc))
            
        if camera_id__asc is not None:
            
            _query_params.append(('camera_id__asc', camera_id__asc))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/videos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_video(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        video: Video,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetVideos200Response:
        """patch_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param video: (required)
        :type video: Video
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_video_serialize(
            primary_key=primary_key,
            video=video,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_video_with_http_info(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        video: Video,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetVideos200Response]:
        """patch_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param video: (required)
        :type video: Video
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_video_serialize(
            primary_key=primary_key,
            video=video,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_video_without_preload_content(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        video: Video,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param video: (required)
        :type video: Video
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_video_serialize(
            primary_key=primary_key,
            video=video,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_video_serialize(
        self,
        primary_key,
        video,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if primary_key is not None:
            _path_params['primaryKey'] = primary_key
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if video is not None:
            _body_params = video


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/videos/{primaryKey}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_videos(
        self,
        video: List[Video],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetVideos200Response:
        """post_videos


        :param video: (required)
        :type video: List[Video]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_videos_serialize(
            video=video,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_videos_with_http_info(
        self,
        video: List[Video],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetVideos200Response]:
        """post_videos


        :param video: (required)
        :type video: List[Video]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_videos_serialize(
            video=video,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_videos_without_preload_content(
        self,
        video: List[Video],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_videos


        :param video: (required)
        :type video: List[Video]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_videos_serialize(
            video=video,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_videos_serialize(
        self,
        video,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'Video': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if video is not None:
            _body_params = video


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/videos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_video(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        video: Video,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetVideos200Response:
        """put_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param video: (required)
        :type video: Video
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_video_serialize(
            primary_key=primary_key,
            video=video,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_video_with_http_info(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        video: Video,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetVideos200Response]:
        """put_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param video: (required)
        :type video: Video
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_video_serialize(
            primary_key=primary_key,
            video=video,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_video_without_preload_content(
        self,
        primary_key: Annotated[Any, Field(description="Primary key for Video")],
        video: Video,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_video


        :param primary_key: Primary key for Video (required)
        :type primary_key: object
        :param video: (required)
        :type video: Video
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_video_serialize(
            primary_key=primary_key,
            video=video,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVideos200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_video_serialize(
        self,
        primary_key,
        video,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if primary_key is not None:
            _path_params['primaryKey'] = primary_key
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if video is not None:
            _body_params = video


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/videos/{primaryKey}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


