volumes:
  postgres:
  media:

services:
  postgres:
    # this obscure image is chosen because it has x86_64 and arm64 support
    image: duvel/postgis:15-3.3
    restart: unless-stopped
    stop_grace_period: 0s
    healthcheck:
      interval: 5s
      timeout: 4s
      start_period: 60s
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "postgres"]
    volumes:
      - postgres:/home/postgres/pgdata/data
    environment:
      - "POSTGRES_DB=camry"
      - "POSTGRES_PASSWORD=NoNVR!11"
    ports:
      - 5432:5432/tcp

  migrate:
    depends_on:
      postgres:
        condition: service_healthy
    image: migrate/migrate:v4.17.1
    restart: no
    stop_grace_period: 0s
    volumes:
      - ./database/migrations:/migrations
    command: >
      --source file:///migrations
      --database postgres://postgres:NoNVR!11@postgres:5432/camry?sslmode=disable
      up

  post-migrate:
    depends_on:
      migrate:
        condition: service_completed_successfully
    # this obscure image is chosen because it has x86_64 and arm64 support
    image: duvel/postgis:15-3.3
    restart: no
    stop_grace_period: 0s
    entrypoint: ["/bin/bash", "-c"]
    command: "PAGER=cat PGPASSWORD=NoNVR!11 psql -h postgres -p 5432 -U postgres -a camry -c 'VACUUM FULL; VACUUM ANALYZE;'"

  redis:
    image: redis:7.2.5
    restart: unless-stopped
    stop_grace_period: 0s
    ports:
      - 6379:6379/tcp

  swagger:
    restart: unless-stopped
    stop_grace_period: 0s
    image: swaggerapi/swagger-ui:v5.4.2
    environment:
      - "BASE_URL=/"
      - "SWAGGER_JSON_URL=http://0.0.0.0:7070/api/openapi.json"
    ports:
      - "7071:8080/tcp"

  nats:
    restart: unless-stopped
    stop_grace_period: 0s
    image: nats:2.10.18
    ports:
      - "4222:4222/tcp"
    command: ["-js"]

  api:
    profiles:
      - full
    depends_on:
      post-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    stop_grace_period: 0s
    build:
      dockerfile: ./docker/api/Dockerfile
      context: .
    environment:
      - "DJANGOLANG_NODE_NAME=api"
      - "POSTGRES_HOST=postgres"
      - "POSTGRES_PASSWORD=NoNVR!11"
      - "POSTGRES_DB=camry"
      - "REDIS_URL=redis://redis:6379"
      - "DJANGOLANG_PROFILE=${DJANGOLANG_PROFILE:-0}"
    ports:
      - 7070:7070/tcp
    command:
      - serve

  frontend:
    profiles:
      - full
    depends_on:
      post-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    stop_grace_period: 0s
    build:
      dockerfile: ./docker/frontend/Dockerfile
      context: .
    volumes:
      - media:/srv/media
    ports:
      - 3000:80/tcp

  bootstrap:
    profiles:
      - full
    depends_on:
      api:
        condition: service_healthy
    image: curlimages/curl
    restart: on-failure
    command:
      - sh
      - -c
      - |
        curl -vvv -X POST http://api:7070/api/cameras -d '[{"name": "Driveway", "stream_url": "rtsp://192.168.137.31:554/Streaming/Channels/101"}, {"name": "Front door", "stream_url": "rtsp://192.168.137.32:554/Streaming/Channels/101"}, {"name": "Side gate", "stream_url": "rtsp://192.168.137.33:554/Streaming/Channels/101"}]'

  segment-producer-driveway:
    profiles:
      - full
    depends_on:
      bootstrap:
        condition: service_completed_successfully
    restart: unless-stopped
    stop_grace_period: 0s
    build:
      dockerfile: ./docker/segment-producer/Dockerfile
      context: .
    volumes:
      - media:/srv/media
    environment:
      - "POSTGRES_HOST=postgres"
      - "POSTGRES_PASSWORD=NoNVR!11"
      - "POSTGRES_DB=camry"
      - "NET_CAM_URL=rtsp://192.168.137.31:554/Streaming/Channels/101"
      - "CAMERA_NAME=Driveway"

  segment-producer-front-door:
    profiles:
      - full
    depends_on:
      bootstrap:
        condition: service_completed_successfully
    restart: unless-stopped
    stop_grace_period: 0s
    build:
      dockerfile: ./docker/segment-producer/Dockerfile
      context: .
    volumes:
      - media:/srv/media
    environment:
      - "POSTGRES_HOST=postgres"
      - "POSTGRES_PASSWORD=NoNVR!11"
      - "POSTGRES_DB=camry"
      - "NET_CAM_URL=rtsp://192.168.137.32:554/Streaming/Channels/101"
      - "CAMERA_NAME=Front door"

  segment-producer-side-gate:
    profiles:
      - full
    depends_on:
      bootstrap:
        condition: service_completed_successfully
    restart: unless-stopped
    stop_grace_period: 0s
    build:
      dockerfile: ./docker/segment-producer/Dockerfile
      context: .
    volumes:
      - media:/srv/media
    environment:
      - "POSTGRES_HOST=postgres"
      - "POSTGRES_PASSWORD=NoNVR!11"
      - "POSTGRES_DB=camry"
      - "NET_CAM_URL=rtsp://192.168.137.33:554/Streaming/Channels/101"
      - "CAMERA_NAME=Side gate"

  object-detector-driveway:
    profiles:
      - full
    depends_on:
      bootstrap:
        condition: service_completed_successfully
    restart: unless-stopped
    stop_grace_period: 0s
    build:
      dockerfile: ./docker/object-detector/Dockerfile
      context: .
      args:
        - "BASE_IMAGE=pytorch/pytorch:2.4.0-cuda11.8-cudnn9-runtime"
    volumes:
      - media:/srv/media
    environment:
      - "POSTGRES_HOST=postgres"
      - "POSTGRES_PASSWORD=NoNVR!11"
      - "POSTGRES_DB=camry"
      - "NET_CAM_URL=rtsp://192.168.137.31:554/Streaming/Channels/101"
      - "CAMERA_NAME=Driveway"
      - "API_URL=http://api:7070"
      - "CUDA_VISIBLE_DEVICES="

  object-detector-front-door:
    profiles:
      - full
    depends_on:
      bootstrap:
        condition: service_completed_successfully
    restart: unless-stopped
    stop_grace_period: 0s
    build:
      dockerfile: ./docker/object-detector/Dockerfile
      context: .
      args:
        - "BASE_IMAGE=pytorch/pytorch:2.4.0-cuda11.8-cudnn9-runtime"
    volumes:
      - media:/srv/media
    environment:
      - "POSTGRES_HOST=postgres"
      - "POSTGRES_PASSWORD=NoNVR!11"
      - "POSTGRES_DB=camry"
      - "NET_CAM_URL=rtsp://192.168.137.32:554/Streaming/Channels/101"
      - "CAMERA_NAME=Front door"
      - "API_URL=http://api:7070"
      - "CUDA_VISIBLE_DEVICES="

  object-detector-side-gate:
    profiles:
      - full
    depends_on:
      bootstrap:
        condition: service_completed_successfully
    restart: unless-stopped
    stop_grace_period: 0s
    build:
      dockerfile: ./docker/object-detector/Dockerfile
      context: .
      args:
        - "BASE_IMAGE=pytorch/pytorch:2.4.0-cuda11.8-cudnn9-runtime"
    volumes:
      - media:/srv/media
    environment:
      - "POSTGRES_HOST=postgres"
      - "POSTGRES_PASSWORD=NoNVR!11"
      - "POSTGRES_DB=camry"
      - "NET_CAM_URL=rtsp://192.168.137.33:554/Streaming/Channels/101"
      - "CAMERA_NAME=Side gate"
      - "API_URL=http://api:7070"
      - "CUDA_VISIBLE_DEVICES="
