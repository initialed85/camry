{
  "openapi": "3.0.0",
  "info": {
    "title": "Djangolang",
    "version": "1.0"
  },
  "paths": {
    "/api/cameras": {
      "get": {
        "tags": [
          "Camera"
        ],
        "operationId": "GetCameras",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "SQL LIMIT operator"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "SQL OFFSET operator"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          },
          {
            "name": "id__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "id__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "id__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "id__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "id__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "id__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "id__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "id__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "id__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "created_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "created_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "created_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "created_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "created_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "created_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "updated_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "updated_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "updated_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "updated_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "updated_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "updated_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "updated_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "updated_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "deleted_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "deleted_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "deleted_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "deleted_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "name__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "name__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "name__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "name__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "name__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "name__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "name__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "name__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "name__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "name__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "name__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "name__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "name__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "name__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "name__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "name__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "name__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "name__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_url__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "stream_url__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "stream_url__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "stream_url__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "stream_url__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "stream_url__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "stream_url__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "stream_url__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "stream_url__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_url__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_url__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_url__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_url__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "stream_url__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "stream_url__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "stream_url__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "stream_url__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_url__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "last_seen__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "last_seen__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "last_seen__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "last_seen__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "last_seen__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "last_seen__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "last_seen__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "last_seen__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "last_seen__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "last_seen__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "last_seen__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "last_seen__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "last_seen__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "last_seen__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "last_seen__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "last_seen__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "last_seen__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "last_seen__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "segment_producer_claimed_until__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "segment_producer_claimed_until__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "segment_producer_claimed_until__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "segment_producer_claimed_until__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "segment_producer_claimed_until__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "segment_producer_claimed_until__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "segment_producer_claimed_until__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "segment_producer_claimed_until__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "segment_producer_claimed_until__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "segment_producer_claimed_until__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "segment_producer_claimed_until__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "segment_producer_claimed_until__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "segment_producer_claimed_until__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "segment_producer_claimed_until__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "segment_producer_claimed_until__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "segment_producer_claimed_until__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "segment_producer_claimed_until__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "segment_producer_claimed_until__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_producer_claimed_until__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "stream_producer_claimed_until__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "stream_producer_claimed_until__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "stream_producer_claimed_until__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "stream_producer_claimed_until__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "stream_producer_claimed_until__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "stream_producer_claimed_until__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "stream_producer_claimed_until__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "stream_producer_claimed_until__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_producer_claimed_until__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_producer_claimed_until__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_producer_claimed_until__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_producer_claimed_until__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "stream_producer_claimed_until__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "stream_producer_claimed_until__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "stream_producer_claimed_until__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "stream_producer_claimed_until__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "stream_producer_claimed_until__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful List Fetch for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Camera"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed List Fetch for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Camera"
        ],
        "operationId": "PostCameras",
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful List Create for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Camera"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed List Create for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/cameras/{primaryKey}": {
      "get": {
        "tags": [
          "Camera"
        ],
        "operationId": "GetCamera",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Camera"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Item Fetch for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Camera"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed Item Fetch for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Camera"
        ],
        "operationId": "PutCamera",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Camera"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Camera"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Item Replace for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Camera"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed Item Replace for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Camera"
        ],
        "operationId": "PatchCamera",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Camera"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Camera"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Item Update for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Camera"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed Item Update for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Camera"
        ],
        "operationId": "DeleteCamera",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Camera"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Item Delete for Cameras"
          },
          "default": {
            "description": "Failed Item Delete for Cameras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/custom/claim-video-for-object-detector": {
      "patch": {
        "tags": [
          "Custom"
        ],
        "operationId": "PatchClaimVideoForObjectDetector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PatchClaimVideoForObjectDetector success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Video"
                }
              }
            }
          },
          "default": {
            "description": "PatchClaimVideoForObjectDetector failure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/detections": {
      "get": {
        "tags": [
          "Detection"
        ],
        "operationId": "GetDetections",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "SQL LIMIT operator"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "SQL OFFSET operator"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          },
          {
            "name": "id__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "id__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "id__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "id__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "id__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "id__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "id__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "id__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "id__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "created_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "created_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "created_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "created_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "created_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "created_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "updated_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "updated_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "updated_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "updated_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "updated_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "updated_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "updated_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "updated_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "deleted_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "deleted_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "deleted_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "deleted_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "seen_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "seen_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "seen_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "seen_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "seen_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "seen_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "seen_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "seen_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "seen_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "seen_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "seen_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "seen_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "seen_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "seen_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "seen_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "seen_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "seen_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "seen_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_id__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "class_id__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "class_id__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "class_id__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "class_id__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "class_id__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "class_id__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "class_id__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "class_id__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_id__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_id__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_id__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_id__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "class_id__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "class_id__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "class_id__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "class_id__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_id__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_name__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "class_name__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "class_name__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "class_name__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "class_name__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "class_name__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "class_name__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "class_name__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "class_name__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_name__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_name__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_name__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_name__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "class_name__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "class_name__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "class_name__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "class_name__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "class_name__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "score__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "score__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "score__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "score__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "score__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "score__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "score__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "score__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "score__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "score__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "score__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "score__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "score__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "score__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "score__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "score__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "score__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "score__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "video_id__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "video_id__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "video_id__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "video_id__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "video_id__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "video_id__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "video_id__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "video_id__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "video_id__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "video_id__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "video_id__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "video_id__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "video_id__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "video_id__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "video_id__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "video_id__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "video_id__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "video_id__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "camera_id__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "camera_id__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "camera_id__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "camera_id__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "camera_id__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "camera_id__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "camera_id__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "camera_id__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "camera_id__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "camera_id__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "camera_id__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "camera_id__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful List Fetch for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Detection"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed List Fetch for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Detection"
        ],
        "operationId": "PostDetections",
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Detection"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful List Create for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Detection"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed List Create for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/detections/{primaryKey}": {
      "get": {
        "tags": [
          "Detection"
        ],
        "operationId": "GetDetection",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Detection"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Item Fetch for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Detection"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed Item Fetch for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Detection"
        ],
        "operationId": "PutDetection",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Detection"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Detection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Item Replace for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Detection"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed Item Replace for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Detection"
        ],
        "operationId": "PatchDetection",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Detection"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Detection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Item Update for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Detection"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed Item Update for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Detection"
        ],
        "operationId": "DeleteDetection",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Detection"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Item Delete for Detections"
          },
          "default": {
            "description": "Failed Item Delete for Detections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/videos": {
      "get": {
        "tags": [
          "Video"
        ],
        "operationId": "GetVideos",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "SQL LIMIT operator"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "SQL OFFSET operator"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          },
          {
            "name": "id__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "id__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "id__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "id__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "id__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "id__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "id__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "id__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "id__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "id__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "id__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "created_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "created_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "created_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "created_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "created_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "created_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "created_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "created_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "updated_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "updated_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "updated_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "updated_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "updated_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "updated_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "updated_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "updated_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "updated_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "updated_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "deleted_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "deleted_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "deleted_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "deleted_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "deleted_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "deleted_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "deleted_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_name__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "file_name__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "file_name__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "file_name__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "file_name__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "file_name__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "file_name__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "file_name__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "file_name__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_name__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_name__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_name__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_name__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "file_name__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "file_name__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "file_name__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "file_name__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_name__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "started_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "started_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "started_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "started_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "started_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "started_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "started_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "started_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "started_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "started_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "started_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "started_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "started_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "started_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "started_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "started_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "started_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "started_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "ended_at__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "ended_at__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "ended_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "ended_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "ended_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "ended_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "ended_at__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "ended_at__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "ended_at__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "ended_at__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "ended_at__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "ended_at__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "ended_at__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "ended_at__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "ended_at__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "ended_at__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "ended_at__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "ended_at__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "duration__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "duration__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "duration__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "duration__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "duration__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "duration__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "duration__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "duration__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "duration__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "duration__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "duration__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "duration__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "duration__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "duration__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "duration__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "duration__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "duration__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "duration__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_size__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "file_size__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "file_size__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "file_size__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "file_size__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "file_size__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "file_size__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "file_size__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "file_size__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_size__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_size__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_size__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_size__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "file_size__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "file_size__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "file_size__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "file_size__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "file_size__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "thumbnail_name__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "thumbnail_name__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "thumbnail_name__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "thumbnail_name__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "thumbnail_name__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "thumbnail_name__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "thumbnail_name__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "thumbnail_name__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "thumbnail_name__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "thumbnail_name__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "thumbnail_name__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "thumbnail_name__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "thumbnail_name__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "thumbnail_name__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "thumbnail_name__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "thumbnail_name__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "thumbnail_name__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "thumbnail_name__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "status__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "status__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "status__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "status__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "status__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "status__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "status__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "status__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "status__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "status__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "status__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "status__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "status__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "status__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "status__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "status__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "status__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "status__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_detector_claimed_until__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "object_detector_claimed_until__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "object_detector_claimed_until__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "object_detector_claimed_until__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "object_detector_claimed_until__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "object_detector_claimed_until__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "object_detector_claimed_until__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "object_detector_claimed_until__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "object_detector_claimed_until__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_detector_claimed_until__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_detector_claimed_until__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_detector_claimed_until__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_detector_claimed_until__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "object_detector_claimed_until__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "object_detector_claimed_until__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "object_detector_claimed_until__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "object_detector_claimed_until__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_detector_claimed_until__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_tracker_claimed_until__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "object_tracker_claimed_until__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "object_tracker_claimed_until__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "object_tracker_claimed_until__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "object_tracker_claimed_until__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "object_tracker_claimed_until__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "object_tracker_claimed_until__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "object_tracker_claimed_until__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "object_tracker_claimed_until__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_tracker_claimed_until__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_tracker_claimed_until__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_tracker_claimed_until__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_tracker_claimed_until__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "object_tracker_claimed_until__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "object_tracker_claimed_until__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "object_tracker_claimed_until__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "object_tracker_claimed_until__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "object_tracker_claimed_until__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__eq",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL = comparison"
          },
          {
            "name": "camera_id__ne",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL != comparison"
          },
          {
            "name": "camera_id__gt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e comparison, may not work with all column types"
          },
          {
            "name": "camera_id__gte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003e= comparison, may not work with all column types"
          },
          {
            "name": "camera_id__lt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c comparison, may not work with all column types"
          },
          {
            "name": "camera_id__lte",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL \u003c= comparison, may not work with all column types"
          },
          {
            "name": "camera_id__in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL IN comparison, permits comma-separated values"
          },
          {
            "name": "camera_id__notin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "SQL NOT IN comparison, permits comma-separated values"
          },
          {
            "name": "camera_id__isnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__isnotnull",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS NOT null comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__isfalse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS false comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__istrue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL IS true comparison, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "camera_id__notlike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "camera_id__ilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "camera_id__notilike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %"
          },
          {
            "name": "camera_id__desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)"
          },
          {
            "name": "camera_id__asc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful List Fetch for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Video"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed List Fetch for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Video"
        ],
        "operationId": "PostVideos",
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Video"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful List Create for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Video"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed List Create for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/videos/{primaryKey}": {
      "get": {
        "tags": [
          "Video"
        ],
        "operationId": "GetVideo",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Video"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Item Fetch for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Video"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed Item Fetch for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Video"
        ],
        "operationId": "PutVideo",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Video"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Video"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Item Replace for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Video"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed Item Replace for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Video"
        ],
        "operationId": "PatchVideo",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Video"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Video"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Item Update for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Video"
                      }
                    },
                    "offset": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "total_count": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Failed Item Update for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Video"
        ],
        "operationId": "DeleteVideo",
        "parameters": [
          {
            "name": "primaryKey",
            "in": "path",
            "required": true,
            "schema": {},
            "description": "Primary key for Video"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Max recursion depth for loading foreign objects; default = 1\n\n(0 = recurse until graph cycle detected, 1 = this object only, 2 = this object + neighbours, 3 = this object + neighbours + their neighbours... etc)"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Item Delete for Videos"
          },
          "default": {
            "description": "Failed Item Delete for Videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "status",
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Camera": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "referenced_by_detection_camera_id_objects": {
            "$ref": "#/components/schemas/NullableArrayOfDetection"
          },
          "referenced_by_video_camera_id_objects": {
            "$ref": "#/components/schemas/NullableArrayOfVideo"
          },
          "segment_producer_claimed_until": {
            "type": "string",
            "format": "date-time"
          },
          "stream_producer_claimed_until": {
            "type": "string",
            "format": "date-time"
          },
          "stream_url": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ClaimRequest": {
        "type": "object",
        "properties": {
          "claim_duration_seconds": {
            "$ref": "#/components/schemas/Float64"
          }
        },
        "required": [
          "claim_duration_seconds"
        ]
      },
      "Detection": {
        "type": "object",
        "properties": {
          "bounding_box": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "X": {
                  "type": "number",
                  "format": "double"
                },
                "Y": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "camera_id": {
            "type": "string",
            "format": "uuid"
          },
          "camera_id_object": {
            "$ref": "#/components/schemas/NullableCamera"
          },
          "centroid": {
            "type": "object",
            "properties": {
              "X": {
                "type": "number",
                "format": "double"
              },
              "Y": {
                "type": "number",
                "format": "double"
              }
            }
          },
          "class_id": {
            "type": "integer",
            "format": "int64"
          },
          "class_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "seen_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "video_id": {
            "type": "string",
            "format": "uuid"
          },
          "video_id_object": {
            "$ref": "#/components/schemas/NullableVideo"
          }
        }
      },
      "Float64": {
        "type": "number",
        "format": "double"
      },
      "NullableArrayOfCamera": {
        "type": "array",
        "nullable": true,
        "items": {
          "$ref": "#/components/schemas/Camera"
        }
      },
      "NullableArrayOfDetection": {
        "type": "array",
        "nullable": true,
        "items": {
          "$ref": "#/components/schemas/Detection"
        }
      },
      "NullableArrayOfVideo": {
        "type": "array",
        "nullable": true,
        "items": {
          "$ref": "#/components/schemas/Video"
        }
      },
      "NullableCamera": {
        "$ref": "#/components/schemas/Camera",
        "nullable": true
      },
      "NullableDetection": {
        "$ref": "#/components/schemas/Detection",
        "nullable": true
      },
      "NullableVideo": {
        "$ref": "#/components/schemas/Video",
        "nullable": true
      },
      "Vec2": {
        "type": "object",
        "properties": {
          "X": {
            "type": "number",
            "format": "double"
          },
          "Y": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Video": {
        "type": "object",
        "properties": {
          "camera_id": {
            "type": "string",
            "format": "uuid"
          },
          "camera_id_object": {
            "$ref": "#/components/schemas/NullableCamera"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "detection_summary": {
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "file_name": {
            "type": "string"
          },
          "file_size": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "object_detector_claimed_until": {
            "type": "string",
            "format": "date-time"
          },
          "object_tracker_claimed_until": {
            "type": "string",
            "format": "date-time"
          },
          "referenced_by_detection_video_id_objects": {
            "$ref": "#/components/schemas/NullableArrayOfDetection"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "thumbnail_name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}