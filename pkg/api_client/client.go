// Package api_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Camera defines model for Camera.
type Camera struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	DeletedAt *time.Time          `json:"deleted_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	LastSeen  *time.Time          `json:"last_seen"`
	Name      *string             `json:"name,omitempty"`
	StreamUrl *string             `json:"stream_url,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// Detection defines model for Detection.
type Detection struct {
	BoundingBox *[]struct {
		X *float64 `json:"X,omitempty"`
		Y *float64 `json:"Y,omitempty"`
	} `json:"bounding_box,omitempty"`
	CameraId       *openapi_types.UUID `json:"camera_id,omitempty"`
	CameraIdObject *NullableCamera     `json:"camera_id_object,omitempty"`
	Centroid       *struct {
		X *float64 `json:"X,omitempty"`
		Y *float64 `json:"Y,omitempty"`
	} `json:"centroid,omitempty"`
	ClassId   *int64              `json:"class_id,omitempty"`
	ClassName *string             `json:"class_name,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	DeletedAt *time.Time          `json:"deleted_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Score     *float64            `json:"score,omitempty"`
	SeenAt    *time.Time          `json:"seen_at,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// NullableCamera defines model for NullableCamera.
type NullableCamera = Camera

// Video defines model for Video.
type Video struct {
	CameraId       *openapi_types.UUID `json:"camera_id,omitempty"`
	CameraIdObject *NullableCamera     `json:"camera_id_object,omitempty"`
	CreatedAt      *time.Time          `json:"created_at,omitempty"`
	DeletedAt      *time.Time          `json:"deleted_at"`
	Duration       *int64              `json:"duration"`
	EndedAt        *time.Time          `json:"ended_at"`
	FileName       *string             `json:"file_name,omitempty"`
	FileSize       *float64            `json:"file_size"`
	Id             *openapi_types.UUID `json:"id,omitempty"`
	StartedAt      *time.Time          `json:"started_at,omitempty"`
	Status         *string             `json:"status,omitempty"`
	ThumbnailName  *string             `json:"thumbnail_name,omitempty"`
	UpdatedAt      *time.Time          `json:"updated_at,omitempty"`
}

// GetCamerasParams defines parameters for GetCameras.
type GetCamerasParams struct {
	// Limit SQL LIMIT operator
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset SQL OFFSET operator
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// IdEq SQL = operator
	IdEq *openapi_types.UUID `form:"id__eq,omitempty" json:"id__eq,omitempty"`

	// IdNe SQL != operator
	IdNe *openapi_types.UUID `form:"id__ne,omitempty" json:"id__ne,omitempty"`

	// IdGt SQL > operator, may not work with all column types
	IdGt *openapi_types.UUID `form:"id__gt,omitempty" json:"id__gt,omitempty"`

	// IdGte SQL >= operator, may not work with all column types
	IdGte *openapi_types.UUID `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdLt SQL < operator, may not work with all column types
	IdLt *openapi_types.UUID `form:"id__lt,omitempty" json:"id__lt,omitempty"`

	// IdLte SQL <= operator, may not work with all column types
	IdLte *openapi_types.UUID `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// IdIn SQL IN operator, permits comma-separated values
	IdIn *openapi_types.UUID `form:"id__in,omitempty" json:"id__in,omitempty"`

	// IdNin SQL NOT IN operator, permits comma-separated values
	IdNin *openapi_types.UUID `form:"id__nin,omitempty" json:"id__nin,omitempty"`

	// IdNotin SQL NOT IN operator, permits comma-separated values
	IdNotin *openapi_types.UUID `form:"id__notin,omitempty" json:"id__notin,omitempty"`

	// IdIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	IdIsnull *openapi_types.UUID `form:"id__isnull,omitempty" json:"id__isnull,omitempty"`

	// IdNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	IdNisnull *openapi_types.UUID `form:"id__nisnull,omitempty" json:"id__nisnull,omitempty"`

	// IdIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	IdIsnotnull *openapi_types.UUID `form:"id__isnotnull,omitempty" json:"id__isnotnull,omitempty"`

	// IdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdL *openapi_types.UUID `form:"id__l,omitempty" json:"id__l,omitempty"`

	// IdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdLike *openapi_types.UUID `form:"id__like,omitempty" json:"id__like,omitempty"`

	// IdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNl *openapi_types.UUID `form:"id__nl,omitempty" json:"id__nl,omitempty"`

	// IdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNlike *openapi_types.UUID `form:"id__nlike,omitempty" json:"id__nlike,omitempty"`

	// IdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNotlike *openapi_types.UUID `form:"id__notlike,omitempty" json:"id__notlike,omitempty"`

	// IdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIl *openapi_types.UUID `form:"id__il,omitempty" json:"id__il,omitempty"`

	// IdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIlike *openapi_types.UUID `form:"id__ilike,omitempty" json:"id__ilike,omitempty"`

	// IdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNil *openapi_types.UUID `form:"id__nil,omitempty" json:"id__nil,omitempty"`

	// IdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNilike *openapi_types.UUID `form:"id__nilike,omitempty" json:"id__nilike,omitempty"`

	// IdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNotilike *openapi_types.UUID `form:"id__notilike,omitempty" json:"id__notilike,omitempty"`

	// IdDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	IdDesc *openapi_types.UUID `form:"id__desc,omitempty" json:"id__desc,omitempty"`

	// IdAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	IdAsc *openapi_types.UUID `form:"id__asc,omitempty" json:"id__asc,omitempty"`

	// CreatedAtEq SQL = operator
	CreatedAtEq *time.Time `form:"created_at__eq,omitempty" json:"created_at__eq,omitempty"`

	// CreatedAtNe SQL != operator
	CreatedAtNe *time.Time `form:"created_at__ne,omitempty" json:"created_at__ne,omitempty"`

	// CreatedAtGt SQL > operator, may not work with all column types
	CreatedAtGt *time.Time `form:"created_at__gt,omitempty" json:"created_at__gt,omitempty"`

	// CreatedAtGte SQL >= operator, may not work with all column types
	CreatedAtGte *time.Time `form:"created_at__gte,omitempty" json:"created_at__gte,omitempty"`

	// CreatedAtLt SQL < operator, may not work with all column types
	CreatedAtLt *time.Time `form:"created_at__lt,omitempty" json:"created_at__lt,omitempty"`

	// CreatedAtLte SQL <= operator, may not work with all column types
	CreatedAtLte *time.Time `form:"created_at__lte,omitempty" json:"created_at__lte,omitempty"`

	// CreatedAtIn SQL IN operator, permits comma-separated values
	CreatedAtIn *time.Time `form:"created_at__in,omitempty" json:"created_at__in,omitempty"`

	// CreatedAtNin SQL NOT IN operator, permits comma-separated values
	CreatedAtNin *time.Time `form:"created_at__nin,omitempty" json:"created_at__nin,omitempty"`

	// CreatedAtNotin SQL NOT IN operator, permits comma-separated values
	CreatedAtNotin *time.Time `form:"created_at__notin,omitempty" json:"created_at__notin,omitempty"`

	// CreatedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	CreatedAtIsnull *time.Time `form:"created_at__isnull,omitempty" json:"created_at__isnull,omitempty"`

	// CreatedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CreatedAtNisnull *time.Time `form:"created_at__nisnull,omitempty" json:"created_at__nisnull,omitempty"`

	// CreatedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CreatedAtIsnotnull *time.Time `form:"created_at__isnotnull,omitempty" json:"created_at__isnotnull,omitempty"`

	// CreatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtL *time.Time `form:"created_at__l,omitempty" json:"created_at__l,omitempty"`

	// CreatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtLike *time.Time `form:"created_at__like,omitempty" json:"created_at__like,omitempty"`

	// CreatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNl *time.Time `form:"created_at__nl,omitempty" json:"created_at__nl,omitempty"`

	// CreatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNlike *time.Time `form:"created_at__nlike,omitempty" json:"created_at__nlike,omitempty"`

	// CreatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotlike *time.Time `form:"created_at__notlike,omitempty" json:"created_at__notlike,omitempty"`

	// CreatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIl *time.Time `form:"created_at__il,omitempty" json:"created_at__il,omitempty"`

	// CreatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIlike *time.Time `form:"created_at__ilike,omitempty" json:"created_at__ilike,omitempty"`

	// CreatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNil *time.Time `form:"created_at__nil,omitempty" json:"created_at__nil,omitempty"`

	// CreatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNilike *time.Time `form:"created_at__nilike,omitempty" json:"created_at__nilike,omitempty"`

	// CreatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotilike *time.Time `form:"created_at__notilike,omitempty" json:"created_at__notilike,omitempty"`

	// CreatedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	CreatedAtDesc *time.Time `form:"created_at__desc,omitempty" json:"created_at__desc,omitempty"`

	// CreatedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	CreatedAtAsc *time.Time `form:"created_at__asc,omitempty" json:"created_at__asc,omitempty"`

	// UpdatedAtEq SQL = operator
	UpdatedAtEq *time.Time `form:"updated_at__eq,omitempty" json:"updated_at__eq,omitempty"`

	// UpdatedAtNe SQL != operator
	UpdatedAtNe *time.Time `form:"updated_at__ne,omitempty" json:"updated_at__ne,omitempty"`

	// UpdatedAtGt SQL > operator, may not work with all column types
	UpdatedAtGt *time.Time `form:"updated_at__gt,omitempty" json:"updated_at__gt,omitempty"`

	// UpdatedAtGte SQL >= operator, may not work with all column types
	UpdatedAtGte *time.Time `form:"updated_at__gte,omitempty" json:"updated_at__gte,omitempty"`

	// UpdatedAtLt SQL < operator, may not work with all column types
	UpdatedAtLt *time.Time `form:"updated_at__lt,omitempty" json:"updated_at__lt,omitempty"`

	// UpdatedAtLte SQL <= operator, may not work with all column types
	UpdatedAtLte *time.Time `form:"updated_at__lte,omitempty" json:"updated_at__lte,omitempty"`

	// UpdatedAtIn SQL IN operator, permits comma-separated values
	UpdatedAtIn *time.Time `form:"updated_at__in,omitempty" json:"updated_at__in,omitempty"`

	// UpdatedAtNin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNin *time.Time `form:"updated_at__nin,omitempty" json:"updated_at__nin,omitempty"`

	// UpdatedAtNotin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNotin *time.Time `form:"updated_at__notin,omitempty" json:"updated_at__notin,omitempty"`

	// UpdatedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	UpdatedAtIsnull *time.Time `form:"updated_at__isnull,omitempty" json:"updated_at__isnull,omitempty"`

	// UpdatedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	UpdatedAtNisnull *time.Time `form:"updated_at__nisnull,omitempty" json:"updated_at__nisnull,omitempty"`

	// UpdatedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	UpdatedAtIsnotnull *time.Time `form:"updated_at__isnotnull,omitempty" json:"updated_at__isnotnull,omitempty"`

	// UpdatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtL *time.Time `form:"updated_at__l,omitempty" json:"updated_at__l,omitempty"`

	// UpdatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtLike *time.Time `form:"updated_at__like,omitempty" json:"updated_at__like,omitempty"`

	// UpdatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNl *time.Time `form:"updated_at__nl,omitempty" json:"updated_at__nl,omitempty"`

	// UpdatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNlike *time.Time `form:"updated_at__nlike,omitempty" json:"updated_at__nlike,omitempty"`

	// UpdatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotlike *time.Time `form:"updated_at__notlike,omitempty" json:"updated_at__notlike,omitempty"`

	// UpdatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIl *time.Time `form:"updated_at__il,omitempty" json:"updated_at__il,omitempty"`

	// UpdatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIlike *time.Time `form:"updated_at__ilike,omitempty" json:"updated_at__ilike,omitempty"`

	// UpdatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNil *time.Time `form:"updated_at__nil,omitempty" json:"updated_at__nil,omitempty"`

	// UpdatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNilike *time.Time `form:"updated_at__nilike,omitempty" json:"updated_at__nilike,omitempty"`

	// UpdatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotilike *time.Time `form:"updated_at__notilike,omitempty" json:"updated_at__notilike,omitempty"`

	// UpdatedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	UpdatedAtDesc *time.Time `form:"updated_at__desc,omitempty" json:"updated_at__desc,omitempty"`

	// UpdatedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	UpdatedAtAsc *time.Time `form:"updated_at__asc,omitempty" json:"updated_at__asc,omitempty"`

	// DeletedAtEq SQL = operator
	DeletedAtEq *time.Time `form:"deleted_at__eq,omitempty" json:"deleted_at__eq,omitempty"`

	// DeletedAtNe SQL != operator
	DeletedAtNe *time.Time `form:"deleted_at__ne,omitempty" json:"deleted_at__ne,omitempty"`

	// DeletedAtGt SQL > operator, may not work with all column types
	DeletedAtGt *time.Time `form:"deleted_at__gt,omitempty" json:"deleted_at__gt,omitempty"`

	// DeletedAtGte SQL >= operator, may not work with all column types
	DeletedAtGte *time.Time `form:"deleted_at__gte,omitempty" json:"deleted_at__gte,omitempty"`

	// DeletedAtLt SQL < operator, may not work with all column types
	DeletedAtLt *time.Time `form:"deleted_at__lt,omitempty" json:"deleted_at__lt,omitempty"`

	// DeletedAtLte SQL <= operator, may not work with all column types
	DeletedAtLte *time.Time `form:"deleted_at__lte,omitempty" json:"deleted_at__lte,omitempty"`

	// DeletedAtIn SQL IN operator, permits comma-separated values
	DeletedAtIn *time.Time `form:"deleted_at__in,omitempty" json:"deleted_at__in,omitempty"`

	// DeletedAtNin SQL NOT IN operator, permits comma-separated values
	DeletedAtNin *time.Time `form:"deleted_at__nin,omitempty" json:"deleted_at__nin,omitempty"`

	// DeletedAtNotin SQL NOT IN operator, permits comma-separated values
	DeletedAtNotin *time.Time `form:"deleted_at__notin,omitempty" json:"deleted_at__notin,omitempty"`

	// DeletedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	DeletedAtIsnull *time.Time `form:"deleted_at__isnull,omitempty" json:"deleted_at__isnull,omitempty"`

	// DeletedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	DeletedAtNisnull *time.Time `form:"deleted_at__nisnull,omitempty" json:"deleted_at__nisnull,omitempty"`

	// DeletedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	DeletedAtIsnotnull *time.Time `form:"deleted_at__isnotnull,omitempty" json:"deleted_at__isnotnull,omitempty"`

	// DeletedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtL *time.Time `form:"deleted_at__l,omitempty" json:"deleted_at__l,omitempty"`

	// DeletedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtLike *time.Time `form:"deleted_at__like,omitempty" json:"deleted_at__like,omitempty"`

	// DeletedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNl *time.Time `form:"deleted_at__nl,omitempty" json:"deleted_at__nl,omitempty"`

	// DeletedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNlike *time.Time `form:"deleted_at__nlike,omitempty" json:"deleted_at__nlike,omitempty"`

	// DeletedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotlike *time.Time `form:"deleted_at__notlike,omitempty" json:"deleted_at__notlike,omitempty"`

	// DeletedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIl *time.Time `form:"deleted_at__il,omitempty" json:"deleted_at__il,omitempty"`

	// DeletedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIlike *time.Time `form:"deleted_at__ilike,omitempty" json:"deleted_at__ilike,omitempty"`

	// DeletedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNil *time.Time `form:"deleted_at__nil,omitempty" json:"deleted_at__nil,omitempty"`

	// DeletedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNilike *time.Time `form:"deleted_at__nilike,omitempty" json:"deleted_at__nilike,omitempty"`

	// DeletedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotilike *time.Time `form:"deleted_at__notilike,omitempty" json:"deleted_at__notilike,omitempty"`

	// DeletedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	DeletedAtDesc *time.Time `form:"deleted_at__desc,omitempty" json:"deleted_at__desc,omitempty"`

	// DeletedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	DeletedAtAsc *time.Time `form:"deleted_at__asc,omitempty" json:"deleted_at__asc,omitempty"`

	// NameEq SQL = operator
	NameEq *string `form:"name__eq,omitempty" json:"name__eq,omitempty"`

	// NameNe SQL != operator
	NameNe *string `form:"name__ne,omitempty" json:"name__ne,omitempty"`

	// NameGt SQL > operator, may not work with all column types
	NameGt *string `form:"name__gt,omitempty" json:"name__gt,omitempty"`

	// NameGte SQL >= operator, may not work with all column types
	NameGte *string `form:"name__gte,omitempty" json:"name__gte,omitempty"`

	// NameLt SQL < operator, may not work with all column types
	NameLt *string `form:"name__lt,omitempty" json:"name__lt,omitempty"`

	// NameLte SQL <= operator, may not work with all column types
	NameLte *string `form:"name__lte,omitempty" json:"name__lte,omitempty"`

	// NameIn SQL IN operator, permits comma-separated values
	NameIn *string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameNin SQL NOT IN operator, permits comma-separated values
	NameNin *string `form:"name__nin,omitempty" json:"name__nin,omitempty"`

	// NameNotin SQL NOT IN operator, permits comma-separated values
	NameNotin *string `form:"name__notin,omitempty" json:"name__notin,omitempty"`

	// NameIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	NameIsnull *string `form:"name__isnull,omitempty" json:"name__isnull,omitempty"`

	// NameNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	NameNisnull *string `form:"name__nisnull,omitempty" json:"name__nisnull,omitempty"`

	// NameIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	NameIsnotnull *string `form:"name__isnotnull,omitempty" json:"name__isnotnull,omitempty"`

	// NameL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	NameL *string `form:"name__l,omitempty" json:"name__l,omitempty"`

	// NameLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	NameLike *string `form:"name__like,omitempty" json:"name__like,omitempty"`

	// NameNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	NameNl *string `form:"name__nl,omitempty" json:"name__nl,omitempty"`

	// NameNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	NameNlike *string `form:"name__nlike,omitempty" json:"name__nlike,omitempty"`

	// NameNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	NameNotlike *string `form:"name__notlike,omitempty" json:"name__notlike,omitempty"`

	// NameIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	NameIl *string `form:"name__il,omitempty" json:"name__il,omitempty"`

	// NameIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	NameIlike *string `form:"name__ilike,omitempty" json:"name__ilike,omitempty"`

	// NameNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	NameNil *string `form:"name__nil,omitempty" json:"name__nil,omitempty"`

	// NameNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	NameNilike *string `form:"name__nilike,omitempty" json:"name__nilike,omitempty"`

	// NameNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	NameNotilike *string `form:"name__notilike,omitempty" json:"name__notilike,omitempty"`

	// NameDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	NameDesc *string `form:"name__desc,omitempty" json:"name__desc,omitempty"`

	// NameAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	NameAsc *string `form:"name__asc,omitempty" json:"name__asc,omitempty"`

	// StreamUrlEq SQL = operator
	StreamUrlEq *string `form:"stream_url__eq,omitempty" json:"stream_url__eq,omitempty"`

	// StreamUrlNe SQL != operator
	StreamUrlNe *string `form:"stream_url__ne,omitempty" json:"stream_url__ne,omitempty"`

	// StreamUrlGt SQL > operator, may not work with all column types
	StreamUrlGt *string `form:"stream_url__gt,omitempty" json:"stream_url__gt,omitempty"`

	// StreamUrlGte SQL >= operator, may not work with all column types
	StreamUrlGte *string `form:"stream_url__gte,omitempty" json:"stream_url__gte,omitempty"`

	// StreamUrlLt SQL < operator, may not work with all column types
	StreamUrlLt *string `form:"stream_url__lt,omitempty" json:"stream_url__lt,omitempty"`

	// StreamUrlLte SQL <= operator, may not work with all column types
	StreamUrlLte *string `form:"stream_url__lte,omitempty" json:"stream_url__lte,omitempty"`

	// StreamUrlIn SQL IN operator, permits comma-separated values
	StreamUrlIn *string `form:"stream_url__in,omitempty" json:"stream_url__in,omitempty"`

	// StreamUrlNin SQL NOT IN operator, permits comma-separated values
	StreamUrlNin *string `form:"stream_url__nin,omitempty" json:"stream_url__nin,omitempty"`

	// StreamUrlNotin SQL NOT IN operator, permits comma-separated values
	StreamUrlNotin *string `form:"stream_url__notin,omitempty" json:"stream_url__notin,omitempty"`

	// StreamUrlIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	StreamUrlIsnull *string `form:"stream_url__isnull,omitempty" json:"stream_url__isnull,omitempty"`

	// StreamUrlNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	StreamUrlNisnull *string `form:"stream_url__nisnull,omitempty" json:"stream_url__nisnull,omitempty"`

	// StreamUrlIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	StreamUrlIsnotnull *string `form:"stream_url__isnotnull,omitempty" json:"stream_url__isnotnull,omitempty"`

	// StreamUrlL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlL *string `form:"stream_url__l,omitempty" json:"stream_url__l,omitempty"`

	// StreamUrlLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlLike *string `form:"stream_url__like,omitempty" json:"stream_url__like,omitempty"`

	// StreamUrlNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlNl *string `form:"stream_url__nl,omitempty" json:"stream_url__nl,omitempty"`

	// StreamUrlNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlNlike *string `form:"stream_url__nlike,omitempty" json:"stream_url__nlike,omitempty"`

	// StreamUrlNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlNotlike *string `form:"stream_url__notlike,omitempty" json:"stream_url__notlike,omitempty"`

	// StreamUrlIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlIl *string `form:"stream_url__il,omitempty" json:"stream_url__il,omitempty"`

	// StreamUrlIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlIlike *string `form:"stream_url__ilike,omitempty" json:"stream_url__ilike,omitempty"`

	// StreamUrlNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlNil *string `form:"stream_url__nil,omitempty" json:"stream_url__nil,omitempty"`

	// StreamUrlNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlNilike *string `form:"stream_url__nilike,omitempty" json:"stream_url__nilike,omitempty"`

	// StreamUrlNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	StreamUrlNotilike *string `form:"stream_url__notilike,omitempty" json:"stream_url__notilike,omitempty"`

	// StreamUrlDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	StreamUrlDesc *string `form:"stream_url__desc,omitempty" json:"stream_url__desc,omitempty"`

	// StreamUrlAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	StreamUrlAsc *string `form:"stream_url__asc,omitempty" json:"stream_url__asc,omitempty"`

	// LastSeenEq SQL = operator
	LastSeenEq *time.Time `form:"last_seen__eq,omitempty" json:"last_seen__eq,omitempty"`

	// LastSeenNe SQL != operator
	LastSeenNe *time.Time `form:"last_seen__ne,omitempty" json:"last_seen__ne,omitempty"`

	// LastSeenGt SQL > operator, may not work with all column types
	LastSeenGt *time.Time `form:"last_seen__gt,omitempty" json:"last_seen__gt,omitempty"`

	// LastSeenGte SQL >= operator, may not work with all column types
	LastSeenGte *time.Time `form:"last_seen__gte,omitempty" json:"last_seen__gte,omitempty"`

	// LastSeenLt SQL < operator, may not work with all column types
	LastSeenLt *time.Time `form:"last_seen__lt,omitempty" json:"last_seen__lt,omitempty"`

	// LastSeenLte SQL <= operator, may not work with all column types
	LastSeenLte *time.Time `form:"last_seen__lte,omitempty" json:"last_seen__lte,omitempty"`

	// LastSeenIn SQL IN operator, permits comma-separated values
	LastSeenIn *time.Time `form:"last_seen__in,omitempty" json:"last_seen__in,omitempty"`

	// LastSeenNin SQL NOT IN operator, permits comma-separated values
	LastSeenNin *time.Time `form:"last_seen__nin,omitempty" json:"last_seen__nin,omitempty"`

	// LastSeenNotin SQL NOT IN operator, permits comma-separated values
	LastSeenNotin *time.Time `form:"last_seen__notin,omitempty" json:"last_seen__notin,omitempty"`

	// LastSeenIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	LastSeenIsnull *time.Time `form:"last_seen__isnull,omitempty" json:"last_seen__isnull,omitempty"`

	// LastSeenNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	LastSeenNisnull *time.Time `form:"last_seen__nisnull,omitempty" json:"last_seen__nisnull,omitempty"`

	// LastSeenIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	LastSeenIsnotnull *time.Time `form:"last_seen__isnotnull,omitempty" json:"last_seen__isnotnull,omitempty"`

	// LastSeenL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenL *time.Time `form:"last_seen__l,omitempty" json:"last_seen__l,omitempty"`

	// LastSeenLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenLike *time.Time `form:"last_seen__like,omitempty" json:"last_seen__like,omitempty"`

	// LastSeenNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenNl *time.Time `form:"last_seen__nl,omitempty" json:"last_seen__nl,omitempty"`

	// LastSeenNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenNlike *time.Time `form:"last_seen__nlike,omitempty" json:"last_seen__nlike,omitempty"`

	// LastSeenNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenNotlike *time.Time `form:"last_seen__notlike,omitempty" json:"last_seen__notlike,omitempty"`

	// LastSeenIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenIl *time.Time `form:"last_seen__il,omitempty" json:"last_seen__il,omitempty"`

	// LastSeenIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenIlike *time.Time `form:"last_seen__ilike,omitempty" json:"last_seen__ilike,omitempty"`

	// LastSeenNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenNil *time.Time `form:"last_seen__nil,omitempty" json:"last_seen__nil,omitempty"`

	// LastSeenNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenNilike *time.Time `form:"last_seen__nilike,omitempty" json:"last_seen__nilike,omitempty"`

	// LastSeenNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	LastSeenNotilike *time.Time `form:"last_seen__notilike,omitempty" json:"last_seen__notilike,omitempty"`

	// LastSeenDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	LastSeenDesc *time.Time `form:"last_seen__desc,omitempty" json:"last_seen__desc,omitempty"`

	// LastSeenAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	LastSeenAsc *time.Time `form:"last_seen__asc,omitempty" json:"last_seen__asc,omitempty"`
}

// PostCamerasJSONBody defines parameters for PostCameras.
type PostCamerasJSONBody = []Camera

// GetDetectionsParams defines parameters for GetDetections.
type GetDetectionsParams struct {
	// Limit SQL LIMIT operator
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset SQL OFFSET operator
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// IdEq SQL = operator
	IdEq *openapi_types.UUID `form:"id__eq,omitempty" json:"id__eq,omitempty"`

	// IdNe SQL != operator
	IdNe *openapi_types.UUID `form:"id__ne,omitempty" json:"id__ne,omitempty"`

	// IdGt SQL > operator, may not work with all column types
	IdGt *openapi_types.UUID `form:"id__gt,omitempty" json:"id__gt,omitempty"`

	// IdGte SQL >= operator, may not work with all column types
	IdGte *openapi_types.UUID `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdLt SQL < operator, may not work with all column types
	IdLt *openapi_types.UUID `form:"id__lt,omitempty" json:"id__lt,omitempty"`

	// IdLte SQL <= operator, may not work with all column types
	IdLte *openapi_types.UUID `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// IdIn SQL IN operator, permits comma-separated values
	IdIn *openapi_types.UUID `form:"id__in,omitempty" json:"id__in,omitempty"`

	// IdNin SQL NOT IN operator, permits comma-separated values
	IdNin *openapi_types.UUID `form:"id__nin,omitempty" json:"id__nin,omitempty"`

	// IdNotin SQL NOT IN operator, permits comma-separated values
	IdNotin *openapi_types.UUID `form:"id__notin,omitempty" json:"id__notin,omitempty"`

	// IdIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	IdIsnull *openapi_types.UUID `form:"id__isnull,omitempty" json:"id__isnull,omitempty"`

	// IdNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	IdNisnull *openapi_types.UUID `form:"id__nisnull,omitempty" json:"id__nisnull,omitempty"`

	// IdIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	IdIsnotnull *openapi_types.UUID `form:"id__isnotnull,omitempty" json:"id__isnotnull,omitempty"`

	// IdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdL *openapi_types.UUID `form:"id__l,omitempty" json:"id__l,omitempty"`

	// IdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdLike *openapi_types.UUID `form:"id__like,omitempty" json:"id__like,omitempty"`

	// IdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNl *openapi_types.UUID `form:"id__nl,omitempty" json:"id__nl,omitempty"`

	// IdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNlike *openapi_types.UUID `form:"id__nlike,omitempty" json:"id__nlike,omitempty"`

	// IdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNotlike *openapi_types.UUID `form:"id__notlike,omitempty" json:"id__notlike,omitempty"`

	// IdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIl *openapi_types.UUID `form:"id__il,omitempty" json:"id__il,omitempty"`

	// IdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIlike *openapi_types.UUID `form:"id__ilike,omitempty" json:"id__ilike,omitempty"`

	// IdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNil *openapi_types.UUID `form:"id__nil,omitempty" json:"id__nil,omitempty"`

	// IdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNilike *openapi_types.UUID `form:"id__nilike,omitempty" json:"id__nilike,omitempty"`

	// IdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNotilike *openapi_types.UUID `form:"id__notilike,omitempty" json:"id__notilike,omitempty"`

	// IdDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	IdDesc *openapi_types.UUID `form:"id__desc,omitempty" json:"id__desc,omitempty"`

	// IdAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	IdAsc *openapi_types.UUID `form:"id__asc,omitempty" json:"id__asc,omitempty"`

	// CreatedAtEq SQL = operator
	CreatedAtEq *time.Time `form:"created_at__eq,omitempty" json:"created_at__eq,omitempty"`

	// CreatedAtNe SQL != operator
	CreatedAtNe *time.Time `form:"created_at__ne,omitempty" json:"created_at__ne,omitempty"`

	// CreatedAtGt SQL > operator, may not work with all column types
	CreatedAtGt *time.Time `form:"created_at__gt,omitempty" json:"created_at__gt,omitempty"`

	// CreatedAtGte SQL >= operator, may not work with all column types
	CreatedAtGte *time.Time `form:"created_at__gte,omitempty" json:"created_at__gte,omitempty"`

	// CreatedAtLt SQL < operator, may not work with all column types
	CreatedAtLt *time.Time `form:"created_at__lt,omitempty" json:"created_at__lt,omitempty"`

	// CreatedAtLte SQL <= operator, may not work with all column types
	CreatedAtLte *time.Time `form:"created_at__lte,omitempty" json:"created_at__lte,omitempty"`

	// CreatedAtIn SQL IN operator, permits comma-separated values
	CreatedAtIn *time.Time `form:"created_at__in,omitempty" json:"created_at__in,omitempty"`

	// CreatedAtNin SQL NOT IN operator, permits comma-separated values
	CreatedAtNin *time.Time `form:"created_at__nin,omitempty" json:"created_at__nin,omitempty"`

	// CreatedAtNotin SQL NOT IN operator, permits comma-separated values
	CreatedAtNotin *time.Time `form:"created_at__notin,omitempty" json:"created_at__notin,omitempty"`

	// CreatedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	CreatedAtIsnull *time.Time `form:"created_at__isnull,omitempty" json:"created_at__isnull,omitempty"`

	// CreatedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CreatedAtNisnull *time.Time `form:"created_at__nisnull,omitempty" json:"created_at__nisnull,omitempty"`

	// CreatedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CreatedAtIsnotnull *time.Time `form:"created_at__isnotnull,omitempty" json:"created_at__isnotnull,omitempty"`

	// CreatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtL *time.Time `form:"created_at__l,omitempty" json:"created_at__l,omitempty"`

	// CreatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtLike *time.Time `form:"created_at__like,omitempty" json:"created_at__like,omitempty"`

	// CreatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNl *time.Time `form:"created_at__nl,omitempty" json:"created_at__nl,omitempty"`

	// CreatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNlike *time.Time `form:"created_at__nlike,omitempty" json:"created_at__nlike,omitempty"`

	// CreatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotlike *time.Time `form:"created_at__notlike,omitempty" json:"created_at__notlike,omitempty"`

	// CreatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIl *time.Time `form:"created_at__il,omitempty" json:"created_at__il,omitempty"`

	// CreatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIlike *time.Time `form:"created_at__ilike,omitempty" json:"created_at__ilike,omitempty"`

	// CreatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNil *time.Time `form:"created_at__nil,omitempty" json:"created_at__nil,omitempty"`

	// CreatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNilike *time.Time `form:"created_at__nilike,omitempty" json:"created_at__nilike,omitempty"`

	// CreatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotilike *time.Time `form:"created_at__notilike,omitempty" json:"created_at__notilike,omitempty"`

	// CreatedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	CreatedAtDesc *time.Time `form:"created_at__desc,omitempty" json:"created_at__desc,omitempty"`

	// CreatedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	CreatedAtAsc *time.Time `form:"created_at__asc,omitempty" json:"created_at__asc,omitempty"`

	// UpdatedAtEq SQL = operator
	UpdatedAtEq *time.Time `form:"updated_at__eq,omitempty" json:"updated_at__eq,omitempty"`

	// UpdatedAtNe SQL != operator
	UpdatedAtNe *time.Time `form:"updated_at__ne,omitempty" json:"updated_at__ne,omitempty"`

	// UpdatedAtGt SQL > operator, may not work with all column types
	UpdatedAtGt *time.Time `form:"updated_at__gt,omitempty" json:"updated_at__gt,omitempty"`

	// UpdatedAtGte SQL >= operator, may not work with all column types
	UpdatedAtGte *time.Time `form:"updated_at__gte,omitempty" json:"updated_at__gte,omitempty"`

	// UpdatedAtLt SQL < operator, may not work with all column types
	UpdatedAtLt *time.Time `form:"updated_at__lt,omitempty" json:"updated_at__lt,omitempty"`

	// UpdatedAtLte SQL <= operator, may not work with all column types
	UpdatedAtLte *time.Time `form:"updated_at__lte,omitempty" json:"updated_at__lte,omitempty"`

	// UpdatedAtIn SQL IN operator, permits comma-separated values
	UpdatedAtIn *time.Time `form:"updated_at__in,omitempty" json:"updated_at__in,omitempty"`

	// UpdatedAtNin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNin *time.Time `form:"updated_at__nin,omitempty" json:"updated_at__nin,omitempty"`

	// UpdatedAtNotin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNotin *time.Time `form:"updated_at__notin,omitempty" json:"updated_at__notin,omitempty"`

	// UpdatedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	UpdatedAtIsnull *time.Time `form:"updated_at__isnull,omitempty" json:"updated_at__isnull,omitempty"`

	// UpdatedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	UpdatedAtNisnull *time.Time `form:"updated_at__nisnull,omitempty" json:"updated_at__nisnull,omitempty"`

	// UpdatedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	UpdatedAtIsnotnull *time.Time `form:"updated_at__isnotnull,omitempty" json:"updated_at__isnotnull,omitempty"`

	// UpdatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtL *time.Time `form:"updated_at__l,omitempty" json:"updated_at__l,omitempty"`

	// UpdatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtLike *time.Time `form:"updated_at__like,omitempty" json:"updated_at__like,omitempty"`

	// UpdatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNl *time.Time `form:"updated_at__nl,omitempty" json:"updated_at__nl,omitempty"`

	// UpdatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNlike *time.Time `form:"updated_at__nlike,omitempty" json:"updated_at__nlike,omitempty"`

	// UpdatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotlike *time.Time `form:"updated_at__notlike,omitempty" json:"updated_at__notlike,omitempty"`

	// UpdatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIl *time.Time `form:"updated_at__il,omitempty" json:"updated_at__il,omitempty"`

	// UpdatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIlike *time.Time `form:"updated_at__ilike,omitempty" json:"updated_at__ilike,omitempty"`

	// UpdatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNil *time.Time `form:"updated_at__nil,omitempty" json:"updated_at__nil,omitempty"`

	// UpdatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNilike *time.Time `form:"updated_at__nilike,omitempty" json:"updated_at__nilike,omitempty"`

	// UpdatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotilike *time.Time `form:"updated_at__notilike,omitempty" json:"updated_at__notilike,omitempty"`

	// UpdatedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	UpdatedAtDesc *time.Time `form:"updated_at__desc,omitempty" json:"updated_at__desc,omitempty"`

	// UpdatedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	UpdatedAtAsc *time.Time `form:"updated_at__asc,omitempty" json:"updated_at__asc,omitempty"`

	// DeletedAtEq SQL = operator
	DeletedAtEq *time.Time `form:"deleted_at__eq,omitempty" json:"deleted_at__eq,omitempty"`

	// DeletedAtNe SQL != operator
	DeletedAtNe *time.Time `form:"deleted_at__ne,omitempty" json:"deleted_at__ne,omitempty"`

	// DeletedAtGt SQL > operator, may not work with all column types
	DeletedAtGt *time.Time `form:"deleted_at__gt,omitempty" json:"deleted_at__gt,omitempty"`

	// DeletedAtGte SQL >= operator, may not work with all column types
	DeletedAtGte *time.Time `form:"deleted_at__gte,omitempty" json:"deleted_at__gte,omitempty"`

	// DeletedAtLt SQL < operator, may not work with all column types
	DeletedAtLt *time.Time `form:"deleted_at__lt,omitempty" json:"deleted_at__lt,omitempty"`

	// DeletedAtLte SQL <= operator, may not work with all column types
	DeletedAtLte *time.Time `form:"deleted_at__lte,omitempty" json:"deleted_at__lte,omitempty"`

	// DeletedAtIn SQL IN operator, permits comma-separated values
	DeletedAtIn *time.Time `form:"deleted_at__in,omitempty" json:"deleted_at__in,omitempty"`

	// DeletedAtNin SQL NOT IN operator, permits comma-separated values
	DeletedAtNin *time.Time `form:"deleted_at__nin,omitempty" json:"deleted_at__nin,omitempty"`

	// DeletedAtNotin SQL NOT IN operator, permits comma-separated values
	DeletedAtNotin *time.Time `form:"deleted_at__notin,omitempty" json:"deleted_at__notin,omitempty"`

	// DeletedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	DeletedAtIsnull *time.Time `form:"deleted_at__isnull,omitempty" json:"deleted_at__isnull,omitempty"`

	// DeletedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	DeletedAtNisnull *time.Time `form:"deleted_at__nisnull,omitempty" json:"deleted_at__nisnull,omitempty"`

	// DeletedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	DeletedAtIsnotnull *time.Time `form:"deleted_at__isnotnull,omitempty" json:"deleted_at__isnotnull,omitempty"`

	// DeletedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtL *time.Time `form:"deleted_at__l,omitempty" json:"deleted_at__l,omitempty"`

	// DeletedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtLike *time.Time `form:"deleted_at__like,omitempty" json:"deleted_at__like,omitempty"`

	// DeletedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNl *time.Time `form:"deleted_at__nl,omitempty" json:"deleted_at__nl,omitempty"`

	// DeletedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNlike *time.Time `form:"deleted_at__nlike,omitempty" json:"deleted_at__nlike,omitempty"`

	// DeletedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotlike *time.Time `form:"deleted_at__notlike,omitempty" json:"deleted_at__notlike,omitempty"`

	// DeletedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIl *time.Time `form:"deleted_at__il,omitempty" json:"deleted_at__il,omitempty"`

	// DeletedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIlike *time.Time `form:"deleted_at__ilike,omitempty" json:"deleted_at__ilike,omitempty"`

	// DeletedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNil *time.Time `form:"deleted_at__nil,omitempty" json:"deleted_at__nil,omitempty"`

	// DeletedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNilike *time.Time `form:"deleted_at__nilike,omitempty" json:"deleted_at__nilike,omitempty"`

	// DeletedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotilike *time.Time `form:"deleted_at__notilike,omitempty" json:"deleted_at__notilike,omitempty"`

	// DeletedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	DeletedAtDesc *time.Time `form:"deleted_at__desc,omitempty" json:"deleted_at__desc,omitempty"`

	// DeletedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	DeletedAtAsc *time.Time `form:"deleted_at__asc,omitempty" json:"deleted_at__asc,omitempty"`

	// SeenAtEq SQL = operator
	SeenAtEq *time.Time `form:"seen_at__eq,omitempty" json:"seen_at__eq,omitempty"`

	// SeenAtNe SQL != operator
	SeenAtNe *time.Time `form:"seen_at__ne,omitempty" json:"seen_at__ne,omitempty"`

	// SeenAtGt SQL > operator, may not work with all column types
	SeenAtGt *time.Time `form:"seen_at__gt,omitempty" json:"seen_at__gt,omitempty"`

	// SeenAtGte SQL >= operator, may not work with all column types
	SeenAtGte *time.Time `form:"seen_at__gte,omitempty" json:"seen_at__gte,omitempty"`

	// SeenAtLt SQL < operator, may not work with all column types
	SeenAtLt *time.Time `form:"seen_at__lt,omitempty" json:"seen_at__lt,omitempty"`

	// SeenAtLte SQL <= operator, may not work with all column types
	SeenAtLte *time.Time `form:"seen_at__lte,omitempty" json:"seen_at__lte,omitempty"`

	// SeenAtIn SQL IN operator, permits comma-separated values
	SeenAtIn *time.Time `form:"seen_at__in,omitempty" json:"seen_at__in,omitempty"`

	// SeenAtNin SQL NOT IN operator, permits comma-separated values
	SeenAtNin *time.Time `form:"seen_at__nin,omitempty" json:"seen_at__nin,omitempty"`

	// SeenAtNotin SQL NOT IN operator, permits comma-separated values
	SeenAtNotin *time.Time `form:"seen_at__notin,omitempty" json:"seen_at__notin,omitempty"`

	// SeenAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	SeenAtIsnull *time.Time `form:"seen_at__isnull,omitempty" json:"seen_at__isnull,omitempty"`

	// SeenAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	SeenAtNisnull *time.Time `form:"seen_at__nisnull,omitempty" json:"seen_at__nisnull,omitempty"`

	// SeenAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	SeenAtIsnotnull *time.Time `form:"seen_at__isnotnull,omitempty" json:"seen_at__isnotnull,omitempty"`

	// SeenAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtL *time.Time `form:"seen_at__l,omitempty" json:"seen_at__l,omitempty"`

	// SeenAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtLike *time.Time `form:"seen_at__like,omitempty" json:"seen_at__like,omitempty"`

	// SeenAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtNl *time.Time `form:"seen_at__nl,omitempty" json:"seen_at__nl,omitempty"`

	// SeenAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtNlike *time.Time `form:"seen_at__nlike,omitempty" json:"seen_at__nlike,omitempty"`

	// SeenAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtNotlike *time.Time `form:"seen_at__notlike,omitempty" json:"seen_at__notlike,omitempty"`

	// SeenAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtIl *time.Time `form:"seen_at__il,omitempty" json:"seen_at__il,omitempty"`

	// SeenAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtIlike *time.Time `form:"seen_at__ilike,omitempty" json:"seen_at__ilike,omitempty"`

	// SeenAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtNil *time.Time `form:"seen_at__nil,omitempty" json:"seen_at__nil,omitempty"`

	// SeenAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtNilike *time.Time `form:"seen_at__nilike,omitempty" json:"seen_at__nilike,omitempty"`

	// SeenAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	SeenAtNotilike *time.Time `form:"seen_at__notilike,omitempty" json:"seen_at__notilike,omitempty"`

	// SeenAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	SeenAtDesc *time.Time `form:"seen_at__desc,omitempty" json:"seen_at__desc,omitempty"`

	// SeenAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	SeenAtAsc *time.Time `form:"seen_at__asc,omitempty" json:"seen_at__asc,omitempty"`

	// ClassIdEq SQL = operator
	ClassIdEq *int64 `form:"class_id__eq,omitempty" json:"class_id__eq,omitempty"`

	// ClassIdNe SQL != operator
	ClassIdNe *int64 `form:"class_id__ne,omitempty" json:"class_id__ne,omitempty"`

	// ClassIdGt SQL > operator, may not work with all column types
	ClassIdGt *int64 `form:"class_id__gt,omitempty" json:"class_id__gt,omitempty"`

	// ClassIdGte SQL >= operator, may not work with all column types
	ClassIdGte *int64 `form:"class_id__gte,omitempty" json:"class_id__gte,omitempty"`

	// ClassIdLt SQL < operator, may not work with all column types
	ClassIdLt *int64 `form:"class_id__lt,omitempty" json:"class_id__lt,omitempty"`

	// ClassIdLte SQL <= operator, may not work with all column types
	ClassIdLte *int64 `form:"class_id__lte,omitempty" json:"class_id__lte,omitempty"`

	// ClassIdIn SQL IN operator, permits comma-separated values
	ClassIdIn *int64 `form:"class_id__in,omitempty" json:"class_id__in,omitempty"`

	// ClassIdNin SQL NOT IN operator, permits comma-separated values
	ClassIdNin *int64 `form:"class_id__nin,omitempty" json:"class_id__nin,omitempty"`

	// ClassIdNotin SQL NOT IN operator, permits comma-separated values
	ClassIdNotin *int64 `form:"class_id__notin,omitempty" json:"class_id__notin,omitempty"`

	// ClassIdIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	ClassIdIsnull *int64 `form:"class_id__isnull,omitempty" json:"class_id__isnull,omitempty"`

	// ClassIdNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	ClassIdNisnull *int64 `form:"class_id__nisnull,omitempty" json:"class_id__nisnull,omitempty"`

	// ClassIdIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	ClassIdIsnotnull *int64 `form:"class_id__isnotnull,omitempty" json:"class_id__isnotnull,omitempty"`

	// ClassIdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdL *int64 `form:"class_id__l,omitempty" json:"class_id__l,omitempty"`

	// ClassIdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdLike *int64 `form:"class_id__like,omitempty" json:"class_id__like,omitempty"`

	// ClassIdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdNl *int64 `form:"class_id__nl,omitempty" json:"class_id__nl,omitempty"`

	// ClassIdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdNlike *int64 `form:"class_id__nlike,omitempty" json:"class_id__nlike,omitempty"`

	// ClassIdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdNotlike *int64 `form:"class_id__notlike,omitempty" json:"class_id__notlike,omitempty"`

	// ClassIdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdIl *int64 `form:"class_id__il,omitempty" json:"class_id__il,omitempty"`

	// ClassIdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdIlike *int64 `form:"class_id__ilike,omitempty" json:"class_id__ilike,omitempty"`

	// ClassIdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdNil *int64 `form:"class_id__nil,omitempty" json:"class_id__nil,omitempty"`

	// ClassIdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdNilike *int64 `form:"class_id__nilike,omitempty" json:"class_id__nilike,omitempty"`

	// ClassIdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassIdNotilike *int64 `form:"class_id__notilike,omitempty" json:"class_id__notilike,omitempty"`

	// ClassIdDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	ClassIdDesc *int64 `form:"class_id__desc,omitempty" json:"class_id__desc,omitempty"`

	// ClassIdAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	ClassIdAsc *int64 `form:"class_id__asc,omitempty" json:"class_id__asc,omitempty"`

	// ClassNameEq SQL = operator
	ClassNameEq *string `form:"class_name__eq,omitempty" json:"class_name__eq,omitempty"`

	// ClassNameNe SQL != operator
	ClassNameNe *string `form:"class_name__ne,omitempty" json:"class_name__ne,omitempty"`

	// ClassNameGt SQL > operator, may not work with all column types
	ClassNameGt *string `form:"class_name__gt,omitempty" json:"class_name__gt,omitempty"`

	// ClassNameGte SQL >= operator, may not work with all column types
	ClassNameGte *string `form:"class_name__gte,omitempty" json:"class_name__gte,omitempty"`

	// ClassNameLt SQL < operator, may not work with all column types
	ClassNameLt *string `form:"class_name__lt,omitempty" json:"class_name__lt,omitempty"`

	// ClassNameLte SQL <= operator, may not work with all column types
	ClassNameLte *string `form:"class_name__lte,omitempty" json:"class_name__lte,omitempty"`

	// ClassNameIn SQL IN operator, permits comma-separated values
	ClassNameIn *string `form:"class_name__in,omitempty" json:"class_name__in,omitempty"`

	// ClassNameNin SQL NOT IN operator, permits comma-separated values
	ClassNameNin *string `form:"class_name__nin,omitempty" json:"class_name__nin,omitempty"`

	// ClassNameNotin SQL NOT IN operator, permits comma-separated values
	ClassNameNotin *string `form:"class_name__notin,omitempty" json:"class_name__notin,omitempty"`

	// ClassNameIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	ClassNameIsnull *string `form:"class_name__isnull,omitempty" json:"class_name__isnull,omitempty"`

	// ClassNameNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	ClassNameNisnull *string `form:"class_name__nisnull,omitempty" json:"class_name__nisnull,omitempty"`

	// ClassNameIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	ClassNameIsnotnull *string `form:"class_name__isnotnull,omitempty" json:"class_name__isnotnull,omitempty"`

	// ClassNameL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameL *string `form:"class_name__l,omitempty" json:"class_name__l,omitempty"`

	// ClassNameLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameLike *string `form:"class_name__like,omitempty" json:"class_name__like,omitempty"`

	// ClassNameNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameNl *string `form:"class_name__nl,omitempty" json:"class_name__nl,omitempty"`

	// ClassNameNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameNlike *string `form:"class_name__nlike,omitempty" json:"class_name__nlike,omitempty"`

	// ClassNameNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameNotlike *string `form:"class_name__notlike,omitempty" json:"class_name__notlike,omitempty"`

	// ClassNameIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameIl *string `form:"class_name__il,omitempty" json:"class_name__il,omitempty"`

	// ClassNameIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameIlike *string `form:"class_name__ilike,omitempty" json:"class_name__ilike,omitempty"`

	// ClassNameNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameNil *string `form:"class_name__nil,omitempty" json:"class_name__nil,omitempty"`

	// ClassNameNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameNilike *string `form:"class_name__nilike,omitempty" json:"class_name__nilike,omitempty"`

	// ClassNameNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ClassNameNotilike *string `form:"class_name__notilike,omitempty" json:"class_name__notilike,omitempty"`

	// ClassNameDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	ClassNameDesc *string `form:"class_name__desc,omitempty" json:"class_name__desc,omitempty"`

	// ClassNameAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	ClassNameAsc *string `form:"class_name__asc,omitempty" json:"class_name__asc,omitempty"`

	// ScoreEq SQL = operator
	ScoreEq *float64 `form:"score__eq,omitempty" json:"score__eq,omitempty"`

	// ScoreNe SQL != operator
	ScoreNe *float64 `form:"score__ne,omitempty" json:"score__ne,omitempty"`

	// ScoreGt SQL > operator, may not work with all column types
	ScoreGt *float64 `form:"score__gt,omitempty" json:"score__gt,omitempty"`

	// ScoreGte SQL >= operator, may not work with all column types
	ScoreGte *float64 `form:"score__gte,omitempty" json:"score__gte,omitempty"`

	// ScoreLt SQL < operator, may not work with all column types
	ScoreLt *float64 `form:"score__lt,omitempty" json:"score__lt,omitempty"`

	// ScoreLte SQL <= operator, may not work with all column types
	ScoreLte *float64 `form:"score__lte,omitempty" json:"score__lte,omitempty"`

	// ScoreIn SQL IN operator, permits comma-separated values
	ScoreIn *float64 `form:"score__in,omitempty" json:"score__in,omitempty"`

	// ScoreNin SQL NOT IN operator, permits comma-separated values
	ScoreNin *float64 `form:"score__nin,omitempty" json:"score__nin,omitempty"`

	// ScoreNotin SQL NOT IN operator, permits comma-separated values
	ScoreNotin *float64 `form:"score__notin,omitempty" json:"score__notin,omitempty"`

	// ScoreIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	ScoreIsnull *float64 `form:"score__isnull,omitempty" json:"score__isnull,omitempty"`

	// ScoreNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	ScoreNisnull *float64 `form:"score__nisnull,omitempty" json:"score__nisnull,omitempty"`

	// ScoreIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	ScoreIsnotnull *float64 `form:"score__isnotnull,omitempty" json:"score__isnotnull,omitempty"`

	// ScoreL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ScoreL *float64 `form:"score__l,omitempty" json:"score__l,omitempty"`

	// ScoreLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ScoreLike *float64 `form:"score__like,omitempty" json:"score__like,omitempty"`

	// ScoreNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ScoreNl *float64 `form:"score__nl,omitempty" json:"score__nl,omitempty"`

	// ScoreNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ScoreNlike *float64 `form:"score__nlike,omitempty" json:"score__nlike,omitempty"`

	// ScoreNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ScoreNotlike *float64 `form:"score__notlike,omitempty" json:"score__notlike,omitempty"`

	// ScoreIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ScoreIl *float64 `form:"score__il,omitempty" json:"score__il,omitempty"`

	// ScoreIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ScoreIlike *float64 `form:"score__ilike,omitempty" json:"score__ilike,omitempty"`

	// ScoreNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ScoreNil *float64 `form:"score__nil,omitempty" json:"score__nil,omitempty"`

	// ScoreNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ScoreNilike *float64 `form:"score__nilike,omitempty" json:"score__nilike,omitempty"`

	// ScoreNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ScoreNotilike *float64 `form:"score__notilike,omitempty" json:"score__notilike,omitempty"`

	// ScoreDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	ScoreDesc *float64 `form:"score__desc,omitempty" json:"score__desc,omitempty"`

	// ScoreAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	ScoreAsc *float64 `form:"score__asc,omitempty" json:"score__asc,omitempty"`

	// CameraIdEq SQL = operator
	CameraIdEq *openapi_types.UUID `form:"camera_id__eq,omitempty" json:"camera_id__eq,omitempty"`

	// CameraIdNe SQL != operator
	CameraIdNe *openapi_types.UUID `form:"camera_id__ne,omitempty" json:"camera_id__ne,omitempty"`

	// CameraIdGt SQL > operator, may not work with all column types
	CameraIdGt *openapi_types.UUID `form:"camera_id__gt,omitempty" json:"camera_id__gt,omitempty"`

	// CameraIdGte SQL >= operator, may not work with all column types
	CameraIdGte *openapi_types.UUID `form:"camera_id__gte,omitempty" json:"camera_id__gte,omitempty"`

	// CameraIdLt SQL < operator, may not work with all column types
	CameraIdLt *openapi_types.UUID `form:"camera_id__lt,omitempty" json:"camera_id__lt,omitempty"`

	// CameraIdLte SQL <= operator, may not work with all column types
	CameraIdLte *openapi_types.UUID `form:"camera_id__lte,omitempty" json:"camera_id__lte,omitempty"`

	// CameraIdIn SQL IN operator, permits comma-separated values
	CameraIdIn *openapi_types.UUID `form:"camera_id__in,omitempty" json:"camera_id__in,omitempty"`

	// CameraIdNin SQL NOT IN operator, permits comma-separated values
	CameraIdNin *openapi_types.UUID `form:"camera_id__nin,omitempty" json:"camera_id__nin,omitempty"`

	// CameraIdNotin SQL NOT IN operator, permits comma-separated values
	CameraIdNotin *openapi_types.UUID `form:"camera_id__notin,omitempty" json:"camera_id__notin,omitempty"`

	// CameraIdIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	CameraIdIsnull *openapi_types.UUID `form:"camera_id__isnull,omitempty" json:"camera_id__isnull,omitempty"`

	// CameraIdNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CameraIdNisnull *openapi_types.UUID `form:"camera_id__nisnull,omitempty" json:"camera_id__nisnull,omitempty"`

	// CameraIdIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CameraIdIsnotnull *openapi_types.UUID `form:"camera_id__isnotnull,omitempty" json:"camera_id__isnotnull,omitempty"`

	// CameraIdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdL *openapi_types.UUID `form:"camera_id__l,omitempty" json:"camera_id__l,omitempty"`

	// CameraIdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdLike *openapi_types.UUID `form:"camera_id__like,omitempty" json:"camera_id__like,omitempty"`

	// CameraIdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNl *openapi_types.UUID `form:"camera_id__nl,omitempty" json:"camera_id__nl,omitempty"`

	// CameraIdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNlike *openapi_types.UUID `form:"camera_id__nlike,omitempty" json:"camera_id__nlike,omitempty"`

	// CameraIdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNotlike *openapi_types.UUID `form:"camera_id__notlike,omitempty" json:"camera_id__notlike,omitempty"`

	// CameraIdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdIl *openapi_types.UUID `form:"camera_id__il,omitempty" json:"camera_id__il,omitempty"`

	// CameraIdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdIlike *openapi_types.UUID `form:"camera_id__ilike,omitempty" json:"camera_id__ilike,omitempty"`

	// CameraIdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNil *openapi_types.UUID `form:"camera_id__nil,omitempty" json:"camera_id__nil,omitempty"`

	// CameraIdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNilike *openapi_types.UUID `form:"camera_id__nilike,omitempty" json:"camera_id__nilike,omitempty"`

	// CameraIdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNotilike *openapi_types.UUID `form:"camera_id__notilike,omitempty" json:"camera_id__notilike,omitempty"`

	// CameraIdDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	CameraIdDesc *openapi_types.UUID `form:"camera_id__desc,omitempty" json:"camera_id__desc,omitempty"`

	// CameraIdAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	CameraIdAsc *openapi_types.UUID `form:"camera_id__asc,omitempty" json:"camera_id__asc,omitempty"`
}

// PostDetectionsJSONBody defines parameters for PostDetections.
type PostDetectionsJSONBody = []Detection

// GetVideosParams defines parameters for GetVideos.
type GetVideosParams struct {
	// Limit SQL LIMIT operator
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset SQL OFFSET operator
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// IdEq SQL = operator
	IdEq *openapi_types.UUID `form:"id__eq,omitempty" json:"id__eq,omitempty"`

	// IdNe SQL != operator
	IdNe *openapi_types.UUID `form:"id__ne,omitempty" json:"id__ne,omitempty"`

	// IdGt SQL > operator, may not work with all column types
	IdGt *openapi_types.UUID `form:"id__gt,omitempty" json:"id__gt,omitempty"`

	// IdGte SQL >= operator, may not work with all column types
	IdGte *openapi_types.UUID `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdLt SQL < operator, may not work with all column types
	IdLt *openapi_types.UUID `form:"id__lt,omitempty" json:"id__lt,omitempty"`

	// IdLte SQL <= operator, may not work with all column types
	IdLte *openapi_types.UUID `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// IdIn SQL IN operator, permits comma-separated values
	IdIn *openapi_types.UUID `form:"id__in,omitempty" json:"id__in,omitempty"`

	// IdNin SQL NOT IN operator, permits comma-separated values
	IdNin *openapi_types.UUID `form:"id__nin,omitempty" json:"id__nin,omitempty"`

	// IdNotin SQL NOT IN operator, permits comma-separated values
	IdNotin *openapi_types.UUID `form:"id__notin,omitempty" json:"id__notin,omitempty"`

	// IdIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	IdIsnull *openapi_types.UUID `form:"id__isnull,omitempty" json:"id__isnull,omitempty"`

	// IdNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	IdNisnull *openapi_types.UUID `form:"id__nisnull,omitempty" json:"id__nisnull,omitempty"`

	// IdIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	IdIsnotnull *openapi_types.UUID `form:"id__isnotnull,omitempty" json:"id__isnotnull,omitempty"`

	// IdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdL *openapi_types.UUID `form:"id__l,omitempty" json:"id__l,omitempty"`

	// IdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdLike *openapi_types.UUID `form:"id__like,omitempty" json:"id__like,omitempty"`

	// IdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNl *openapi_types.UUID `form:"id__nl,omitempty" json:"id__nl,omitempty"`

	// IdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNlike *openapi_types.UUID `form:"id__nlike,omitempty" json:"id__nlike,omitempty"`

	// IdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNotlike *openapi_types.UUID `form:"id__notlike,omitempty" json:"id__notlike,omitempty"`

	// IdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIl *openapi_types.UUID `form:"id__il,omitempty" json:"id__il,omitempty"`

	// IdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIlike *openapi_types.UUID `form:"id__ilike,omitempty" json:"id__ilike,omitempty"`

	// IdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNil *openapi_types.UUID `form:"id__nil,omitempty" json:"id__nil,omitempty"`

	// IdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNilike *openapi_types.UUID `form:"id__nilike,omitempty" json:"id__nilike,omitempty"`

	// IdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNotilike *openapi_types.UUID `form:"id__notilike,omitempty" json:"id__notilike,omitempty"`

	// IdDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	IdDesc *openapi_types.UUID `form:"id__desc,omitempty" json:"id__desc,omitempty"`

	// IdAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	IdAsc *openapi_types.UUID `form:"id__asc,omitempty" json:"id__asc,omitempty"`

	// CreatedAtEq SQL = operator
	CreatedAtEq *time.Time `form:"created_at__eq,omitempty" json:"created_at__eq,omitempty"`

	// CreatedAtNe SQL != operator
	CreatedAtNe *time.Time `form:"created_at__ne,omitempty" json:"created_at__ne,omitempty"`

	// CreatedAtGt SQL > operator, may not work with all column types
	CreatedAtGt *time.Time `form:"created_at__gt,omitempty" json:"created_at__gt,omitempty"`

	// CreatedAtGte SQL >= operator, may not work with all column types
	CreatedAtGte *time.Time `form:"created_at__gte,omitempty" json:"created_at__gte,omitempty"`

	// CreatedAtLt SQL < operator, may not work with all column types
	CreatedAtLt *time.Time `form:"created_at__lt,omitempty" json:"created_at__lt,omitempty"`

	// CreatedAtLte SQL <= operator, may not work with all column types
	CreatedAtLte *time.Time `form:"created_at__lte,omitempty" json:"created_at__lte,omitempty"`

	// CreatedAtIn SQL IN operator, permits comma-separated values
	CreatedAtIn *time.Time `form:"created_at__in,omitempty" json:"created_at__in,omitempty"`

	// CreatedAtNin SQL NOT IN operator, permits comma-separated values
	CreatedAtNin *time.Time `form:"created_at__nin,omitempty" json:"created_at__nin,omitempty"`

	// CreatedAtNotin SQL NOT IN operator, permits comma-separated values
	CreatedAtNotin *time.Time `form:"created_at__notin,omitempty" json:"created_at__notin,omitempty"`

	// CreatedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	CreatedAtIsnull *time.Time `form:"created_at__isnull,omitempty" json:"created_at__isnull,omitempty"`

	// CreatedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CreatedAtNisnull *time.Time `form:"created_at__nisnull,omitempty" json:"created_at__nisnull,omitempty"`

	// CreatedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CreatedAtIsnotnull *time.Time `form:"created_at__isnotnull,omitempty" json:"created_at__isnotnull,omitempty"`

	// CreatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtL *time.Time `form:"created_at__l,omitempty" json:"created_at__l,omitempty"`

	// CreatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtLike *time.Time `form:"created_at__like,omitempty" json:"created_at__like,omitempty"`

	// CreatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNl *time.Time `form:"created_at__nl,omitempty" json:"created_at__nl,omitempty"`

	// CreatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNlike *time.Time `form:"created_at__nlike,omitempty" json:"created_at__nlike,omitempty"`

	// CreatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotlike *time.Time `form:"created_at__notlike,omitempty" json:"created_at__notlike,omitempty"`

	// CreatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIl *time.Time `form:"created_at__il,omitempty" json:"created_at__il,omitempty"`

	// CreatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIlike *time.Time `form:"created_at__ilike,omitempty" json:"created_at__ilike,omitempty"`

	// CreatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNil *time.Time `form:"created_at__nil,omitempty" json:"created_at__nil,omitempty"`

	// CreatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNilike *time.Time `form:"created_at__nilike,omitempty" json:"created_at__nilike,omitempty"`

	// CreatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotilike *time.Time `form:"created_at__notilike,omitempty" json:"created_at__notilike,omitempty"`

	// CreatedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	CreatedAtDesc *time.Time `form:"created_at__desc,omitempty" json:"created_at__desc,omitempty"`

	// CreatedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	CreatedAtAsc *time.Time `form:"created_at__asc,omitempty" json:"created_at__asc,omitempty"`

	// UpdatedAtEq SQL = operator
	UpdatedAtEq *time.Time `form:"updated_at__eq,omitempty" json:"updated_at__eq,omitempty"`

	// UpdatedAtNe SQL != operator
	UpdatedAtNe *time.Time `form:"updated_at__ne,omitempty" json:"updated_at__ne,omitempty"`

	// UpdatedAtGt SQL > operator, may not work with all column types
	UpdatedAtGt *time.Time `form:"updated_at__gt,omitempty" json:"updated_at__gt,omitempty"`

	// UpdatedAtGte SQL >= operator, may not work with all column types
	UpdatedAtGte *time.Time `form:"updated_at__gte,omitempty" json:"updated_at__gte,omitempty"`

	// UpdatedAtLt SQL < operator, may not work with all column types
	UpdatedAtLt *time.Time `form:"updated_at__lt,omitempty" json:"updated_at__lt,omitempty"`

	// UpdatedAtLte SQL <= operator, may not work with all column types
	UpdatedAtLte *time.Time `form:"updated_at__lte,omitempty" json:"updated_at__lte,omitempty"`

	// UpdatedAtIn SQL IN operator, permits comma-separated values
	UpdatedAtIn *time.Time `form:"updated_at__in,omitempty" json:"updated_at__in,omitempty"`

	// UpdatedAtNin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNin *time.Time `form:"updated_at__nin,omitempty" json:"updated_at__nin,omitempty"`

	// UpdatedAtNotin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNotin *time.Time `form:"updated_at__notin,omitempty" json:"updated_at__notin,omitempty"`

	// UpdatedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	UpdatedAtIsnull *time.Time `form:"updated_at__isnull,omitempty" json:"updated_at__isnull,omitempty"`

	// UpdatedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	UpdatedAtNisnull *time.Time `form:"updated_at__nisnull,omitempty" json:"updated_at__nisnull,omitempty"`

	// UpdatedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	UpdatedAtIsnotnull *time.Time `form:"updated_at__isnotnull,omitempty" json:"updated_at__isnotnull,omitempty"`

	// UpdatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtL *time.Time `form:"updated_at__l,omitempty" json:"updated_at__l,omitempty"`

	// UpdatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtLike *time.Time `form:"updated_at__like,omitempty" json:"updated_at__like,omitempty"`

	// UpdatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNl *time.Time `form:"updated_at__nl,omitempty" json:"updated_at__nl,omitempty"`

	// UpdatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNlike *time.Time `form:"updated_at__nlike,omitempty" json:"updated_at__nlike,omitempty"`

	// UpdatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotlike *time.Time `form:"updated_at__notlike,omitempty" json:"updated_at__notlike,omitempty"`

	// UpdatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIl *time.Time `form:"updated_at__il,omitempty" json:"updated_at__il,omitempty"`

	// UpdatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIlike *time.Time `form:"updated_at__ilike,omitempty" json:"updated_at__ilike,omitempty"`

	// UpdatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNil *time.Time `form:"updated_at__nil,omitempty" json:"updated_at__nil,omitempty"`

	// UpdatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNilike *time.Time `form:"updated_at__nilike,omitempty" json:"updated_at__nilike,omitempty"`

	// UpdatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotilike *time.Time `form:"updated_at__notilike,omitempty" json:"updated_at__notilike,omitempty"`

	// UpdatedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	UpdatedAtDesc *time.Time `form:"updated_at__desc,omitempty" json:"updated_at__desc,omitempty"`

	// UpdatedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	UpdatedAtAsc *time.Time `form:"updated_at__asc,omitempty" json:"updated_at__asc,omitempty"`

	// DeletedAtEq SQL = operator
	DeletedAtEq *time.Time `form:"deleted_at__eq,omitempty" json:"deleted_at__eq,omitempty"`

	// DeletedAtNe SQL != operator
	DeletedAtNe *time.Time `form:"deleted_at__ne,omitempty" json:"deleted_at__ne,omitempty"`

	// DeletedAtGt SQL > operator, may not work with all column types
	DeletedAtGt *time.Time `form:"deleted_at__gt,omitempty" json:"deleted_at__gt,omitempty"`

	// DeletedAtGte SQL >= operator, may not work with all column types
	DeletedAtGte *time.Time `form:"deleted_at__gte,omitempty" json:"deleted_at__gte,omitempty"`

	// DeletedAtLt SQL < operator, may not work with all column types
	DeletedAtLt *time.Time `form:"deleted_at__lt,omitempty" json:"deleted_at__lt,omitempty"`

	// DeletedAtLte SQL <= operator, may not work with all column types
	DeletedAtLte *time.Time `form:"deleted_at__lte,omitempty" json:"deleted_at__lte,omitempty"`

	// DeletedAtIn SQL IN operator, permits comma-separated values
	DeletedAtIn *time.Time `form:"deleted_at__in,omitempty" json:"deleted_at__in,omitempty"`

	// DeletedAtNin SQL NOT IN operator, permits comma-separated values
	DeletedAtNin *time.Time `form:"deleted_at__nin,omitempty" json:"deleted_at__nin,omitempty"`

	// DeletedAtNotin SQL NOT IN operator, permits comma-separated values
	DeletedAtNotin *time.Time `form:"deleted_at__notin,omitempty" json:"deleted_at__notin,omitempty"`

	// DeletedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	DeletedAtIsnull *time.Time `form:"deleted_at__isnull,omitempty" json:"deleted_at__isnull,omitempty"`

	// DeletedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	DeletedAtNisnull *time.Time `form:"deleted_at__nisnull,omitempty" json:"deleted_at__nisnull,omitempty"`

	// DeletedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	DeletedAtIsnotnull *time.Time `form:"deleted_at__isnotnull,omitempty" json:"deleted_at__isnotnull,omitempty"`

	// DeletedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtL *time.Time `form:"deleted_at__l,omitempty" json:"deleted_at__l,omitempty"`

	// DeletedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtLike *time.Time `form:"deleted_at__like,omitempty" json:"deleted_at__like,omitempty"`

	// DeletedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNl *time.Time `form:"deleted_at__nl,omitempty" json:"deleted_at__nl,omitempty"`

	// DeletedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNlike *time.Time `form:"deleted_at__nlike,omitempty" json:"deleted_at__nlike,omitempty"`

	// DeletedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotlike *time.Time `form:"deleted_at__notlike,omitempty" json:"deleted_at__notlike,omitempty"`

	// DeletedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIl *time.Time `form:"deleted_at__il,omitempty" json:"deleted_at__il,omitempty"`

	// DeletedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIlike *time.Time `form:"deleted_at__ilike,omitempty" json:"deleted_at__ilike,omitempty"`

	// DeletedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNil *time.Time `form:"deleted_at__nil,omitempty" json:"deleted_at__nil,omitempty"`

	// DeletedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNilike *time.Time `form:"deleted_at__nilike,omitempty" json:"deleted_at__nilike,omitempty"`

	// DeletedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotilike *time.Time `form:"deleted_at__notilike,omitempty" json:"deleted_at__notilike,omitempty"`

	// DeletedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	DeletedAtDesc *time.Time `form:"deleted_at__desc,omitempty" json:"deleted_at__desc,omitempty"`

	// DeletedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	DeletedAtAsc *time.Time `form:"deleted_at__asc,omitempty" json:"deleted_at__asc,omitempty"`

	// FileNameEq SQL = operator
	FileNameEq *string `form:"file_name__eq,omitempty" json:"file_name__eq,omitempty"`

	// FileNameNe SQL != operator
	FileNameNe *string `form:"file_name__ne,omitempty" json:"file_name__ne,omitempty"`

	// FileNameGt SQL > operator, may not work with all column types
	FileNameGt *string `form:"file_name__gt,omitempty" json:"file_name__gt,omitempty"`

	// FileNameGte SQL >= operator, may not work with all column types
	FileNameGte *string `form:"file_name__gte,omitempty" json:"file_name__gte,omitempty"`

	// FileNameLt SQL < operator, may not work with all column types
	FileNameLt *string `form:"file_name__lt,omitempty" json:"file_name__lt,omitempty"`

	// FileNameLte SQL <= operator, may not work with all column types
	FileNameLte *string `form:"file_name__lte,omitempty" json:"file_name__lte,omitempty"`

	// FileNameIn SQL IN operator, permits comma-separated values
	FileNameIn *string `form:"file_name__in,omitempty" json:"file_name__in,omitempty"`

	// FileNameNin SQL NOT IN operator, permits comma-separated values
	FileNameNin *string `form:"file_name__nin,omitempty" json:"file_name__nin,omitempty"`

	// FileNameNotin SQL NOT IN operator, permits comma-separated values
	FileNameNotin *string `form:"file_name__notin,omitempty" json:"file_name__notin,omitempty"`

	// FileNameIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	FileNameIsnull *string `form:"file_name__isnull,omitempty" json:"file_name__isnull,omitempty"`

	// FileNameNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	FileNameNisnull *string `form:"file_name__nisnull,omitempty" json:"file_name__nisnull,omitempty"`

	// FileNameIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	FileNameIsnotnull *string `form:"file_name__isnotnull,omitempty" json:"file_name__isnotnull,omitempty"`

	// FileNameL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	FileNameL *string `form:"file_name__l,omitempty" json:"file_name__l,omitempty"`

	// FileNameLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	FileNameLike *string `form:"file_name__like,omitempty" json:"file_name__like,omitempty"`

	// FileNameNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	FileNameNl *string `form:"file_name__nl,omitempty" json:"file_name__nl,omitempty"`

	// FileNameNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	FileNameNlike *string `form:"file_name__nlike,omitempty" json:"file_name__nlike,omitempty"`

	// FileNameNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	FileNameNotlike *string `form:"file_name__notlike,omitempty" json:"file_name__notlike,omitempty"`

	// FileNameIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	FileNameIl *string `form:"file_name__il,omitempty" json:"file_name__il,omitempty"`

	// FileNameIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	FileNameIlike *string `form:"file_name__ilike,omitempty" json:"file_name__ilike,omitempty"`

	// FileNameNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	FileNameNil *string `form:"file_name__nil,omitempty" json:"file_name__nil,omitempty"`

	// FileNameNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	FileNameNilike *string `form:"file_name__nilike,omitempty" json:"file_name__nilike,omitempty"`

	// FileNameNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	FileNameNotilike *string `form:"file_name__notilike,omitempty" json:"file_name__notilike,omitempty"`

	// FileNameDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	FileNameDesc *string `form:"file_name__desc,omitempty" json:"file_name__desc,omitempty"`

	// FileNameAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	FileNameAsc *string `form:"file_name__asc,omitempty" json:"file_name__asc,omitempty"`

	// StartedAtEq SQL = operator
	StartedAtEq *time.Time `form:"started_at__eq,omitempty" json:"started_at__eq,omitempty"`

	// StartedAtNe SQL != operator
	StartedAtNe *time.Time `form:"started_at__ne,omitempty" json:"started_at__ne,omitempty"`

	// StartedAtGt SQL > operator, may not work with all column types
	StartedAtGt *time.Time `form:"started_at__gt,omitempty" json:"started_at__gt,omitempty"`

	// StartedAtGte SQL >= operator, may not work with all column types
	StartedAtGte *time.Time `form:"started_at__gte,omitempty" json:"started_at__gte,omitempty"`

	// StartedAtLt SQL < operator, may not work with all column types
	StartedAtLt *time.Time `form:"started_at__lt,omitempty" json:"started_at__lt,omitempty"`

	// StartedAtLte SQL <= operator, may not work with all column types
	StartedAtLte *time.Time `form:"started_at__lte,omitempty" json:"started_at__lte,omitempty"`

	// StartedAtIn SQL IN operator, permits comma-separated values
	StartedAtIn *time.Time `form:"started_at__in,omitempty" json:"started_at__in,omitempty"`

	// StartedAtNin SQL NOT IN operator, permits comma-separated values
	StartedAtNin *time.Time `form:"started_at__nin,omitempty" json:"started_at__nin,omitempty"`

	// StartedAtNotin SQL NOT IN operator, permits comma-separated values
	StartedAtNotin *time.Time `form:"started_at__notin,omitempty" json:"started_at__notin,omitempty"`

	// StartedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	StartedAtIsnull *time.Time `form:"started_at__isnull,omitempty" json:"started_at__isnull,omitempty"`

	// StartedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	StartedAtNisnull *time.Time `form:"started_at__nisnull,omitempty" json:"started_at__nisnull,omitempty"`

	// StartedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	StartedAtIsnotnull *time.Time `form:"started_at__isnotnull,omitempty" json:"started_at__isnotnull,omitempty"`

	// StartedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtL *time.Time `form:"started_at__l,omitempty" json:"started_at__l,omitempty"`

	// StartedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtLike *time.Time `form:"started_at__like,omitempty" json:"started_at__like,omitempty"`

	// StartedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtNl *time.Time `form:"started_at__nl,omitempty" json:"started_at__nl,omitempty"`

	// StartedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtNlike *time.Time `form:"started_at__nlike,omitempty" json:"started_at__nlike,omitempty"`

	// StartedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtNotlike *time.Time `form:"started_at__notlike,omitempty" json:"started_at__notlike,omitempty"`

	// StartedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtIl *time.Time `form:"started_at__il,omitempty" json:"started_at__il,omitempty"`

	// StartedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtIlike *time.Time `form:"started_at__ilike,omitempty" json:"started_at__ilike,omitempty"`

	// StartedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtNil *time.Time `form:"started_at__nil,omitempty" json:"started_at__nil,omitempty"`

	// StartedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtNilike *time.Time `form:"started_at__nilike,omitempty" json:"started_at__nilike,omitempty"`

	// StartedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	StartedAtNotilike *time.Time `form:"started_at__notilike,omitempty" json:"started_at__notilike,omitempty"`

	// StartedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	StartedAtDesc *time.Time `form:"started_at__desc,omitempty" json:"started_at__desc,omitempty"`

	// StartedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	StartedAtAsc *time.Time `form:"started_at__asc,omitempty" json:"started_at__asc,omitempty"`

	// EndedAtEq SQL = operator
	EndedAtEq *time.Time `form:"ended_at__eq,omitempty" json:"ended_at__eq,omitempty"`

	// EndedAtNe SQL != operator
	EndedAtNe *time.Time `form:"ended_at__ne,omitempty" json:"ended_at__ne,omitempty"`

	// EndedAtGt SQL > operator, may not work with all column types
	EndedAtGt *time.Time `form:"ended_at__gt,omitempty" json:"ended_at__gt,omitempty"`

	// EndedAtGte SQL >= operator, may not work with all column types
	EndedAtGte *time.Time `form:"ended_at__gte,omitempty" json:"ended_at__gte,omitempty"`

	// EndedAtLt SQL < operator, may not work with all column types
	EndedAtLt *time.Time `form:"ended_at__lt,omitempty" json:"ended_at__lt,omitempty"`

	// EndedAtLte SQL <= operator, may not work with all column types
	EndedAtLte *time.Time `form:"ended_at__lte,omitempty" json:"ended_at__lte,omitempty"`

	// EndedAtIn SQL IN operator, permits comma-separated values
	EndedAtIn *time.Time `form:"ended_at__in,omitempty" json:"ended_at__in,omitempty"`

	// EndedAtNin SQL NOT IN operator, permits comma-separated values
	EndedAtNin *time.Time `form:"ended_at__nin,omitempty" json:"ended_at__nin,omitempty"`

	// EndedAtNotin SQL NOT IN operator, permits comma-separated values
	EndedAtNotin *time.Time `form:"ended_at__notin,omitempty" json:"ended_at__notin,omitempty"`

	// EndedAtIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	EndedAtIsnull *time.Time `form:"ended_at__isnull,omitempty" json:"ended_at__isnull,omitempty"`

	// EndedAtNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	EndedAtNisnull *time.Time `form:"ended_at__nisnull,omitempty" json:"ended_at__nisnull,omitempty"`

	// EndedAtIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	EndedAtIsnotnull *time.Time `form:"ended_at__isnotnull,omitempty" json:"ended_at__isnotnull,omitempty"`

	// EndedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtL *time.Time `form:"ended_at__l,omitempty" json:"ended_at__l,omitempty"`

	// EndedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtLike *time.Time `form:"ended_at__like,omitempty" json:"ended_at__like,omitempty"`

	// EndedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtNl *time.Time `form:"ended_at__nl,omitempty" json:"ended_at__nl,omitempty"`

	// EndedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtNlike *time.Time `form:"ended_at__nlike,omitempty" json:"ended_at__nlike,omitempty"`

	// EndedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtNotlike *time.Time `form:"ended_at__notlike,omitempty" json:"ended_at__notlike,omitempty"`

	// EndedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtIl *time.Time `form:"ended_at__il,omitempty" json:"ended_at__il,omitempty"`

	// EndedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtIlike *time.Time `form:"ended_at__ilike,omitempty" json:"ended_at__ilike,omitempty"`

	// EndedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtNil *time.Time `form:"ended_at__nil,omitempty" json:"ended_at__nil,omitempty"`

	// EndedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtNilike *time.Time `form:"ended_at__nilike,omitempty" json:"ended_at__nilike,omitempty"`

	// EndedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	EndedAtNotilike *time.Time `form:"ended_at__notilike,omitempty" json:"ended_at__notilike,omitempty"`

	// EndedAtDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	EndedAtDesc *time.Time `form:"ended_at__desc,omitempty" json:"ended_at__desc,omitempty"`

	// EndedAtAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	EndedAtAsc *time.Time `form:"ended_at__asc,omitempty" json:"ended_at__asc,omitempty"`

	// DurationEq SQL = operator
	DurationEq *int64 `form:"duration__eq,omitempty" json:"duration__eq,omitempty"`

	// DurationNe SQL != operator
	DurationNe *int64 `form:"duration__ne,omitempty" json:"duration__ne,omitempty"`

	// DurationGt SQL > operator, may not work with all column types
	DurationGt *int64 `form:"duration__gt,omitempty" json:"duration__gt,omitempty"`

	// DurationGte SQL >= operator, may not work with all column types
	DurationGte *int64 `form:"duration__gte,omitempty" json:"duration__gte,omitempty"`

	// DurationLt SQL < operator, may not work with all column types
	DurationLt *int64 `form:"duration__lt,omitempty" json:"duration__lt,omitempty"`

	// DurationLte SQL <= operator, may not work with all column types
	DurationLte *int64 `form:"duration__lte,omitempty" json:"duration__lte,omitempty"`

	// DurationIn SQL IN operator, permits comma-separated values
	DurationIn *int64 `form:"duration__in,omitempty" json:"duration__in,omitempty"`

	// DurationNin SQL NOT IN operator, permits comma-separated values
	DurationNin *int64 `form:"duration__nin,omitempty" json:"duration__nin,omitempty"`

	// DurationNotin SQL NOT IN operator, permits comma-separated values
	DurationNotin *int64 `form:"duration__notin,omitempty" json:"duration__notin,omitempty"`

	// DurationIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	DurationIsnull *int64 `form:"duration__isnull,omitempty" json:"duration__isnull,omitempty"`

	// DurationNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	DurationNisnull *int64 `form:"duration__nisnull,omitempty" json:"duration__nisnull,omitempty"`

	// DurationIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	DurationIsnotnull *int64 `form:"duration__isnotnull,omitempty" json:"duration__isnotnull,omitempty"`

	// DurationL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DurationL *int64 `form:"duration__l,omitempty" json:"duration__l,omitempty"`

	// DurationLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DurationLike *int64 `form:"duration__like,omitempty" json:"duration__like,omitempty"`

	// DurationNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DurationNl *int64 `form:"duration__nl,omitempty" json:"duration__nl,omitempty"`

	// DurationNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DurationNlike *int64 `form:"duration__nlike,omitempty" json:"duration__nlike,omitempty"`

	// DurationNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DurationNotlike *int64 `form:"duration__notlike,omitempty" json:"duration__notlike,omitempty"`

	// DurationIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DurationIl *int64 `form:"duration__il,omitempty" json:"duration__il,omitempty"`

	// DurationIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DurationIlike *int64 `form:"duration__ilike,omitempty" json:"duration__ilike,omitempty"`

	// DurationNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DurationNil *int64 `form:"duration__nil,omitempty" json:"duration__nil,omitempty"`

	// DurationNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DurationNilike *int64 `form:"duration__nilike,omitempty" json:"duration__nilike,omitempty"`

	// DurationNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DurationNotilike *int64 `form:"duration__notilike,omitempty" json:"duration__notilike,omitempty"`

	// DurationDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	DurationDesc *int64 `form:"duration__desc,omitempty" json:"duration__desc,omitempty"`

	// DurationAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	DurationAsc *int64 `form:"duration__asc,omitempty" json:"duration__asc,omitempty"`

	// FileSizeEq SQL = operator
	FileSizeEq *float64 `form:"file_size__eq,omitempty" json:"file_size__eq,omitempty"`

	// FileSizeNe SQL != operator
	FileSizeNe *float64 `form:"file_size__ne,omitempty" json:"file_size__ne,omitempty"`

	// FileSizeGt SQL > operator, may not work with all column types
	FileSizeGt *float64 `form:"file_size__gt,omitempty" json:"file_size__gt,omitempty"`

	// FileSizeGte SQL >= operator, may not work with all column types
	FileSizeGte *float64 `form:"file_size__gte,omitempty" json:"file_size__gte,omitempty"`

	// FileSizeLt SQL < operator, may not work with all column types
	FileSizeLt *float64 `form:"file_size__lt,omitempty" json:"file_size__lt,omitempty"`

	// FileSizeLte SQL <= operator, may not work with all column types
	FileSizeLte *float64 `form:"file_size__lte,omitempty" json:"file_size__lte,omitempty"`

	// FileSizeIn SQL IN operator, permits comma-separated values
	FileSizeIn *float64 `form:"file_size__in,omitempty" json:"file_size__in,omitempty"`

	// FileSizeNin SQL NOT IN operator, permits comma-separated values
	FileSizeNin *float64 `form:"file_size__nin,omitempty" json:"file_size__nin,omitempty"`

	// FileSizeNotin SQL NOT IN operator, permits comma-separated values
	FileSizeNotin *float64 `form:"file_size__notin,omitempty" json:"file_size__notin,omitempty"`

	// FileSizeIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	FileSizeIsnull *float64 `form:"file_size__isnull,omitempty" json:"file_size__isnull,omitempty"`

	// FileSizeNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	FileSizeNisnull *float64 `form:"file_size__nisnull,omitempty" json:"file_size__nisnull,omitempty"`

	// FileSizeIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	FileSizeIsnotnull *float64 `form:"file_size__isnotnull,omitempty" json:"file_size__isnotnull,omitempty"`

	// FileSizeL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeL *float64 `form:"file_size__l,omitempty" json:"file_size__l,omitempty"`

	// FileSizeLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeLike *float64 `form:"file_size__like,omitempty" json:"file_size__like,omitempty"`

	// FileSizeNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeNl *float64 `form:"file_size__nl,omitempty" json:"file_size__nl,omitempty"`

	// FileSizeNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeNlike *float64 `form:"file_size__nlike,omitempty" json:"file_size__nlike,omitempty"`

	// FileSizeNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeNotlike *float64 `form:"file_size__notlike,omitempty" json:"file_size__notlike,omitempty"`

	// FileSizeIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeIl *float64 `form:"file_size__il,omitempty" json:"file_size__il,omitempty"`

	// FileSizeIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeIlike *float64 `form:"file_size__ilike,omitempty" json:"file_size__ilike,omitempty"`

	// FileSizeNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeNil *float64 `form:"file_size__nil,omitempty" json:"file_size__nil,omitempty"`

	// FileSizeNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeNilike *float64 `form:"file_size__nilike,omitempty" json:"file_size__nilike,omitempty"`

	// FileSizeNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	FileSizeNotilike *float64 `form:"file_size__notilike,omitempty" json:"file_size__notilike,omitempty"`

	// FileSizeDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	FileSizeDesc *float64 `form:"file_size__desc,omitempty" json:"file_size__desc,omitempty"`

	// FileSizeAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	FileSizeAsc *float64 `form:"file_size__asc,omitempty" json:"file_size__asc,omitempty"`

	// ThumbnailNameEq SQL = operator
	ThumbnailNameEq *string `form:"thumbnail_name__eq,omitempty" json:"thumbnail_name__eq,omitempty"`

	// ThumbnailNameNe SQL != operator
	ThumbnailNameNe *string `form:"thumbnail_name__ne,omitempty" json:"thumbnail_name__ne,omitempty"`

	// ThumbnailNameGt SQL > operator, may not work with all column types
	ThumbnailNameGt *string `form:"thumbnail_name__gt,omitempty" json:"thumbnail_name__gt,omitempty"`

	// ThumbnailNameGte SQL >= operator, may not work with all column types
	ThumbnailNameGte *string `form:"thumbnail_name__gte,omitempty" json:"thumbnail_name__gte,omitempty"`

	// ThumbnailNameLt SQL < operator, may not work with all column types
	ThumbnailNameLt *string `form:"thumbnail_name__lt,omitempty" json:"thumbnail_name__lt,omitempty"`

	// ThumbnailNameLte SQL <= operator, may not work with all column types
	ThumbnailNameLte *string `form:"thumbnail_name__lte,omitempty" json:"thumbnail_name__lte,omitempty"`

	// ThumbnailNameIn SQL IN operator, permits comma-separated values
	ThumbnailNameIn *string `form:"thumbnail_name__in,omitempty" json:"thumbnail_name__in,omitempty"`

	// ThumbnailNameNin SQL NOT IN operator, permits comma-separated values
	ThumbnailNameNin *string `form:"thumbnail_name__nin,omitempty" json:"thumbnail_name__nin,omitempty"`

	// ThumbnailNameNotin SQL NOT IN operator, permits comma-separated values
	ThumbnailNameNotin *string `form:"thumbnail_name__notin,omitempty" json:"thumbnail_name__notin,omitempty"`

	// ThumbnailNameIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	ThumbnailNameIsnull *string `form:"thumbnail_name__isnull,omitempty" json:"thumbnail_name__isnull,omitempty"`

	// ThumbnailNameNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	ThumbnailNameNisnull *string `form:"thumbnail_name__nisnull,omitempty" json:"thumbnail_name__nisnull,omitempty"`

	// ThumbnailNameIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	ThumbnailNameIsnotnull *string `form:"thumbnail_name__isnotnull,omitempty" json:"thumbnail_name__isnotnull,omitempty"`

	// ThumbnailNameL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameL *string `form:"thumbnail_name__l,omitempty" json:"thumbnail_name__l,omitempty"`

	// ThumbnailNameLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameLike *string `form:"thumbnail_name__like,omitempty" json:"thumbnail_name__like,omitempty"`

	// ThumbnailNameNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameNl *string `form:"thumbnail_name__nl,omitempty" json:"thumbnail_name__nl,omitempty"`

	// ThumbnailNameNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameNlike *string `form:"thumbnail_name__nlike,omitempty" json:"thumbnail_name__nlike,omitempty"`

	// ThumbnailNameNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameNotlike *string `form:"thumbnail_name__notlike,omitempty" json:"thumbnail_name__notlike,omitempty"`

	// ThumbnailNameIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameIl *string `form:"thumbnail_name__il,omitempty" json:"thumbnail_name__il,omitempty"`

	// ThumbnailNameIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameIlike *string `form:"thumbnail_name__ilike,omitempty" json:"thumbnail_name__ilike,omitempty"`

	// ThumbnailNameNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameNil *string `form:"thumbnail_name__nil,omitempty" json:"thumbnail_name__nil,omitempty"`

	// ThumbnailNameNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameNilike *string `form:"thumbnail_name__nilike,omitempty" json:"thumbnail_name__nilike,omitempty"`

	// ThumbnailNameNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ThumbnailNameNotilike *string `form:"thumbnail_name__notilike,omitempty" json:"thumbnail_name__notilike,omitempty"`

	// ThumbnailNameDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	ThumbnailNameDesc *string `form:"thumbnail_name__desc,omitempty" json:"thumbnail_name__desc,omitempty"`

	// ThumbnailNameAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	ThumbnailNameAsc *string `form:"thumbnail_name__asc,omitempty" json:"thumbnail_name__asc,omitempty"`

	// StatusEq SQL = operator
	StatusEq *string `form:"status__eq,omitempty" json:"status__eq,omitempty"`

	// StatusNe SQL != operator
	StatusNe *string `form:"status__ne,omitempty" json:"status__ne,omitempty"`

	// StatusGt SQL > operator, may not work with all column types
	StatusGt *string `form:"status__gt,omitempty" json:"status__gt,omitempty"`

	// StatusGte SQL >= operator, may not work with all column types
	StatusGte *string `form:"status__gte,omitempty" json:"status__gte,omitempty"`

	// StatusLt SQL < operator, may not work with all column types
	StatusLt *string `form:"status__lt,omitempty" json:"status__lt,omitempty"`

	// StatusLte SQL <= operator, may not work with all column types
	StatusLte *string `form:"status__lte,omitempty" json:"status__lte,omitempty"`

	// StatusIn SQL IN operator, permits comma-separated values
	StatusIn *string `form:"status__in,omitempty" json:"status__in,omitempty"`

	// StatusNin SQL NOT IN operator, permits comma-separated values
	StatusNin *string `form:"status__nin,omitempty" json:"status__nin,omitempty"`

	// StatusNotin SQL NOT IN operator, permits comma-separated values
	StatusNotin *string `form:"status__notin,omitempty" json:"status__notin,omitempty"`

	// StatusIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	StatusIsnull *string `form:"status__isnull,omitempty" json:"status__isnull,omitempty"`

	// StatusNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	StatusNisnull *string `form:"status__nisnull,omitempty" json:"status__nisnull,omitempty"`

	// StatusIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	StatusIsnotnull *string `form:"status__isnotnull,omitempty" json:"status__isnotnull,omitempty"`

	// StatusL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	StatusL *string `form:"status__l,omitempty" json:"status__l,omitempty"`

	// StatusLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	StatusLike *string `form:"status__like,omitempty" json:"status__like,omitempty"`

	// StatusNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	StatusNl *string `form:"status__nl,omitempty" json:"status__nl,omitempty"`

	// StatusNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	StatusNlike *string `form:"status__nlike,omitempty" json:"status__nlike,omitempty"`

	// StatusNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	StatusNotlike *string `form:"status__notlike,omitempty" json:"status__notlike,omitempty"`

	// StatusIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	StatusIl *string `form:"status__il,omitempty" json:"status__il,omitempty"`

	// StatusIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	StatusIlike *string `form:"status__ilike,omitempty" json:"status__ilike,omitempty"`

	// StatusNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	StatusNil *string `form:"status__nil,omitempty" json:"status__nil,omitempty"`

	// StatusNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	StatusNilike *string `form:"status__nilike,omitempty" json:"status__nilike,omitempty"`

	// StatusNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	StatusNotilike *string `form:"status__notilike,omitempty" json:"status__notilike,omitempty"`

	// StatusDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	StatusDesc *string `form:"status__desc,omitempty" json:"status__desc,omitempty"`

	// StatusAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	StatusAsc *string `form:"status__asc,omitempty" json:"status__asc,omitempty"`

	// CameraIdEq SQL = operator
	CameraIdEq *openapi_types.UUID `form:"camera_id__eq,omitempty" json:"camera_id__eq,omitempty"`

	// CameraIdNe SQL != operator
	CameraIdNe *openapi_types.UUID `form:"camera_id__ne,omitempty" json:"camera_id__ne,omitempty"`

	// CameraIdGt SQL > operator, may not work with all column types
	CameraIdGt *openapi_types.UUID `form:"camera_id__gt,omitempty" json:"camera_id__gt,omitempty"`

	// CameraIdGte SQL >= operator, may not work with all column types
	CameraIdGte *openapi_types.UUID `form:"camera_id__gte,omitempty" json:"camera_id__gte,omitempty"`

	// CameraIdLt SQL < operator, may not work with all column types
	CameraIdLt *openapi_types.UUID `form:"camera_id__lt,omitempty" json:"camera_id__lt,omitempty"`

	// CameraIdLte SQL <= operator, may not work with all column types
	CameraIdLte *openapi_types.UUID `form:"camera_id__lte,omitempty" json:"camera_id__lte,omitempty"`

	// CameraIdIn SQL IN operator, permits comma-separated values
	CameraIdIn *openapi_types.UUID `form:"camera_id__in,omitempty" json:"camera_id__in,omitempty"`

	// CameraIdNin SQL NOT IN operator, permits comma-separated values
	CameraIdNin *openapi_types.UUID `form:"camera_id__nin,omitempty" json:"camera_id__nin,omitempty"`

	// CameraIdNotin SQL NOT IN operator, permits comma-separated values
	CameraIdNotin *openapi_types.UUID `form:"camera_id__notin,omitempty" json:"camera_id__notin,omitempty"`

	// CameraIdIsnull SQL IS NULL operator, value is ignored (presence of key is sufficient)
	CameraIdIsnull *openapi_types.UUID `form:"camera_id__isnull,omitempty" json:"camera_id__isnull,omitempty"`

	// CameraIdNisnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CameraIdNisnull *openapi_types.UUID `form:"camera_id__nisnull,omitempty" json:"camera_id__nisnull,omitempty"`

	// CameraIdIsnotnull SQL IS NOT NULL operator, value is ignored (presence of key is sufficient)
	CameraIdIsnotnull *openapi_types.UUID `form:"camera_id__isnotnull,omitempty" json:"camera_id__isnotnull,omitempty"`

	// CameraIdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdL *openapi_types.UUID `form:"camera_id__l,omitempty" json:"camera_id__l,omitempty"`

	// CameraIdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdLike *openapi_types.UUID `form:"camera_id__like,omitempty" json:"camera_id__like,omitempty"`

	// CameraIdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNl *openapi_types.UUID `form:"camera_id__nl,omitempty" json:"camera_id__nl,omitempty"`

	// CameraIdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNlike *openapi_types.UUID `form:"camera_id__nlike,omitempty" json:"camera_id__nlike,omitempty"`

	// CameraIdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNotlike *openapi_types.UUID `form:"camera_id__notlike,omitempty" json:"camera_id__notlike,omitempty"`

	// CameraIdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdIl *openapi_types.UUID `form:"camera_id__il,omitempty" json:"camera_id__il,omitempty"`

	// CameraIdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdIlike *openapi_types.UUID `form:"camera_id__ilike,omitempty" json:"camera_id__ilike,omitempty"`

	// CameraIdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNil *openapi_types.UUID `form:"camera_id__nil,omitempty" json:"camera_id__nil,omitempty"`

	// CameraIdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNilike *openapi_types.UUID `form:"camera_id__nilike,omitempty" json:"camera_id__nilike,omitempty"`

	// CameraIdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CameraIdNotilike *openapi_types.UUID `form:"camera_id__notilike,omitempty" json:"camera_id__notilike,omitempty"`

	// CameraIdDesc SQL ORDER BY _ DESC operator, value is ignored (presence of key is sufficient)
	CameraIdDesc *openapi_types.UUID `form:"camera_id__desc,omitempty" json:"camera_id__desc,omitempty"`

	// CameraIdAsc SQL ORDER BY _ ASC operator, value is ignored (presence of key is sufficient)
	CameraIdAsc *openapi_types.UUID `form:"camera_id__asc,omitempty" json:"camera_id__asc,omitempty"`
}

// PostVideosJSONBody defines parameters for PostVideos.
type PostVideosJSONBody = []Video

// PostCamerasJSONRequestBody defines body for PostCameras for application/json ContentType.
type PostCamerasJSONRequestBody = PostCamerasJSONBody

// PatchCameraJSONRequestBody defines body for PatchCamera for application/json ContentType.
type PatchCameraJSONRequestBody = Camera

// PutCameraJSONRequestBody defines body for PutCamera for application/json ContentType.
type PutCameraJSONRequestBody = Camera

// PostDetectionsJSONRequestBody defines body for PostDetections for application/json ContentType.
type PostDetectionsJSONRequestBody = PostDetectionsJSONBody

// PatchDetectionJSONRequestBody defines body for PatchDetection for application/json ContentType.
type PatchDetectionJSONRequestBody = Detection

// PutDetectionJSONRequestBody defines body for PutDetection for application/json ContentType.
type PutDetectionJSONRequestBody = Detection

// PostVideosJSONRequestBody defines body for PostVideos for application/json ContentType.
type PostVideosJSONRequestBody = PostVideosJSONBody

// PatchVideoJSONRequestBody defines body for PatchVideo for application/json ContentType.
type PatchVideoJSONRequestBody = Video

// PutVideoJSONRequestBody defines body for PutVideo for application/json ContentType.
type PutVideoJSONRequestBody = Video

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCameras request
	GetCameras(ctx context.Context, params *GetCamerasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCamerasWithBody request with any body
	PostCamerasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCameras(ctx context.Context, body PostCamerasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCamera request
	DeleteCamera(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCamera request
	GetCamera(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCameraWithBody request with any body
	PatchCameraWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCamera(ctx context.Context, primaryKey interface{}, body PatchCameraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCameraWithBody request with any body
	PutCameraWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCamera(ctx context.Context, primaryKey interface{}, body PutCameraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDetections request
	GetDetections(ctx context.Context, params *GetDetectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDetectionsWithBody request with any body
	PostDetectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDetections(ctx context.Context, body PostDetectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDetection request
	DeleteDetection(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDetection request
	GetDetection(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchDetectionWithBody request with any body
	PatchDetectionWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDetection(ctx context.Context, primaryKey interface{}, body PatchDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDetectionWithBody request with any body
	PutDetectionWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDetection(ctx context.Context, primaryKey interface{}, body PutDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideos request
	GetVideos(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVideosWithBody request with any body
	PostVideosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVideos(ctx context.Context, body PostVideosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVideo request
	DeleteVideo(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideo request
	GetVideo(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchVideoWithBody request with any body
	PatchVideoWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchVideo(ctx context.Context, primaryKey interface{}, body PatchVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoWithBody request with any body
	PutVideoWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVideo(ctx context.Context, primaryKey interface{}, body PutVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCameras(ctx context.Context, params *GetCamerasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCamerasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCamerasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCamerasRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCameras(ctx context.Context, body PostCamerasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCamerasRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCamera(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCameraRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCamera(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCameraRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCameraWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCameraRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCamera(ctx context.Context, primaryKey interface{}, body PatchCameraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCameraRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCameraWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCameraRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCamera(ctx context.Context, primaryKey interface{}, body PutCameraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCameraRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDetections(ctx context.Context, params *GetDetectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDetectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDetectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDetectionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDetections(ctx context.Context, body PostDetectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDetectionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDetection(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDetectionRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDetection(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDetectionRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDetectionWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDetectionRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDetection(ctx context.Context, primaryKey interface{}, body PatchDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDetectionRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDetectionWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDetectionRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDetection(ctx context.Context, primaryKey interface{}, body PutDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDetectionRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideos(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVideosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVideosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVideos(ctx context.Context, body PostVideosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVideosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVideo(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVideoRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideo(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVideoWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVideoRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVideo(ctx context.Context, primaryKey interface{}, body PatchVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVideoRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideo(ctx context.Context, primaryKey interface{}, body PutVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCamerasRequest generates requests for GetCameras
func NewGetCamerasRequest(server string, params *GetCamerasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cameras")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__eq", runtime.ParamLocationQuery, *params.IdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ne", runtime.ParamLocationQuery, *params.IdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nin", runtime.ParamLocationQuery, *params.IdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notin", runtime.ParamLocationQuery, *params.IdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnull", runtime.ParamLocationQuery, *params.IdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nisnull", runtime.ParamLocationQuery, *params.IdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnotnull", runtime.ParamLocationQuery, *params.IdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__l", runtime.ParamLocationQuery, *params.IdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__like", runtime.ParamLocationQuery, *params.IdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nl", runtime.ParamLocationQuery, *params.IdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nlike", runtime.ParamLocationQuery, *params.IdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notlike", runtime.ParamLocationQuery, *params.IdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__il", runtime.ParamLocationQuery, *params.IdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ilike", runtime.ParamLocationQuery, *params.IdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nil", runtime.ParamLocationQuery, *params.IdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nilike", runtime.ParamLocationQuery, *params.IdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notilike", runtime.ParamLocationQuery, *params.IdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__desc", runtime.ParamLocationQuery, *params.IdDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__asc", runtime.ParamLocationQuery, *params.IdAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__eq", runtime.ParamLocationQuery, *params.CreatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ne", runtime.ParamLocationQuery, *params.CreatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gt", runtime.ParamLocationQuery, *params.CreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gte", runtime.ParamLocationQuery, *params.CreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lt", runtime.ParamLocationQuery, *params.CreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lte", runtime.ParamLocationQuery, *params.CreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__in", runtime.ParamLocationQuery, *params.CreatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nin", runtime.ParamLocationQuery, *params.CreatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notin", runtime.ParamLocationQuery, *params.CreatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnull", runtime.ParamLocationQuery, *params.CreatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nisnull", runtime.ParamLocationQuery, *params.CreatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnotnull", runtime.ParamLocationQuery, *params.CreatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__l", runtime.ParamLocationQuery, *params.CreatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__like", runtime.ParamLocationQuery, *params.CreatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nl", runtime.ParamLocationQuery, *params.CreatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nlike", runtime.ParamLocationQuery, *params.CreatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notlike", runtime.ParamLocationQuery, *params.CreatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__il", runtime.ParamLocationQuery, *params.CreatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ilike", runtime.ParamLocationQuery, *params.CreatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nil", runtime.ParamLocationQuery, *params.CreatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nilike", runtime.ParamLocationQuery, *params.CreatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notilike", runtime.ParamLocationQuery, *params.CreatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__desc", runtime.ParamLocationQuery, *params.CreatedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__asc", runtime.ParamLocationQuery, *params.CreatedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__eq", runtime.ParamLocationQuery, *params.UpdatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ne", runtime.ParamLocationQuery, *params.UpdatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gt", runtime.ParamLocationQuery, *params.UpdatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gte", runtime.ParamLocationQuery, *params.UpdatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lt", runtime.ParamLocationQuery, *params.UpdatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lte", runtime.ParamLocationQuery, *params.UpdatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__in", runtime.ParamLocationQuery, *params.UpdatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nin", runtime.ParamLocationQuery, *params.UpdatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notin", runtime.ParamLocationQuery, *params.UpdatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nisnull", runtime.ParamLocationQuery, *params.UpdatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnotnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__l", runtime.ParamLocationQuery, *params.UpdatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__like", runtime.ParamLocationQuery, *params.UpdatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nl", runtime.ParamLocationQuery, *params.UpdatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nlike", runtime.ParamLocationQuery, *params.UpdatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notlike", runtime.ParamLocationQuery, *params.UpdatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__il", runtime.ParamLocationQuery, *params.UpdatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ilike", runtime.ParamLocationQuery, *params.UpdatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nil", runtime.ParamLocationQuery, *params.UpdatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nilike", runtime.ParamLocationQuery, *params.UpdatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notilike", runtime.ParamLocationQuery, *params.UpdatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__desc", runtime.ParamLocationQuery, *params.UpdatedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__asc", runtime.ParamLocationQuery, *params.UpdatedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__eq", runtime.ParamLocationQuery, *params.DeletedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ne", runtime.ParamLocationQuery, *params.DeletedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gt", runtime.ParamLocationQuery, *params.DeletedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gte", runtime.ParamLocationQuery, *params.DeletedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lt", runtime.ParamLocationQuery, *params.DeletedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lte", runtime.ParamLocationQuery, *params.DeletedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__in", runtime.ParamLocationQuery, *params.DeletedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nin", runtime.ParamLocationQuery, *params.DeletedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notin", runtime.ParamLocationQuery, *params.DeletedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnull", runtime.ParamLocationQuery, *params.DeletedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nisnull", runtime.ParamLocationQuery, *params.DeletedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnotnull", runtime.ParamLocationQuery, *params.DeletedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__l", runtime.ParamLocationQuery, *params.DeletedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__like", runtime.ParamLocationQuery, *params.DeletedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nl", runtime.ParamLocationQuery, *params.DeletedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nlike", runtime.ParamLocationQuery, *params.DeletedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notlike", runtime.ParamLocationQuery, *params.DeletedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__il", runtime.ParamLocationQuery, *params.DeletedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ilike", runtime.ParamLocationQuery, *params.DeletedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nil", runtime.ParamLocationQuery, *params.DeletedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nilike", runtime.ParamLocationQuery, *params.DeletedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notilike", runtime.ParamLocationQuery, *params.DeletedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__desc", runtime.ParamLocationQuery, *params.DeletedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__asc", runtime.ParamLocationQuery, *params.DeletedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__eq", runtime.ParamLocationQuery, *params.NameEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ne", runtime.ParamLocationQuery, *params.NameNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__gt", runtime.ParamLocationQuery, *params.NameGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__gte", runtime.ParamLocationQuery, *params.NameGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__lt", runtime.ParamLocationQuery, *params.NameLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__lte", runtime.ParamLocationQuery, *params.NameLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nin", runtime.ParamLocationQuery, *params.NameNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__notin", runtime.ParamLocationQuery, *params.NameNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isnull", runtime.ParamLocationQuery, *params.NameIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisnull", runtime.ParamLocationQuery, *params.NameNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isnotnull", runtime.ParamLocationQuery, *params.NameIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__l", runtime.ParamLocationQuery, *params.NameL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__like", runtime.ParamLocationQuery, *params.NameLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nl", runtime.ParamLocationQuery, *params.NameNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nlike", runtime.ParamLocationQuery, *params.NameNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__notlike", runtime.ParamLocationQuery, *params.NameNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__il", runtime.ParamLocationQuery, *params.NameIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ilike", runtime.ParamLocationQuery, *params.NameIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nil", runtime.ParamLocationQuery, *params.NameNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nilike", runtime.ParamLocationQuery, *params.NameNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__notilike", runtime.ParamLocationQuery, *params.NameNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__desc", runtime.ParamLocationQuery, *params.NameDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__asc", runtime.ParamLocationQuery, *params.NameAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__eq", runtime.ParamLocationQuery, *params.StreamUrlEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__ne", runtime.ParamLocationQuery, *params.StreamUrlNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__gt", runtime.ParamLocationQuery, *params.StreamUrlGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__gte", runtime.ParamLocationQuery, *params.StreamUrlGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__lt", runtime.ParamLocationQuery, *params.StreamUrlLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__lte", runtime.ParamLocationQuery, *params.StreamUrlLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__in", runtime.ParamLocationQuery, *params.StreamUrlIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__nin", runtime.ParamLocationQuery, *params.StreamUrlNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__notin", runtime.ParamLocationQuery, *params.StreamUrlNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__isnull", runtime.ParamLocationQuery, *params.StreamUrlIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__nisnull", runtime.ParamLocationQuery, *params.StreamUrlNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__isnotnull", runtime.ParamLocationQuery, *params.StreamUrlIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__l", runtime.ParamLocationQuery, *params.StreamUrlL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__like", runtime.ParamLocationQuery, *params.StreamUrlLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__nl", runtime.ParamLocationQuery, *params.StreamUrlNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__nlike", runtime.ParamLocationQuery, *params.StreamUrlNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__notlike", runtime.ParamLocationQuery, *params.StreamUrlNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__il", runtime.ParamLocationQuery, *params.StreamUrlIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__ilike", runtime.ParamLocationQuery, *params.StreamUrlIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__nil", runtime.ParamLocationQuery, *params.StreamUrlNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__nilike", runtime.ParamLocationQuery, *params.StreamUrlNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__notilike", runtime.ParamLocationQuery, *params.StreamUrlNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__desc", runtime.ParamLocationQuery, *params.StreamUrlDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamUrlAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_url__asc", runtime.ParamLocationQuery, *params.StreamUrlAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__eq", runtime.ParamLocationQuery, *params.LastSeenEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__ne", runtime.ParamLocationQuery, *params.LastSeenNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__gt", runtime.ParamLocationQuery, *params.LastSeenGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__gte", runtime.ParamLocationQuery, *params.LastSeenGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__lt", runtime.ParamLocationQuery, *params.LastSeenLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__lte", runtime.ParamLocationQuery, *params.LastSeenLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__in", runtime.ParamLocationQuery, *params.LastSeenIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__nin", runtime.ParamLocationQuery, *params.LastSeenNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__notin", runtime.ParamLocationQuery, *params.LastSeenNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__isnull", runtime.ParamLocationQuery, *params.LastSeenIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__nisnull", runtime.ParamLocationQuery, *params.LastSeenNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__isnotnull", runtime.ParamLocationQuery, *params.LastSeenIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__l", runtime.ParamLocationQuery, *params.LastSeenL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__like", runtime.ParamLocationQuery, *params.LastSeenLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__nl", runtime.ParamLocationQuery, *params.LastSeenNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__nlike", runtime.ParamLocationQuery, *params.LastSeenNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__notlike", runtime.ParamLocationQuery, *params.LastSeenNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__il", runtime.ParamLocationQuery, *params.LastSeenIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__ilike", runtime.ParamLocationQuery, *params.LastSeenIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__nil", runtime.ParamLocationQuery, *params.LastSeenNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__nilike", runtime.ParamLocationQuery, *params.LastSeenNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__notilike", runtime.ParamLocationQuery, *params.LastSeenNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__desc", runtime.ParamLocationQuery, *params.LastSeenDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastSeenAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_seen__asc", runtime.ParamLocationQuery, *params.LastSeenAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCamerasRequest calls the generic PostCameras builder with application/json body
func NewPostCamerasRequest(server string, body PostCamerasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCamerasRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCamerasRequestWithBody generates requests for PostCameras with any type of body
func NewPostCamerasRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cameras")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCameraRequest generates requests for DeleteCamera
func NewDeleteCameraRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cameras/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCameraRequest generates requests for GetCamera
func NewGetCameraRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cameras/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCameraRequest calls the generic PatchCamera builder with application/json body
func NewPatchCameraRequest(server string, primaryKey interface{}, body PatchCameraJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCameraRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPatchCameraRequestWithBody generates requests for PatchCamera with any type of body
func NewPatchCameraRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cameras/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCameraRequest calls the generic PutCamera builder with application/json body
func NewPutCameraRequest(server string, primaryKey interface{}, body PutCameraJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCameraRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPutCameraRequestWithBody generates requests for PutCamera with any type of body
func NewPutCameraRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cameras/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDetectionsRequest generates requests for GetDetections
func NewGetDetectionsRequest(server string, params *GetDetectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__eq", runtime.ParamLocationQuery, *params.IdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ne", runtime.ParamLocationQuery, *params.IdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nin", runtime.ParamLocationQuery, *params.IdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notin", runtime.ParamLocationQuery, *params.IdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnull", runtime.ParamLocationQuery, *params.IdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nisnull", runtime.ParamLocationQuery, *params.IdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnotnull", runtime.ParamLocationQuery, *params.IdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__l", runtime.ParamLocationQuery, *params.IdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__like", runtime.ParamLocationQuery, *params.IdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nl", runtime.ParamLocationQuery, *params.IdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nlike", runtime.ParamLocationQuery, *params.IdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notlike", runtime.ParamLocationQuery, *params.IdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__il", runtime.ParamLocationQuery, *params.IdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ilike", runtime.ParamLocationQuery, *params.IdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nil", runtime.ParamLocationQuery, *params.IdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nilike", runtime.ParamLocationQuery, *params.IdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notilike", runtime.ParamLocationQuery, *params.IdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__desc", runtime.ParamLocationQuery, *params.IdDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__asc", runtime.ParamLocationQuery, *params.IdAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__eq", runtime.ParamLocationQuery, *params.CreatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ne", runtime.ParamLocationQuery, *params.CreatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gt", runtime.ParamLocationQuery, *params.CreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gte", runtime.ParamLocationQuery, *params.CreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lt", runtime.ParamLocationQuery, *params.CreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lte", runtime.ParamLocationQuery, *params.CreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__in", runtime.ParamLocationQuery, *params.CreatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nin", runtime.ParamLocationQuery, *params.CreatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notin", runtime.ParamLocationQuery, *params.CreatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnull", runtime.ParamLocationQuery, *params.CreatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nisnull", runtime.ParamLocationQuery, *params.CreatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnotnull", runtime.ParamLocationQuery, *params.CreatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__l", runtime.ParamLocationQuery, *params.CreatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__like", runtime.ParamLocationQuery, *params.CreatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nl", runtime.ParamLocationQuery, *params.CreatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nlike", runtime.ParamLocationQuery, *params.CreatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notlike", runtime.ParamLocationQuery, *params.CreatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__il", runtime.ParamLocationQuery, *params.CreatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ilike", runtime.ParamLocationQuery, *params.CreatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nil", runtime.ParamLocationQuery, *params.CreatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nilike", runtime.ParamLocationQuery, *params.CreatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notilike", runtime.ParamLocationQuery, *params.CreatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__desc", runtime.ParamLocationQuery, *params.CreatedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__asc", runtime.ParamLocationQuery, *params.CreatedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__eq", runtime.ParamLocationQuery, *params.UpdatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ne", runtime.ParamLocationQuery, *params.UpdatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gt", runtime.ParamLocationQuery, *params.UpdatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gte", runtime.ParamLocationQuery, *params.UpdatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lt", runtime.ParamLocationQuery, *params.UpdatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lte", runtime.ParamLocationQuery, *params.UpdatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__in", runtime.ParamLocationQuery, *params.UpdatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nin", runtime.ParamLocationQuery, *params.UpdatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notin", runtime.ParamLocationQuery, *params.UpdatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nisnull", runtime.ParamLocationQuery, *params.UpdatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnotnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__l", runtime.ParamLocationQuery, *params.UpdatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__like", runtime.ParamLocationQuery, *params.UpdatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nl", runtime.ParamLocationQuery, *params.UpdatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nlike", runtime.ParamLocationQuery, *params.UpdatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notlike", runtime.ParamLocationQuery, *params.UpdatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__il", runtime.ParamLocationQuery, *params.UpdatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ilike", runtime.ParamLocationQuery, *params.UpdatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nil", runtime.ParamLocationQuery, *params.UpdatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nilike", runtime.ParamLocationQuery, *params.UpdatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notilike", runtime.ParamLocationQuery, *params.UpdatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__desc", runtime.ParamLocationQuery, *params.UpdatedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__asc", runtime.ParamLocationQuery, *params.UpdatedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__eq", runtime.ParamLocationQuery, *params.DeletedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ne", runtime.ParamLocationQuery, *params.DeletedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gt", runtime.ParamLocationQuery, *params.DeletedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gte", runtime.ParamLocationQuery, *params.DeletedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lt", runtime.ParamLocationQuery, *params.DeletedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lte", runtime.ParamLocationQuery, *params.DeletedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__in", runtime.ParamLocationQuery, *params.DeletedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nin", runtime.ParamLocationQuery, *params.DeletedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notin", runtime.ParamLocationQuery, *params.DeletedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnull", runtime.ParamLocationQuery, *params.DeletedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nisnull", runtime.ParamLocationQuery, *params.DeletedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnotnull", runtime.ParamLocationQuery, *params.DeletedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__l", runtime.ParamLocationQuery, *params.DeletedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__like", runtime.ParamLocationQuery, *params.DeletedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nl", runtime.ParamLocationQuery, *params.DeletedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nlike", runtime.ParamLocationQuery, *params.DeletedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notlike", runtime.ParamLocationQuery, *params.DeletedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__il", runtime.ParamLocationQuery, *params.DeletedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ilike", runtime.ParamLocationQuery, *params.DeletedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nil", runtime.ParamLocationQuery, *params.DeletedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nilike", runtime.ParamLocationQuery, *params.DeletedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notilike", runtime.ParamLocationQuery, *params.DeletedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__desc", runtime.ParamLocationQuery, *params.DeletedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__asc", runtime.ParamLocationQuery, *params.DeletedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__eq", runtime.ParamLocationQuery, *params.SeenAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__ne", runtime.ParamLocationQuery, *params.SeenAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__gt", runtime.ParamLocationQuery, *params.SeenAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__gte", runtime.ParamLocationQuery, *params.SeenAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__lt", runtime.ParamLocationQuery, *params.SeenAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__lte", runtime.ParamLocationQuery, *params.SeenAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__in", runtime.ParamLocationQuery, *params.SeenAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__nin", runtime.ParamLocationQuery, *params.SeenAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__notin", runtime.ParamLocationQuery, *params.SeenAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__isnull", runtime.ParamLocationQuery, *params.SeenAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__nisnull", runtime.ParamLocationQuery, *params.SeenAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__isnotnull", runtime.ParamLocationQuery, *params.SeenAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__l", runtime.ParamLocationQuery, *params.SeenAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__like", runtime.ParamLocationQuery, *params.SeenAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__nl", runtime.ParamLocationQuery, *params.SeenAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__nlike", runtime.ParamLocationQuery, *params.SeenAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__notlike", runtime.ParamLocationQuery, *params.SeenAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__il", runtime.ParamLocationQuery, *params.SeenAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__ilike", runtime.ParamLocationQuery, *params.SeenAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__nil", runtime.ParamLocationQuery, *params.SeenAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__nilike", runtime.ParamLocationQuery, *params.SeenAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__notilike", runtime.ParamLocationQuery, *params.SeenAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__desc", runtime.ParamLocationQuery, *params.SeenAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeenAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seen_at__asc", runtime.ParamLocationQuery, *params.SeenAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__eq", runtime.ParamLocationQuery, *params.ClassIdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__ne", runtime.ParamLocationQuery, *params.ClassIdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__gt", runtime.ParamLocationQuery, *params.ClassIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__gte", runtime.ParamLocationQuery, *params.ClassIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__lt", runtime.ParamLocationQuery, *params.ClassIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__lte", runtime.ParamLocationQuery, *params.ClassIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__in", runtime.ParamLocationQuery, *params.ClassIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__nin", runtime.ParamLocationQuery, *params.ClassIdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__notin", runtime.ParamLocationQuery, *params.ClassIdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__isnull", runtime.ParamLocationQuery, *params.ClassIdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__nisnull", runtime.ParamLocationQuery, *params.ClassIdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__isnotnull", runtime.ParamLocationQuery, *params.ClassIdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__l", runtime.ParamLocationQuery, *params.ClassIdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__like", runtime.ParamLocationQuery, *params.ClassIdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__nl", runtime.ParamLocationQuery, *params.ClassIdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__nlike", runtime.ParamLocationQuery, *params.ClassIdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__notlike", runtime.ParamLocationQuery, *params.ClassIdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__il", runtime.ParamLocationQuery, *params.ClassIdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__ilike", runtime.ParamLocationQuery, *params.ClassIdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__nil", runtime.ParamLocationQuery, *params.ClassIdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__nilike", runtime.ParamLocationQuery, *params.ClassIdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__notilike", runtime.ParamLocationQuery, *params.ClassIdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__desc", runtime.ParamLocationQuery, *params.ClassIdDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassIdAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_id__asc", runtime.ParamLocationQuery, *params.ClassIdAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__eq", runtime.ParamLocationQuery, *params.ClassNameEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__ne", runtime.ParamLocationQuery, *params.ClassNameNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__gt", runtime.ParamLocationQuery, *params.ClassNameGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__gte", runtime.ParamLocationQuery, *params.ClassNameGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__lt", runtime.ParamLocationQuery, *params.ClassNameLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__lte", runtime.ParamLocationQuery, *params.ClassNameLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__in", runtime.ParamLocationQuery, *params.ClassNameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__nin", runtime.ParamLocationQuery, *params.ClassNameNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__notin", runtime.ParamLocationQuery, *params.ClassNameNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__isnull", runtime.ParamLocationQuery, *params.ClassNameIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__nisnull", runtime.ParamLocationQuery, *params.ClassNameNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__isnotnull", runtime.ParamLocationQuery, *params.ClassNameIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__l", runtime.ParamLocationQuery, *params.ClassNameL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__like", runtime.ParamLocationQuery, *params.ClassNameLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__nl", runtime.ParamLocationQuery, *params.ClassNameNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__nlike", runtime.ParamLocationQuery, *params.ClassNameNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__notlike", runtime.ParamLocationQuery, *params.ClassNameNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__il", runtime.ParamLocationQuery, *params.ClassNameIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__ilike", runtime.ParamLocationQuery, *params.ClassNameIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__nil", runtime.ParamLocationQuery, *params.ClassNameNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__nilike", runtime.ParamLocationQuery, *params.ClassNameNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__notilike", runtime.ParamLocationQuery, *params.ClassNameNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__desc", runtime.ParamLocationQuery, *params.ClassNameDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClassNameAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class_name__asc", runtime.ParamLocationQuery, *params.ClassNameAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__eq", runtime.ParamLocationQuery, *params.ScoreEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__ne", runtime.ParamLocationQuery, *params.ScoreNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__gt", runtime.ParamLocationQuery, *params.ScoreGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__gte", runtime.ParamLocationQuery, *params.ScoreGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__lt", runtime.ParamLocationQuery, *params.ScoreLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__lte", runtime.ParamLocationQuery, *params.ScoreLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__in", runtime.ParamLocationQuery, *params.ScoreIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__nin", runtime.ParamLocationQuery, *params.ScoreNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__notin", runtime.ParamLocationQuery, *params.ScoreNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__isnull", runtime.ParamLocationQuery, *params.ScoreIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__nisnull", runtime.ParamLocationQuery, *params.ScoreNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__isnotnull", runtime.ParamLocationQuery, *params.ScoreIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__l", runtime.ParamLocationQuery, *params.ScoreL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__like", runtime.ParamLocationQuery, *params.ScoreLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__nl", runtime.ParamLocationQuery, *params.ScoreNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__nlike", runtime.ParamLocationQuery, *params.ScoreNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__notlike", runtime.ParamLocationQuery, *params.ScoreNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__il", runtime.ParamLocationQuery, *params.ScoreIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__ilike", runtime.ParamLocationQuery, *params.ScoreIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__nil", runtime.ParamLocationQuery, *params.ScoreNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__nilike", runtime.ParamLocationQuery, *params.ScoreNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__notilike", runtime.ParamLocationQuery, *params.ScoreNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__desc", runtime.ParamLocationQuery, *params.ScoreDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score__asc", runtime.ParamLocationQuery, *params.ScoreAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__eq", runtime.ParamLocationQuery, *params.CameraIdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__ne", runtime.ParamLocationQuery, *params.CameraIdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__gt", runtime.ParamLocationQuery, *params.CameraIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__gte", runtime.ParamLocationQuery, *params.CameraIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__lt", runtime.ParamLocationQuery, *params.CameraIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__lte", runtime.ParamLocationQuery, *params.CameraIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__in", runtime.ParamLocationQuery, *params.CameraIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nin", runtime.ParamLocationQuery, *params.CameraIdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__notin", runtime.ParamLocationQuery, *params.CameraIdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__isnull", runtime.ParamLocationQuery, *params.CameraIdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nisnull", runtime.ParamLocationQuery, *params.CameraIdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__isnotnull", runtime.ParamLocationQuery, *params.CameraIdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__l", runtime.ParamLocationQuery, *params.CameraIdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__like", runtime.ParamLocationQuery, *params.CameraIdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nl", runtime.ParamLocationQuery, *params.CameraIdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nlike", runtime.ParamLocationQuery, *params.CameraIdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__notlike", runtime.ParamLocationQuery, *params.CameraIdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__il", runtime.ParamLocationQuery, *params.CameraIdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__ilike", runtime.ParamLocationQuery, *params.CameraIdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nil", runtime.ParamLocationQuery, *params.CameraIdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nilike", runtime.ParamLocationQuery, *params.CameraIdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__notilike", runtime.ParamLocationQuery, *params.CameraIdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__desc", runtime.ParamLocationQuery, *params.CameraIdDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__asc", runtime.ParamLocationQuery, *params.CameraIdAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDetectionsRequest calls the generic PostDetections builder with application/json body
func NewPostDetectionsRequest(server string, body PostDetectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDetectionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDetectionsRequestWithBody generates requests for PostDetections with any type of body
func NewPostDetectionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDetectionRequest generates requests for DeleteDetection
func NewDeleteDetectionRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDetectionRequest generates requests for GetDetection
func NewGetDetectionRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchDetectionRequest calls the generic PatchDetection builder with application/json body
func NewPatchDetectionRequest(server string, primaryKey interface{}, body PatchDetectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDetectionRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPatchDetectionRequestWithBody generates requests for PatchDetection with any type of body
func NewPatchDetectionRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDetectionRequest calls the generic PutDetection builder with application/json body
func NewPutDetectionRequest(server string, primaryKey interface{}, body PutDetectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDetectionRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPutDetectionRequestWithBody generates requests for PutDetection with any type of body
func NewPutDetectionRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVideosRequest generates requests for GetVideos
func NewGetVideosRequest(server string, params *GetVideosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/videos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__eq", runtime.ParamLocationQuery, *params.IdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ne", runtime.ParamLocationQuery, *params.IdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nin", runtime.ParamLocationQuery, *params.IdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notin", runtime.ParamLocationQuery, *params.IdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnull", runtime.ParamLocationQuery, *params.IdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nisnull", runtime.ParamLocationQuery, *params.IdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnotnull", runtime.ParamLocationQuery, *params.IdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__l", runtime.ParamLocationQuery, *params.IdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__like", runtime.ParamLocationQuery, *params.IdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nl", runtime.ParamLocationQuery, *params.IdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nlike", runtime.ParamLocationQuery, *params.IdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notlike", runtime.ParamLocationQuery, *params.IdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__il", runtime.ParamLocationQuery, *params.IdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ilike", runtime.ParamLocationQuery, *params.IdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nil", runtime.ParamLocationQuery, *params.IdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nilike", runtime.ParamLocationQuery, *params.IdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notilike", runtime.ParamLocationQuery, *params.IdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__desc", runtime.ParamLocationQuery, *params.IdDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__asc", runtime.ParamLocationQuery, *params.IdAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__eq", runtime.ParamLocationQuery, *params.CreatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ne", runtime.ParamLocationQuery, *params.CreatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gt", runtime.ParamLocationQuery, *params.CreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gte", runtime.ParamLocationQuery, *params.CreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lt", runtime.ParamLocationQuery, *params.CreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lte", runtime.ParamLocationQuery, *params.CreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__in", runtime.ParamLocationQuery, *params.CreatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nin", runtime.ParamLocationQuery, *params.CreatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notin", runtime.ParamLocationQuery, *params.CreatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnull", runtime.ParamLocationQuery, *params.CreatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nisnull", runtime.ParamLocationQuery, *params.CreatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnotnull", runtime.ParamLocationQuery, *params.CreatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__l", runtime.ParamLocationQuery, *params.CreatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__like", runtime.ParamLocationQuery, *params.CreatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nl", runtime.ParamLocationQuery, *params.CreatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nlike", runtime.ParamLocationQuery, *params.CreatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notlike", runtime.ParamLocationQuery, *params.CreatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__il", runtime.ParamLocationQuery, *params.CreatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ilike", runtime.ParamLocationQuery, *params.CreatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nil", runtime.ParamLocationQuery, *params.CreatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nilike", runtime.ParamLocationQuery, *params.CreatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notilike", runtime.ParamLocationQuery, *params.CreatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__desc", runtime.ParamLocationQuery, *params.CreatedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__asc", runtime.ParamLocationQuery, *params.CreatedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__eq", runtime.ParamLocationQuery, *params.UpdatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ne", runtime.ParamLocationQuery, *params.UpdatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gt", runtime.ParamLocationQuery, *params.UpdatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gte", runtime.ParamLocationQuery, *params.UpdatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lt", runtime.ParamLocationQuery, *params.UpdatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lte", runtime.ParamLocationQuery, *params.UpdatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__in", runtime.ParamLocationQuery, *params.UpdatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nin", runtime.ParamLocationQuery, *params.UpdatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notin", runtime.ParamLocationQuery, *params.UpdatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nisnull", runtime.ParamLocationQuery, *params.UpdatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnotnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__l", runtime.ParamLocationQuery, *params.UpdatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__like", runtime.ParamLocationQuery, *params.UpdatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nl", runtime.ParamLocationQuery, *params.UpdatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nlike", runtime.ParamLocationQuery, *params.UpdatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notlike", runtime.ParamLocationQuery, *params.UpdatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__il", runtime.ParamLocationQuery, *params.UpdatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ilike", runtime.ParamLocationQuery, *params.UpdatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nil", runtime.ParamLocationQuery, *params.UpdatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nilike", runtime.ParamLocationQuery, *params.UpdatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notilike", runtime.ParamLocationQuery, *params.UpdatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__desc", runtime.ParamLocationQuery, *params.UpdatedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__asc", runtime.ParamLocationQuery, *params.UpdatedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__eq", runtime.ParamLocationQuery, *params.DeletedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ne", runtime.ParamLocationQuery, *params.DeletedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gt", runtime.ParamLocationQuery, *params.DeletedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gte", runtime.ParamLocationQuery, *params.DeletedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lt", runtime.ParamLocationQuery, *params.DeletedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lte", runtime.ParamLocationQuery, *params.DeletedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__in", runtime.ParamLocationQuery, *params.DeletedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nin", runtime.ParamLocationQuery, *params.DeletedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notin", runtime.ParamLocationQuery, *params.DeletedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnull", runtime.ParamLocationQuery, *params.DeletedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nisnull", runtime.ParamLocationQuery, *params.DeletedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnotnull", runtime.ParamLocationQuery, *params.DeletedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__l", runtime.ParamLocationQuery, *params.DeletedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__like", runtime.ParamLocationQuery, *params.DeletedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nl", runtime.ParamLocationQuery, *params.DeletedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nlike", runtime.ParamLocationQuery, *params.DeletedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notlike", runtime.ParamLocationQuery, *params.DeletedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__il", runtime.ParamLocationQuery, *params.DeletedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ilike", runtime.ParamLocationQuery, *params.DeletedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nil", runtime.ParamLocationQuery, *params.DeletedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nilike", runtime.ParamLocationQuery, *params.DeletedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notilike", runtime.ParamLocationQuery, *params.DeletedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__desc", runtime.ParamLocationQuery, *params.DeletedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__asc", runtime.ParamLocationQuery, *params.DeletedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__eq", runtime.ParamLocationQuery, *params.FileNameEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__ne", runtime.ParamLocationQuery, *params.FileNameNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__gt", runtime.ParamLocationQuery, *params.FileNameGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__gte", runtime.ParamLocationQuery, *params.FileNameGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__lt", runtime.ParamLocationQuery, *params.FileNameLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__lte", runtime.ParamLocationQuery, *params.FileNameLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__in", runtime.ParamLocationQuery, *params.FileNameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__nin", runtime.ParamLocationQuery, *params.FileNameNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__notin", runtime.ParamLocationQuery, *params.FileNameNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__isnull", runtime.ParamLocationQuery, *params.FileNameIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__nisnull", runtime.ParamLocationQuery, *params.FileNameNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__isnotnull", runtime.ParamLocationQuery, *params.FileNameIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__l", runtime.ParamLocationQuery, *params.FileNameL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__like", runtime.ParamLocationQuery, *params.FileNameLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__nl", runtime.ParamLocationQuery, *params.FileNameNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__nlike", runtime.ParamLocationQuery, *params.FileNameNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__notlike", runtime.ParamLocationQuery, *params.FileNameNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__il", runtime.ParamLocationQuery, *params.FileNameIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__ilike", runtime.ParamLocationQuery, *params.FileNameIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__nil", runtime.ParamLocationQuery, *params.FileNameNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__nilike", runtime.ParamLocationQuery, *params.FileNameNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__notilike", runtime.ParamLocationQuery, *params.FileNameNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__desc", runtime.ParamLocationQuery, *params.FileNameDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileNameAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name__asc", runtime.ParamLocationQuery, *params.FileNameAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__eq", runtime.ParamLocationQuery, *params.StartedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__ne", runtime.ParamLocationQuery, *params.StartedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__gt", runtime.ParamLocationQuery, *params.StartedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__gte", runtime.ParamLocationQuery, *params.StartedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__lt", runtime.ParamLocationQuery, *params.StartedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__lte", runtime.ParamLocationQuery, *params.StartedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__in", runtime.ParamLocationQuery, *params.StartedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__nin", runtime.ParamLocationQuery, *params.StartedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__notin", runtime.ParamLocationQuery, *params.StartedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__isnull", runtime.ParamLocationQuery, *params.StartedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__nisnull", runtime.ParamLocationQuery, *params.StartedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__isnotnull", runtime.ParamLocationQuery, *params.StartedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__l", runtime.ParamLocationQuery, *params.StartedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__like", runtime.ParamLocationQuery, *params.StartedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__nl", runtime.ParamLocationQuery, *params.StartedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__nlike", runtime.ParamLocationQuery, *params.StartedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__notlike", runtime.ParamLocationQuery, *params.StartedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__il", runtime.ParamLocationQuery, *params.StartedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__ilike", runtime.ParamLocationQuery, *params.StartedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__nil", runtime.ParamLocationQuery, *params.StartedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__nilike", runtime.ParamLocationQuery, *params.StartedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__notilike", runtime.ParamLocationQuery, *params.StartedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__desc", runtime.ParamLocationQuery, *params.StartedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__asc", runtime.ParamLocationQuery, *params.StartedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__eq", runtime.ParamLocationQuery, *params.EndedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__ne", runtime.ParamLocationQuery, *params.EndedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__gt", runtime.ParamLocationQuery, *params.EndedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__gte", runtime.ParamLocationQuery, *params.EndedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__lt", runtime.ParamLocationQuery, *params.EndedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__lte", runtime.ParamLocationQuery, *params.EndedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__in", runtime.ParamLocationQuery, *params.EndedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__nin", runtime.ParamLocationQuery, *params.EndedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__notin", runtime.ParamLocationQuery, *params.EndedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__isnull", runtime.ParamLocationQuery, *params.EndedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__nisnull", runtime.ParamLocationQuery, *params.EndedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__isnotnull", runtime.ParamLocationQuery, *params.EndedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__l", runtime.ParamLocationQuery, *params.EndedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__like", runtime.ParamLocationQuery, *params.EndedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__nl", runtime.ParamLocationQuery, *params.EndedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__nlike", runtime.ParamLocationQuery, *params.EndedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__notlike", runtime.ParamLocationQuery, *params.EndedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__il", runtime.ParamLocationQuery, *params.EndedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__ilike", runtime.ParamLocationQuery, *params.EndedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__nil", runtime.ParamLocationQuery, *params.EndedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__nilike", runtime.ParamLocationQuery, *params.EndedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__notilike", runtime.ParamLocationQuery, *params.EndedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__desc", runtime.ParamLocationQuery, *params.EndedAtDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndedAtAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__asc", runtime.ParamLocationQuery, *params.EndedAtAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__eq", runtime.ParamLocationQuery, *params.DurationEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__ne", runtime.ParamLocationQuery, *params.DurationNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__gt", runtime.ParamLocationQuery, *params.DurationGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__gte", runtime.ParamLocationQuery, *params.DurationGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__lt", runtime.ParamLocationQuery, *params.DurationLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__lte", runtime.ParamLocationQuery, *params.DurationLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__in", runtime.ParamLocationQuery, *params.DurationIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__nin", runtime.ParamLocationQuery, *params.DurationNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__notin", runtime.ParamLocationQuery, *params.DurationNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__isnull", runtime.ParamLocationQuery, *params.DurationIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__nisnull", runtime.ParamLocationQuery, *params.DurationNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__isnotnull", runtime.ParamLocationQuery, *params.DurationIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__l", runtime.ParamLocationQuery, *params.DurationL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__like", runtime.ParamLocationQuery, *params.DurationLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__nl", runtime.ParamLocationQuery, *params.DurationNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__nlike", runtime.ParamLocationQuery, *params.DurationNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__notlike", runtime.ParamLocationQuery, *params.DurationNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__il", runtime.ParamLocationQuery, *params.DurationIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__ilike", runtime.ParamLocationQuery, *params.DurationIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__nil", runtime.ParamLocationQuery, *params.DurationNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__nilike", runtime.ParamLocationQuery, *params.DurationNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__notilike", runtime.ParamLocationQuery, *params.DurationNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__desc", runtime.ParamLocationQuery, *params.DurationDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DurationAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration__asc", runtime.ParamLocationQuery, *params.DurationAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__eq", runtime.ParamLocationQuery, *params.FileSizeEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__ne", runtime.ParamLocationQuery, *params.FileSizeNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__gt", runtime.ParamLocationQuery, *params.FileSizeGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__gte", runtime.ParamLocationQuery, *params.FileSizeGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__lt", runtime.ParamLocationQuery, *params.FileSizeLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__lte", runtime.ParamLocationQuery, *params.FileSizeLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__in", runtime.ParamLocationQuery, *params.FileSizeIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__nin", runtime.ParamLocationQuery, *params.FileSizeNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__notin", runtime.ParamLocationQuery, *params.FileSizeNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__isnull", runtime.ParamLocationQuery, *params.FileSizeIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__nisnull", runtime.ParamLocationQuery, *params.FileSizeNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__isnotnull", runtime.ParamLocationQuery, *params.FileSizeIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__l", runtime.ParamLocationQuery, *params.FileSizeL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__like", runtime.ParamLocationQuery, *params.FileSizeLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__nl", runtime.ParamLocationQuery, *params.FileSizeNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__nlike", runtime.ParamLocationQuery, *params.FileSizeNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__notlike", runtime.ParamLocationQuery, *params.FileSizeNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__il", runtime.ParamLocationQuery, *params.FileSizeIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__ilike", runtime.ParamLocationQuery, *params.FileSizeIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__nil", runtime.ParamLocationQuery, *params.FileSizeNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__nilike", runtime.ParamLocationQuery, *params.FileSizeNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__notilike", runtime.ParamLocationQuery, *params.FileSizeNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__desc", runtime.ParamLocationQuery, *params.FileSizeDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileSizeAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_size__asc", runtime.ParamLocationQuery, *params.FileSizeAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__eq", runtime.ParamLocationQuery, *params.ThumbnailNameEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__ne", runtime.ParamLocationQuery, *params.ThumbnailNameNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__gt", runtime.ParamLocationQuery, *params.ThumbnailNameGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__gte", runtime.ParamLocationQuery, *params.ThumbnailNameGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__lt", runtime.ParamLocationQuery, *params.ThumbnailNameLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__lte", runtime.ParamLocationQuery, *params.ThumbnailNameLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__in", runtime.ParamLocationQuery, *params.ThumbnailNameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__nin", runtime.ParamLocationQuery, *params.ThumbnailNameNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__notin", runtime.ParamLocationQuery, *params.ThumbnailNameNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__isnull", runtime.ParamLocationQuery, *params.ThumbnailNameIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__nisnull", runtime.ParamLocationQuery, *params.ThumbnailNameNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__isnotnull", runtime.ParamLocationQuery, *params.ThumbnailNameIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__l", runtime.ParamLocationQuery, *params.ThumbnailNameL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__like", runtime.ParamLocationQuery, *params.ThumbnailNameLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__nl", runtime.ParamLocationQuery, *params.ThumbnailNameNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__nlike", runtime.ParamLocationQuery, *params.ThumbnailNameNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__notlike", runtime.ParamLocationQuery, *params.ThumbnailNameNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__il", runtime.ParamLocationQuery, *params.ThumbnailNameIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__ilike", runtime.ParamLocationQuery, *params.ThumbnailNameIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__nil", runtime.ParamLocationQuery, *params.ThumbnailNameNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__nilike", runtime.ParamLocationQuery, *params.ThumbnailNameNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__notilike", runtime.ParamLocationQuery, *params.ThumbnailNameNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__desc", runtime.ParamLocationQuery, *params.ThumbnailNameDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThumbnailNameAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_name__asc", runtime.ParamLocationQuery, *params.ThumbnailNameAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__eq", runtime.ParamLocationQuery, *params.StatusEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ne", runtime.ParamLocationQuery, *params.StatusNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__gt", runtime.ParamLocationQuery, *params.StatusGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__gte", runtime.ParamLocationQuery, *params.StatusGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__lt", runtime.ParamLocationQuery, *params.StatusLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__lte", runtime.ParamLocationQuery, *params.StatusLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__in", runtime.ParamLocationQuery, *params.StatusIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nin", runtime.ParamLocationQuery, *params.StatusNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__notin", runtime.ParamLocationQuery, *params.StatusNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__isnull", runtime.ParamLocationQuery, *params.StatusIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nisnull", runtime.ParamLocationQuery, *params.StatusNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__isnotnull", runtime.ParamLocationQuery, *params.StatusIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__l", runtime.ParamLocationQuery, *params.StatusL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__like", runtime.ParamLocationQuery, *params.StatusLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nl", runtime.ParamLocationQuery, *params.StatusNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nlike", runtime.ParamLocationQuery, *params.StatusNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__notlike", runtime.ParamLocationQuery, *params.StatusNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__il", runtime.ParamLocationQuery, *params.StatusIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ilike", runtime.ParamLocationQuery, *params.StatusIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nil", runtime.ParamLocationQuery, *params.StatusNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nilike", runtime.ParamLocationQuery, *params.StatusNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__notilike", runtime.ParamLocationQuery, *params.StatusNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__desc", runtime.ParamLocationQuery, *params.StatusDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__asc", runtime.ParamLocationQuery, *params.StatusAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__eq", runtime.ParamLocationQuery, *params.CameraIdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__ne", runtime.ParamLocationQuery, *params.CameraIdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__gt", runtime.ParamLocationQuery, *params.CameraIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__gte", runtime.ParamLocationQuery, *params.CameraIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__lt", runtime.ParamLocationQuery, *params.CameraIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__lte", runtime.ParamLocationQuery, *params.CameraIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__in", runtime.ParamLocationQuery, *params.CameraIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nin", runtime.ParamLocationQuery, *params.CameraIdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__notin", runtime.ParamLocationQuery, *params.CameraIdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__isnull", runtime.ParamLocationQuery, *params.CameraIdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nisnull", runtime.ParamLocationQuery, *params.CameraIdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__isnotnull", runtime.ParamLocationQuery, *params.CameraIdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__l", runtime.ParamLocationQuery, *params.CameraIdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__like", runtime.ParamLocationQuery, *params.CameraIdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nl", runtime.ParamLocationQuery, *params.CameraIdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nlike", runtime.ParamLocationQuery, *params.CameraIdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__notlike", runtime.ParamLocationQuery, *params.CameraIdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__il", runtime.ParamLocationQuery, *params.CameraIdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__ilike", runtime.ParamLocationQuery, *params.CameraIdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nil", runtime.ParamLocationQuery, *params.CameraIdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__nilike", runtime.ParamLocationQuery, *params.CameraIdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__notilike", runtime.ParamLocationQuery, *params.CameraIdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__desc", runtime.ParamLocationQuery, *params.CameraIdDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CameraIdAsc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "camera_id__asc", runtime.ParamLocationQuery, *params.CameraIdAsc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVideosRequest calls the generic PostVideos builder with application/json body
func NewPostVideosRequest(server string, body PostVideosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVideosRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVideosRequestWithBody generates requests for PostVideos with any type of body
func NewPostVideosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/videos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVideoRequest generates requests for DeleteVideo
func NewDeleteVideoRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/videos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideoRequest generates requests for GetVideo
func NewGetVideoRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/videos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchVideoRequest calls the generic PatchVideo builder with application/json body
func NewPatchVideoRequest(server string, primaryKey interface{}, body PatchVideoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchVideoRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPatchVideoRequestWithBody generates requests for PatchVideo with any type of body
func NewPatchVideoRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/videos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVideoRequest calls the generic PutVideo builder with application/json body
func NewPutVideoRequest(server string, primaryKey interface{}, body PutVideoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVideoRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPutVideoRequestWithBody generates requests for PutVideo with any type of body
func NewPutVideoRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/videos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCamerasWithResponse request
	GetCamerasWithResponse(ctx context.Context, params *GetCamerasParams, reqEditors ...RequestEditorFn) (*GetCamerasResponse, error)

	// PostCamerasWithBodyWithResponse request with any body
	PostCamerasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCamerasResponse, error)

	PostCamerasWithResponse(ctx context.Context, body PostCamerasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCamerasResponse, error)

	// DeleteCameraWithResponse request
	DeleteCameraWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteCameraResponse, error)

	// GetCameraWithResponse request
	GetCameraWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetCameraResponse, error)

	// PatchCameraWithBodyWithResponse request with any body
	PatchCameraWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCameraResponse, error)

	PatchCameraWithResponse(ctx context.Context, primaryKey interface{}, body PatchCameraJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCameraResponse, error)

	// PutCameraWithBodyWithResponse request with any body
	PutCameraWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCameraResponse, error)

	PutCameraWithResponse(ctx context.Context, primaryKey interface{}, body PutCameraJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCameraResponse, error)

	// GetDetectionsWithResponse request
	GetDetectionsWithResponse(ctx context.Context, params *GetDetectionsParams, reqEditors ...RequestEditorFn) (*GetDetectionsResponse, error)

	// PostDetectionsWithBodyWithResponse request with any body
	PostDetectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDetectionsResponse, error)

	PostDetectionsWithResponse(ctx context.Context, body PostDetectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDetectionsResponse, error)

	// DeleteDetectionWithResponse request
	DeleteDetectionWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteDetectionResponse, error)

	// GetDetectionWithResponse request
	GetDetectionWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetDetectionResponse, error)

	// PatchDetectionWithBodyWithResponse request with any body
	PatchDetectionWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDetectionResponse, error)

	PatchDetectionWithResponse(ctx context.Context, primaryKey interface{}, body PatchDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDetectionResponse, error)

	// PutDetectionWithBodyWithResponse request with any body
	PutDetectionWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDetectionResponse, error)

	PutDetectionWithResponse(ctx context.Context, primaryKey interface{}, body PutDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDetectionResponse, error)

	// GetVideosWithResponse request
	GetVideosWithResponse(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*GetVideosResponse, error)

	// PostVideosWithBodyWithResponse request with any body
	PostVideosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVideosResponse, error)

	PostVideosWithResponse(ctx context.Context, body PostVideosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVideosResponse, error)

	// DeleteVideoWithResponse request
	DeleteVideoWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteVideoResponse, error)

	// GetVideoWithResponse request
	GetVideoWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetVideoResponse, error)

	// PatchVideoWithBodyWithResponse request with any body
	PatchVideoWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchVideoResponse, error)

	PatchVideoWithResponse(ctx context.Context, primaryKey interface{}, body PatchVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVideoResponse, error)

	// PutVideoWithBodyWithResponse request with any body
	PutVideoWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoResponse, error)

	PutVideoWithResponse(ctx context.Context, primaryKey interface{}, body PutVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoResponse, error)
}

type GetCamerasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string   `json:"error,omitempty"`
		Objects *[]Camera `json:"objects,omitempty"`
		Status  int32     `json:"status"`
		Success bool      `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCamerasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCamerasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCamerasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string   `json:"error,omitempty"`
		Objects *[]Camera `json:"objects,omitempty"`
		Status  int32     `json:"status"`
		Success bool      `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PostCamerasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCamerasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCameraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteCameraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCameraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCameraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string   `json:"error,omitempty"`
		Objects *[]Camera `json:"objects,omitempty"`
		Status  int32     `json:"status"`
		Success bool      `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCameraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCameraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCameraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string   `json:"error,omitempty"`
		Objects *[]Camera `json:"objects,omitempty"`
		Status  int32     `json:"status"`
		Success bool      `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchCameraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCameraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCameraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string   `json:"error,omitempty"`
		Objects *[]Camera `json:"objects,omitempty"`
		Status  int32     `json:"status"`
		Success bool      `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PutCameraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCameraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDetectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string      `json:"error,omitempty"`
		Objects *[]Detection `json:"objects,omitempty"`
		Status  int32        `json:"status"`
		Success bool         `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDetectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDetectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDetectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string      `json:"error,omitempty"`
		Objects *[]Detection `json:"objects,omitempty"`
		Status  int32        `json:"status"`
		Success bool         `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PostDetectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDetectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string      `json:"error,omitempty"`
		Objects *[]Detection `json:"objects,omitempty"`
		Status  int32        `json:"status"`
		Success bool         `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string      `json:"error,omitempty"`
		Objects *[]Detection `json:"objects,omitempty"`
		Status  int32        `json:"status"`
		Success bool         `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string      `json:"error,omitempty"`
		Objects *[]Detection `json:"objects,omitempty"`
		Status  int32        `json:"status"`
		Success bool         `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PutDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string  `json:"error,omitempty"`
		Objects *[]Video `json:"objects,omitempty"`
		Status  int32    `json:"status"`
		Success bool     `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVideosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string  `json:"error,omitempty"`
		Objects *[]Video `json:"objects,omitempty"`
		Status  int32    `json:"status"`
		Success bool     `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PostVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string  `json:"error,omitempty"`
		Objects *[]Video `json:"objects,omitempty"`
		Status  int32    `json:"status"`
		Success bool     `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string  `json:"error,omitempty"`
		Objects *[]Video `json:"objects,omitempty"`
		Status  int32    `json:"status"`
		Success bool     `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string  `json:"error,omitempty"`
		Objects *[]Video `json:"objects,omitempty"`
		Status  int32    `json:"status"`
		Success bool     `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PutVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCamerasWithResponse request returning *GetCamerasResponse
func (c *ClientWithResponses) GetCamerasWithResponse(ctx context.Context, params *GetCamerasParams, reqEditors ...RequestEditorFn) (*GetCamerasResponse, error) {
	rsp, err := c.GetCameras(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCamerasResponse(rsp)
}

// PostCamerasWithBodyWithResponse request with arbitrary body returning *PostCamerasResponse
func (c *ClientWithResponses) PostCamerasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCamerasResponse, error) {
	rsp, err := c.PostCamerasWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCamerasResponse(rsp)
}

func (c *ClientWithResponses) PostCamerasWithResponse(ctx context.Context, body PostCamerasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCamerasResponse, error) {
	rsp, err := c.PostCameras(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCamerasResponse(rsp)
}

// DeleteCameraWithResponse request returning *DeleteCameraResponse
func (c *ClientWithResponses) DeleteCameraWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteCameraResponse, error) {
	rsp, err := c.DeleteCamera(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCameraResponse(rsp)
}

// GetCameraWithResponse request returning *GetCameraResponse
func (c *ClientWithResponses) GetCameraWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetCameraResponse, error) {
	rsp, err := c.GetCamera(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCameraResponse(rsp)
}

// PatchCameraWithBodyWithResponse request with arbitrary body returning *PatchCameraResponse
func (c *ClientWithResponses) PatchCameraWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCameraResponse, error) {
	rsp, err := c.PatchCameraWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCameraResponse(rsp)
}

func (c *ClientWithResponses) PatchCameraWithResponse(ctx context.Context, primaryKey interface{}, body PatchCameraJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCameraResponse, error) {
	rsp, err := c.PatchCamera(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCameraResponse(rsp)
}

// PutCameraWithBodyWithResponse request with arbitrary body returning *PutCameraResponse
func (c *ClientWithResponses) PutCameraWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCameraResponse, error) {
	rsp, err := c.PutCameraWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCameraResponse(rsp)
}

func (c *ClientWithResponses) PutCameraWithResponse(ctx context.Context, primaryKey interface{}, body PutCameraJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCameraResponse, error) {
	rsp, err := c.PutCamera(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCameraResponse(rsp)
}

// GetDetectionsWithResponse request returning *GetDetectionsResponse
func (c *ClientWithResponses) GetDetectionsWithResponse(ctx context.Context, params *GetDetectionsParams, reqEditors ...RequestEditorFn) (*GetDetectionsResponse, error) {
	rsp, err := c.GetDetections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDetectionsResponse(rsp)
}

// PostDetectionsWithBodyWithResponse request with arbitrary body returning *PostDetectionsResponse
func (c *ClientWithResponses) PostDetectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDetectionsResponse, error) {
	rsp, err := c.PostDetectionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDetectionsResponse(rsp)
}

func (c *ClientWithResponses) PostDetectionsWithResponse(ctx context.Context, body PostDetectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDetectionsResponse, error) {
	rsp, err := c.PostDetections(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDetectionsResponse(rsp)
}

// DeleteDetectionWithResponse request returning *DeleteDetectionResponse
func (c *ClientWithResponses) DeleteDetectionWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteDetectionResponse, error) {
	rsp, err := c.DeleteDetection(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDetectionResponse(rsp)
}

// GetDetectionWithResponse request returning *GetDetectionResponse
func (c *ClientWithResponses) GetDetectionWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetDetectionResponse, error) {
	rsp, err := c.GetDetection(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDetectionResponse(rsp)
}

// PatchDetectionWithBodyWithResponse request with arbitrary body returning *PatchDetectionResponse
func (c *ClientWithResponses) PatchDetectionWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDetectionResponse, error) {
	rsp, err := c.PatchDetectionWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDetectionResponse(rsp)
}

func (c *ClientWithResponses) PatchDetectionWithResponse(ctx context.Context, primaryKey interface{}, body PatchDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDetectionResponse, error) {
	rsp, err := c.PatchDetection(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDetectionResponse(rsp)
}

// PutDetectionWithBodyWithResponse request with arbitrary body returning *PutDetectionResponse
func (c *ClientWithResponses) PutDetectionWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDetectionResponse, error) {
	rsp, err := c.PutDetectionWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDetectionResponse(rsp)
}

func (c *ClientWithResponses) PutDetectionWithResponse(ctx context.Context, primaryKey interface{}, body PutDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDetectionResponse, error) {
	rsp, err := c.PutDetection(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDetectionResponse(rsp)
}

// GetVideosWithResponse request returning *GetVideosResponse
func (c *ClientWithResponses) GetVideosWithResponse(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*GetVideosResponse, error) {
	rsp, err := c.GetVideos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosResponse(rsp)
}

// PostVideosWithBodyWithResponse request with arbitrary body returning *PostVideosResponse
func (c *ClientWithResponses) PostVideosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVideosResponse, error) {
	rsp, err := c.PostVideosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVideosResponse(rsp)
}

func (c *ClientWithResponses) PostVideosWithResponse(ctx context.Context, body PostVideosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVideosResponse, error) {
	rsp, err := c.PostVideos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVideosResponse(rsp)
}

// DeleteVideoWithResponse request returning *DeleteVideoResponse
func (c *ClientWithResponses) DeleteVideoWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteVideoResponse, error) {
	rsp, err := c.DeleteVideo(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVideoResponse(rsp)
}

// GetVideoWithResponse request returning *GetVideoResponse
func (c *ClientWithResponses) GetVideoWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetVideoResponse, error) {
	rsp, err := c.GetVideo(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoResponse(rsp)
}

// PatchVideoWithBodyWithResponse request with arbitrary body returning *PatchVideoResponse
func (c *ClientWithResponses) PatchVideoWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchVideoResponse, error) {
	rsp, err := c.PatchVideoWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVideoResponse(rsp)
}

func (c *ClientWithResponses) PatchVideoWithResponse(ctx context.Context, primaryKey interface{}, body PatchVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVideoResponse, error) {
	rsp, err := c.PatchVideo(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVideoResponse(rsp)
}

// PutVideoWithBodyWithResponse request with arbitrary body returning *PutVideoResponse
func (c *ClientWithResponses) PutVideoWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoResponse, error) {
	rsp, err := c.PutVideoWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoResponse(rsp)
}

func (c *ClientWithResponses) PutVideoWithResponse(ctx context.Context, primaryKey interface{}, body PutVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoResponse, error) {
	rsp, err := c.PutVideo(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoResponse(rsp)
}

// ParseGetCamerasResponse parses an HTTP response from a GetCamerasWithResponse call
func ParseGetCamerasResponse(rsp *http.Response) (*GetCamerasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCamerasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string   `json:"error,omitempty"`
			Objects *[]Camera `json:"objects,omitempty"`
			Status  int32     `json:"status"`
			Success bool      `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCamerasResponse parses an HTTP response from a PostCamerasWithResponse call
func ParsePostCamerasResponse(rsp *http.Response) (*PostCamerasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCamerasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string   `json:"error,omitempty"`
			Objects *[]Camera `json:"objects,omitempty"`
			Status  int32     `json:"status"`
			Success bool      `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCameraResponse parses an HTTP response from a DeleteCameraWithResponse call
func ParseDeleteCameraResponse(rsp *http.Response) (*DeleteCameraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCameraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCameraResponse parses an HTTP response from a GetCameraWithResponse call
func ParseGetCameraResponse(rsp *http.Response) (*GetCameraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCameraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string   `json:"error,omitempty"`
			Objects *[]Camera `json:"objects,omitempty"`
			Status  int32     `json:"status"`
			Success bool      `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchCameraResponse parses an HTTP response from a PatchCameraWithResponse call
func ParsePatchCameraResponse(rsp *http.Response) (*PatchCameraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCameraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string   `json:"error,omitempty"`
			Objects *[]Camera `json:"objects,omitempty"`
			Status  int32     `json:"status"`
			Success bool      `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutCameraResponse parses an HTTP response from a PutCameraWithResponse call
func ParsePutCameraResponse(rsp *http.Response) (*PutCameraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCameraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string   `json:"error,omitempty"`
			Objects *[]Camera `json:"objects,omitempty"`
			Status  int32     `json:"status"`
			Success bool      `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDetectionsResponse parses an HTTP response from a GetDetectionsWithResponse call
func ParseGetDetectionsResponse(rsp *http.Response) (*GetDetectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDetectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string      `json:"error,omitempty"`
			Objects *[]Detection `json:"objects,omitempty"`
			Status  int32        `json:"status"`
			Success bool         `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDetectionsResponse parses an HTTP response from a PostDetectionsWithResponse call
func ParsePostDetectionsResponse(rsp *http.Response) (*PostDetectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDetectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string      `json:"error,omitempty"`
			Objects *[]Detection `json:"objects,omitempty"`
			Status  int32        `json:"status"`
			Success bool         `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteDetectionResponse parses an HTTP response from a DeleteDetectionWithResponse call
func ParseDeleteDetectionResponse(rsp *http.Response) (*DeleteDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDetectionResponse parses an HTTP response from a GetDetectionWithResponse call
func ParseGetDetectionResponse(rsp *http.Response) (*GetDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string      `json:"error,omitempty"`
			Objects *[]Detection `json:"objects,omitempty"`
			Status  int32        `json:"status"`
			Success bool         `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchDetectionResponse parses an HTTP response from a PatchDetectionWithResponse call
func ParsePatchDetectionResponse(rsp *http.Response) (*PatchDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string      `json:"error,omitempty"`
			Objects *[]Detection `json:"objects,omitempty"`
			Status  int32        `json:"status"`
			Success bool         `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutDetectionResponse parses an HTTP response from a PutDetectionWithResponse call
func ParsePutDetectionResponse(rsp *http.Response) (*PutDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string      `json:"error,omitempty"`
			Objects *[]Detection `json:"objects,omitempty"`
			Status  int32        `json:"status"`
			Success bool         `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVideosResponse parses an HTTP response from a GetVideosWithResponse call
func ParseGetVideosResponse(rsp *http.Response) (*GetVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string  `json:"error,omitempty"`
			Objects *[]Video `json:"objects,omitempty"`
			Status  int32    `json:"status"`
			Success bool     `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostVideosResponse parses an HTTP response from a PostVideosWithResponse call
func ParsePostVideosResponse(rsp *http.Response) (*PostVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string  `json:"error,omitempty"`
			Objects *[]Video `json:"objects,omitempty"`
			Status  int32    `json:"status"`
			Success bool     `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteVideoResponse parses an HTTP response from a DeleteVideoWithResponse call
func ParseDeleteVideoResponse(rsp *http.Response) (*DeleteVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVideoResponse parses an HTTP response from a GetVideoWithResponse call
func ParseGetVideoResponse(rsp *http.Response) (*GetVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string  `json:"error,omitempty"`
			Objects *[]Video `json:"objects,omitempty"`
			Status  int32    `json:"status"`
			Success bool     `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchVideoResponse parses an HTTP response from a PatchVideoWithResponse call
func ParsePatchVideoResponse(rsp *http.Response) (*PatchVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string  `json:"error,omitempty"`
			Objects *[]Video `json:"objects,omitempty"`
			Status  int32    `json:"status"`
			Success bool     `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutVideoResponse parses an HTTP response from a PutVideoWithResponse call
func ParsePutVideoResponse(rsp *http.Response) (*PutVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string  `json:"error,omitempty"`
			Objects *[]Video `json:"objects,omitempty"`
			Status  int32    `json:"status"`
			Success bool     `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+ydUY/btpbHv4rKdoFdwLeeTYI+DOCHNMkUg+a22aQt9qI7GHAkeoYpRSkk1Xt9B/7u",
	"C0m2RdqSPPJQ1jkonzLjscWfz+Gh9I+O+H8kcZbmmWTSaHL5SHT8wFJa/fiGpkzR8qdcZTlThrPq9Vgx",
	"alhyS0352zJTafkTSahhfzM8ZWRGzCpn5JJoo7i8J+sZSZhgRz4jCyHonWDk0qiCtRyDJ85ni4InbUMJ",
	"qs2tZkyePpKkKSs/ffAHbRSj6W2hROufizwZGJn17pXs7jOLTXmUt8yw2PBMHob+LitkwuX97V32r/J3",
	"bliqD9/2v+7wWVF+2d1IskjvmCpH+seT3tfGuHmBKkVX5e9xNVdun5ii3btvN0e8fCTfKLYkl+TreTMf",
	"55vJOP9pk7DNjCyPwKRRWT3cub97LKjW+1+VS/Pdq+bzXBp2Xw9Uv71zSgGvJh1nij0xpGXRDfoefupl",
	"b3aE9erM69VvPGFZS9jPvSRMlOakUHS7Wh8sBx2ftpYHJpNnAiy5YN3rS/VXzf/dUcQdR2+K+qnrhKFq",
	"aPS1oabQrdTmoUjvJOWi+4v5mLzlS1wuq9lruCnDQN5+pvI+E1Tekxn5kyld5Zb897cX5ahZziTNObkk",
	"L7+9+PaCzEhOzUP1JeY05/N6Hle/37OKrKyJaoJcJ+SS/MDMm81byo8qmjLDlCaXvz+ShOlY8byeTOTT",
	"/7yP3l///fqXqD5CpkgJSy7Jl4KpFdmWPRE85YbMNpdu+9Pw5YuWs9J61jbaz1dXn94dHS5bLjXzMt7i",
	"2FA8ub1lX9qHap+I7QN99aSRJHv+SP9XXFy8ZLvRZlFKV5HMTPTPTP0R/ZObh4gKEcWZKFIZlYfUPUT3",
	"xhfRwh+SryjFvpCEryjFC39IHqJ0/ZOFkzOVcqOjOEtT+jfNyqXDsCT6k4qiF4XL55P89PMvnmgkMJzM",
	"+AC6/hT99Ov79xZRNXLEdcTvZaZYEv1nrphmMmZRtoz+YKvyb7pYLnnMmTT/1ZdAXZ6j/UD+/MuIoBIN",
	"KdcyM35Y31//+K4VMs0Fj7kRqyhXbMn/xZKIyqQGLH+plpT/6FtDQMPxP5ifQh6PUQr4hBjCmBk/mNfj",
	"MXIBHM9bnkeklFxgYEQRysx4Av3549t3H6Pv/xHdRm/ffXozzvmwHNYr6uuxSKkP0KNqsPmvpG792fv/",
	"DKeJUHvYLjE6eFh/itTG61KmJ+It/PN5jV/sm094jV+88M/nK37PF2o2V5daG4zlR0M6FQuZrVvnDk/o",
	"WGLXyXOPlDyJeDQ96U4BlNhH5PBg8HGuq5zlCQ9p51XgScvC+MBSIMNFF+A+PT18kRgfmAtMrH6nwxmQ",
	"JRfogPEFuVeQD6YeXZXb7N3q/Dncr8fGpt6ojwrnphXgrHrdHhagXrfxIOp1lw+eXrf5IOp1lw+OXre5",
	"gGlip2Ihs2HQ606e0QhfdwqgxMah153lCQ8pBjnpzGGBDBddgDHodWd5EJhYUUhJ96Qh0AHjCzIyvW6z",
	"I9LrNvYZ9Xrz2MVZ9bo9LEC9buNB1OsuHzy9bvNB1OsuHxy9bnMB08ROxUJmw6DXnTyjEb7uFECJjUOv",
	"O8sTHlIMctKZwwIZLroAY9DrzvIgMLGikJLuSUOgA8YXZGR63WZHpNdt7DPq9fKfA6XuSZTXx96T42dW",
	"3jXDnuY+t7zeQpwaidgfhDg1EvHCJ8QJkXi+rKsH31NzZ5SVm3qYHOBA0U4rXjdpOdR/00u9bcbgsrUL",
	"0AkV3KbCgeHsX79MLGo280pAZIIZqhblN6Vw2hSfAAd0cvZG5ZJcwKQCGq42yQVDXdWAB7oKhISq2egp",
	"aEe1TLPd3lhqyR5hWs1kk0ysnFyUSfWTjTKxinJRJtFSNsJ0gsapGSAYwNSVkyiIOsbNIXRCcHrLWQtA",
	"QgETFM58E3DJIIcNmBpzClQAxYImNdx1V0BmAx06uFrNxoSp2GzCcXTbbgv2s7ajWqMC7Ea16CA2ozp4",
	"8HpRLTyIragOHpxOVAsLWLOnXauA0TC0odpJRtPO6eQfIzWOHlR7XUIDiqFB0p6/AhcttvBiaD+1FwaB",
	"CBVFX6RzrhDYeNGFGFnnqYWOqPHUoj6p7/RmRhTTeSZ1bQ724uKi8gjLpGGyskmieTkhKqOk+Wdd22k1",
	"g7jWYkypTLWaQtXGTtrxRuyzEWvsw/YdDRtzqqPuRjOiizhm2rayussywaisTKcU+1JwxRJy+fv2sM1H",
	"blpNqfYyXL93WYjoPdcmumImfoiWmYq2XlLVR5a0EGaUsEIKxhXlgiWdgShTSe91efhNcm/WM5JnusWM",
	"60OmLTeukoxp832WrAYF8VkTzQ2JUQVbh1LxWCpvqh3pQq20R6KtWNYzx8lu/pgrnlK1+pGt1iVn/QzC",
	"YTG9rV7fHOaIt92H+pDV+acB2p57cmoemlNPMzzZLxXrNNR2inlV43ZMj2vD0qiG/otPj85ItK+l/b6G",
	"MFIflsyTlsxqJoSri6QzEB1XF9TEDy2XF+XLE1fFaZc0T5nU4cpl3DL8tdqbJ9RheyQ6CrFou8ovTCjC",
	"UIQnFeFHlgsahyrsCkWfgEiYYXF5oF437LfNu4IhdjDEDobYwRA7GGIHQ+xgiB0MsYMhdjDEDobYwRA7",
	"GGIHQ+xgiB0MsYMhdjDEDobYwRA7GGIHQ+xgiB0MsYMhdjDEDobYwRA7GGIHQ+xgiB0MsYMhdjDEDobY",
	"wRA7GGIHQ+xgiB0MsYMhdjDEDobYwRA7GGIHQ+xgiB0MsYMhdjDEDobYwRA7GGIHQ+xgiB0MsYMhdjDE",
	"DobYwRA7GGIHQ+yBRm+MyXOL9d2YAJX6jg2iTLfg4Gn0HRxEgW7BwVHnOyhg8repT7BgGER5k1400tbK",
	"PD5mHFq8WYmQYGIQic28FZhYcYUWg/huFgOBBhSFIrTODAIXLbLwIlPbO3BEUnvHfEadHQuq9W3frmdc",
	"mu9ePXmDta8GjNgls4eN6PFp8x3ZvfFHtvCN5i9qsV804S9q8cI3mpeoeXhEeofUJRSHEXl6cLupSaBY",
	"3cJ6YAZHe5S8SWyPRB0OO97j2FbOsREfkdTDmEd6FLBZe1BAdl7bDS/8sVmlwEOKKax9QnrgMjA2KxdI",
	"MD3mf3RayQUmVlSh7ZXPw4DHfxJ8h90tnk9Gfj0uMfUD/EQVW/5yoJx9bc1mjbCnlM+9C5tFsqeMz77h",
	"moNyalRi3yji1KjEC/8oJ0TFl1SrEfaU2jk3ILNrBgjGgXKdeMszO1GHug/ANmFODqETtivRKXcCs9cC",
	"kFD7l0FTb5RlzzcBlwxy2FqU46Tbc9kFKoBinZzPM9BJLiCzgQ5dm9IDssOXhXmg7GBs5mUR0lMAj/f4",
	"xpliPV3FWXEnrLurskjvnnOzczNcZ0PxoOE8dhPXWJ29xCdgLbxy+YtX7JFL+ItXvPDK5SVeHhpha57O",
	"HthBOJ56czcVCJGpp1t4WOJGaxXe5LOv6XYw6Xgdt9tUo8I91h48CHikLrDNMgOfsLtDbXCZjwoqBRJM",
	"NAHt7QIeVvSjgnKBgdFj2sdFlVygAcUT1P5m30G043f61sw9fb6n8r4eEZf6oT1+F7HyjL49n62xNSAs",
	"d2MLDJjJsUMGyuvYIgNmeeyQgXA+tojgOA7b1QiTCrgdsp1VDF7DTsKRAYP3SLYXHQyMwK1+7bkq0IAi",
	"CipwG2W79AUOSuhOwM7yLxChYgosHqdlixqH4bIFPNR3+WZGFNN5JjXT5ftfXFyU/8SZNEya8kealzOA",
	"ll9n/lmX3+nROn6uym9jeP1pplSmWm47z0h295nFpnoTNyytfvhGsSW5JF/P4yzNM8mk0fP6yHr+lhkW",
	"VyFc76CpUnRV/q4NNYXeb1R++aKlUXlGdBHHTGuL6i7LBKOyzBZR7EvBFUvI5e/bwzYfudkdr8Yn6/Ij",
	"e/mt37ssRPSeaxNdMRM/RMtMRbuvoEn1qSUthBkluJDicUW5YElfLMqE0ntdjtBk+WY9I3mmq6DU9cEz",
	"eZ2QS/Ih08b6eI3ItPk+S1aDovnceeeGx6iCrUPx+C2eN5UtXaievmB0lM96RuY05/Nk99b5Y654StXq",
	"R7Zal8D1poSHFfa2er052IzkVNGUGabKYfbPaB/qo1anJwdue3bKqXloTk4NBNmvH+tE1XYmelVDd0yY",
	"a8PSqEYPE6YvGJ3r7T1rWW5/YAbeTAjL6qnLajUxwjVJUyRDr0moiR9aLkrKl0HUyWnXQk+c5uGSZ/Ta",
	"/LVy9gnF2ReM7uos2gRDYUJlhsp8dmV+ZLmgcSjN/mgckSN/8oRlFWDX1eZv9TuOFGp96+fv178c66QQ",
	"POXdO2q1xrHjP+2urj69Ozpctlxq5mW8oz0i5+tGgdeGArD/BGDjCcCOE0CtJrB6TIA1l2DoKkHTToKn",
	"jwRFAwnozhEMLSPwe0VQNIlg6A4B3haCox8EQyMIkg4QZK0feHo+Tmn2OPFhiOo+5NlNwO1hAVqL2XgQ",
	"3cVcPngGYzYfRI8xlw+OzZjNBczQy6lYyGwY/MacPKOx73KnAEpsHMZjzvKEhxSDR5YzhwUyXHQBxuBD",
	"5iwPAhMrCrss96Qh0AHjCzIyWzKbHZEzmY19RnOyomqiObtet4cFqNdtPIh63eWDp9dtPoh63eWDo9dt",
	"LmCa2KlYyGwY9LqTZzTC150CKLFx6HVnecJDikFOOnNYIMNFF2AMet1ZHgQmVhRS0j1pCHTA+IKMTK/b",
	"7Ij0uo19Rr1eP5Z7dr1uDwtQr9t4EPW6ywdPr9t8EPW6ywdHr9tcwDSxU7GQ2TDodSfPaISvOwVQYuPQ",
	"687yhIcUg5x05rBAhosuwBj0urM8CEysKKSke9IQ6IDxBRmZXrfZEel1G/uMen3JBRvVw9waYFoLcwtk",
	"Ygdzh2RSA3OLZGL/codkEvtyi2A623C7WmBQAPMut7ME0RjcSSBwQHDG5fYiAJEJmP+2PdcEWDDAQQPm",
	"WW6XpoBJBc1221luBWA0yIGDa1duUcJ0K7cARzIrN1RNcD/VHhbg/VQbD+L9VJcP3v1Umw/i/VSXD879",
	"VJsL2D1Lp2Ihs2G4n+rkGc2NSXcKoMTGcT/VWZ7wkGK43efMYYEMF12AMdxPdZYHgYkVxa0+96Qh0AHj",
	"CzKy+6k2O6L7qTb2Ge+nMpmcX603gwLU6g0cRKVu08HT6Q0dRJVu08HR6A0VMBVsVSlcMgzq3MowGpFr",
	"Jx8hNA5dbi1IWDgxSEZr7gpUsMiCi0GNW0uCwEOKQiTapwiBDBdbgJFp8IYckQJvoM/5/HFRG3J1628u",
	"zXevnmxk9dWAEbvE97ARPT51vCO7N/7IFr7R/EUt9osm/EUtXvhG8xI1D4/K7pC6dOMwIk8P8DY1CRSr",
	"W2cPzOBojxQ3ie3Rq8Nhx3ss18o5NuIj8noY80iPhDVrDwrIzqu74YU/NqsUeEgxhbVPTw9cBsZm5QIJ",
	"psf8j04rucDEiiq0vQJ6GPD4TwTvsLvV88nIr8clpn6An/aYrub/Zj03rrPiTlhKXRbp3XOEszVk523r",
	"QUN6fla4Ruu8aX0C2sI7m7+4xZ7ZhL+4xQvvbF7i5ulB25qp87brICSPz/9uKhMqV8+N6mFJHPVJ5U1u",
	"++74DqYd99HgbdrRIR+7RT0IesSH7jZLEA7K7nskg8t/dFgpEKGiCmzvjelhi8HosFxg4fQ4BcbHlVyg",
	"gsUV3P7b0YOIz/NMds3dczP6VObXIyNTP8RHxa15KNI7SbkYdXOt/VGm3WFrn2bibbYOcSbda2sfZ+IN",
	"tw5xJtl1ax9juk2vDmoJEAqwTbgOkgZxo6vDfGKgBLcn18E6ARYM2EZTB/NPwKaDHj5gm3UdFK4AjAZt",
	"96nDtVlA5wMfQri7eO2jwtzKa59ytP28TKHH0oPbo0+rA7cUE+u/BmNS3bfFmFjvNRiT6Lzt8NOJql1t",
	"AEAApud2yYGokJq8QaYDp9t29Q4OCJjQ2M0vAZMKariA6bFdIQqASNDEQ7OmCqhcYEMGV2dtEWHqqy3d",
	"OLoqpilT9JYn3f2rRcETf3suWQN2da8OGdCf+rLAunpXh4MtvJP5ilnsmUz4ilm88E7mIWbPFzEWUVcH",
	"5hAgP8rKrkaYVN39qoPSN5YEtLPa0/o5lHU03eUkHBnwkU7VIcjjXOvYiw4Gxs7WqaElPzqqFGhAEQW1",
	"rz910AIwOioXOCi9JX98WMkFIlRMge3tSh3CO7rytai7e1JPJH49MjAdyHszI4rpPJOa6fL9Ly4uyn/i",
	"TBomTfkjzcsZUD1AOv+sy+/0aB0/V+W3Mbz+NFMqUy0yfEayu88sNtWbuGFp9cM3ii3JJfl6Hmdpnkkm",
	"jZ7XR9bz33jCsvKDmyNRpeiq/L0W/vsPr7580fLw6ozoIo6Z1hbRXZYJRmWZKaLYl4IrlpDL37eHbT5y",
	"sztejU7W5Uf2clu/d1mI6D3XJrpiJn6IlpmKKnxNqk8saSHMKEGFFIsrygVLuuJQJpLe6/LodWZv1jOS",
	"Z7oKRl0PPJPXCbkkHzJtNh+rsZg232fJalAEnzPH3HAYVbB1KBJ/RfJGMWpYqJK2QLSUyXpG5jTn8z+r",
	"t8wfc8VTqlY/stW6hKyNvg+r6G31en2QGcmpoikzTJWH3j9DfaiPWJ1udjDbM01OzUNzomkGJ/s1Yp10",
	"2s4qr2rYjolxbVga1ch/7YnRFYjW9fOetSyfPzADJ+thmTxlmawmQbiW6IpD+7UENfFDy8VE+fKk9XDa",
	"9csTpnO4TBm1/n7NExrORu2BaK/Aou1ivjCh+kL1Da6+jywXNA7l1x6JNpmwXv9/AAAA//+fEkYfGOYB",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
