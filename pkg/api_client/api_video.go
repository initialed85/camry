/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// VideoAPIService VideoAPI service
type VideoAPIService service

type ApiDeleteVideoRequest struct {
	ctx context.Context
	ApiService *VideoAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiDeleteVideoRequest) Depth(depth int64) ApiDeleteVideoRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteVideoRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideoExecute(r)
}

/*
DeleteVideo Method for DeleteVideo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiDeleteVideoRequest
*/
func (a *VideoAPIService) DeleteVideo(ctx context.Context, primaryKey string) ApiDeleteVideoRequest {
	return ApiDeleteVideoRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *VideoAPIService) DeleteVideoExecute(r ApiDeleteVideoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoAPIService.DeleteVideo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/videos/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVideoRequest struct {
	ctx context.Context
	ApiService *VideoAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiGetVideoRequest) Depth(depth int64) ApiGetVideoRequest {
	r.depth = &depth
	return r
}

func (r ApiGetVideoRequest) Execute() (*ResponseWithGenericOfVideo, *http.Response, error) {
	return r.ApiService.GetVideoExecute(r)
}

/*
GetVideo Method for GetVideo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiGetVideoRequest
*/
func (a *VideoAPIService) GetVideo(ctx context.Context, primaryKey string) ApiGetVideoRequest {
	return ApiGetVideoRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfVideo
func (a *VideoAPIService) GetVideoExecute(r ApiGetVideoRequest) (*ResponseWithGenericOfVideo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfVideo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoAPIService.GetVideo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/videos/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideosRequest struct {
	ctx context.Context
	ApiService *VideoAPIService
	limit *int32
	offset *int32
	depth *int32
	cameraLoad *string
	referencedByDetectionLoad *string
	idEq *string
	idNe *string
	idGt *string
	idGte *string
	idLt *string
	idLte *string
	idIn *string
	idNotin *string
	idContains *string
	idNotcontains *string
	idLike *string
	idNotlike *string
	idIlike *string
	idNotilike *string
	idDesc *string
	idAsc *string
	createdAtEq *time.Time
	createdAtNe *time.Time
	createdAtGt *time.Time
	createdAtGte *time.Time
	createdAtLt *time.Time
	createdAtLte *time.Time
	createdAtIn *time.Time
	createdAtNotin *time.Time
	createdAtContains *time.Time
	createdAtNotcontains *time.Time
	createdAtLike *time.Time
	createdAtNotlike *time.Time
	createdAtIlike *time.Time
	createdAtNotilike *time.Time
	createdAtDesc *string
	createdAtAsc *string
	updatedAtEq *time.Time
	updatedAtNe *time.Time
	updatedAtGt *time.Time
	updatedAtGte *time.Time
	updatedAtLt *time.Time
	updatedAtLte *time.Time
	updatedAtIn *time.Time
	updatedAtNotin *time.Time
	updatedAtContains *time.Time
	updatedAtNotcontains *time.Time
	updatedAtLike *time.Time
	updatedAtNotlike *time.Time
	updatedAtIlike *time.Time
	updatedAtNotilike *time.Time
	updatedAtDesc *string
	updatedAtAsc *string
	deletedAtEq *time.Time
	deletedAtNe *time.Time
	deletedAtGt *time.Time
	deletedAtGte *time.Time
	deletedAtLt *time.Time
	deletedAtLte *time.Time
	deletedAtIn *time.Time
	deletedAtNotin *time.Time
	deletedAtContains *time.Time
	deletedAtNotcontains *time.Time
	deletedAtLike *time.Time
	deletedAtNotlike *time.Time
	deletedAtIlike *time.Time
	deletedAtNotilike *time.Time
	deletedAtDesc *string
	deletedAtAsc *string
	fileNameEq *string
	fileNameNe *string
	fileNameGt *string
	fileNameGte *string
	fileNameLt *string
	fileNameLte *string
	fileNameIn *string
	fileNameNotin *string
	fileNameContains *string
	fileNameNotcontains *string
	fileNameLike *string
	fileNameNotlike *string
	fileNameIlike *string
	fileNameNotilike *string
	fileNameDesc *string
	fileNameAsc *string
	startedAtEq *time.Time
	startedAtNe *time.Time
	startedAtGt *time.Time
	startedAtGte *time.Time
	startedAtLt *time.Time
	startedAtLte *time.Time
	startedAtIn *time.Time
	startedAtNotin *time.Time
	startedAtContains *time.Time
	startedAtNotcontains *time.Time
	startedAtLike *time.Time
	startedAtNotlike *time.Time
	startedAtIlike *time.Time
	startedAtNotilike *time.Time
	startedAtDesc *string
	startedAtAsc *string
	endedAtEq *time.Time
	endedAtNe *time.Time
	endedAtGt *time.Time
	endedAtGte *time.Time
	endedAtLt *time.Time
	endedAtLte *time.Time
	endedAtIn *time.Time
	endedAtNotin *time.Time
	endedAtContains *time.Time
	endedAtNotcontains *time.Time
	endedAtLike *time.Time
	endedAtNotlike *time.Time
	endedAtIlike *time.Time
	endedAtNotilike *time.Time
	endedAtDesc *string
	endedAtAsc *string
	durationEq *int64
	durationNe *int64
	durationGt *int64
	durationGte *int64
	durationLt *int64
	durationLte *int64
	durationIn *int64
	durationNotin *int64
	durationContains *int64
	durationNotcontains *int64
	durationDesc *string
	durationAsc *string
	fileSizeEq *float64
	fileSizeNe *float64
	fileSizeGt *float64
	fileSizeGte *float64
	fileSizeLt *float64
	fileSizeLte *float64
	fileSizeIn *float64
	fileSizeNotin *float64
	fileSizeContains *float64
	fileSizeNotcontains *float64
	fileSizeDesc *string
	fileSizeAsc *string
	thumbnailNameEq *string
	thumbnailNameNe *string
	thumbnailNameGt *string
	thumbnailNameGte *string
	thumbnailNameLt *string
	thumbnailNameLte *string
	thumbnailNameIn *string
	thumbnailNameNotin *string
	thumbnailNameContains *string
	thumbnailNameNotcontains *string
	thumbnailNameLike *string
	thumbnailNameNotlike *string
	thumbnailNameIlike *string
	thumbnailNameNotilike *string
	thumbnailNameDesc *string
	thumbnailNameAsc *string
	statusEq *string
	statusNe *string
	statusGt *string
	statusGte *string
	statusLt *string
	statusLte *string
	statusIn *string
	statusNotin *string
	statusContains *string
	statusNotcontains *string
	statusLike *string
	statusNotlike *string
	statusIlike *string
	statusNotilike *string
	statusDesc *string
	statusAsc *string
	objectDetectorClaimedUntilEq *time.Time
	objectDetectorClaimedUntilNe *time.Time
	objectDetectorClaimedUntilGt *time.Time
	objectDetectorClaimedUntilGte *time.Time
	objectDetectorClaimedUntilLt *time.Time
	objectDetectorClaimedUntilLte *time.Time
	objectDetectorClaimedUntilIn *time.Time
	objectDetectorClaimedUntilNotin *time.Time
	objectDetectorClaimedUntilContains *time.Time
	objectDetectorClaimedUntilNotcontains *time.Time
	objectDetectorClaimedUntilLike *time.Time
	objectDetectorClaimedUntilNotlike *time.Time
	objectDetectorClaimedUntilIlike *time.Time
	objectDetectorClaimedUntilNotilike *time.Time
	objectDetectorClaimedUntilDesc *string
	objectDetectorClaimedUntilAsc *string
	objectTrackerClaimedUntilEq *time.Time
	objectTrackerClaimedUntilNe *time.Time
	objectTrackerClaimedUntilGt *time.Time
	objectTrackerClaimedUntilGte *time.Time
	objectTrackerClaimedUntilLt *time.Time
	objectTrackerClaimedUntilLte *time.Time
	objectTrackerClaimedUntilIn *time.Time
	objectTrackerClaimedUntilNotin *time.Time
	objectTrackerClaimedUntilContains *time.Time
	objectTrackerClaimedUntilNotcontains *time.Time
	objectTrackerClaimedUntilLike *time.Time
	objectTrackerClaimedUntilNotlike *time.Time
	objectTrackerClaimedUntilIlike *time.Time
	objectTrackerClaimedUntilNotilike *time.Time
	objectTrackerClaimedUntilDesc *string
	objectTrackerClaimedUntilAsc *string
	cameraIdEq *string
	cameraIdNe *string
	cameraIdGt *string
	cameraIdGte *string
	cameraIdLt *string
	cameraIdLte *string
	cameraIdIn *string
	cameraIdNotin *string
	cameraIdContains *string
	cameraIdNotcontains *string
	cameraIdLike *string
	cameraIdNotlike *string
	cameraIdIlike *string
	cameraIdNotilike *string
	cameraIdDesc *string
	cameraIdAsc *string
	cameraIdObjectContains *interface{}
	cameraIdObjectNotcontains *interface{}
	cameraIdObjectDesc *string
	cameraIdObjectAsc *string
	detectionSummaryContains *interface{}
	detectionSummaryNotcontains *interface{}
	detectionSummaryDesc *string
	detectionSummaryAsc *string
	referencedByDetectionVideoIdObjectsContains *interface{}
	referencedByDetectionVideoIdObjectsNotcontains *interface{}
	referencedByDetectionVideoIdObjectsDesc *string
	referencedByDetectionVideoIdObjectsAsc *string
}

// SQL LIMIT operator
func (r ApiGetVideosRequest) Limit(limit int32) ApiGetVideosRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetVideosRequest) Offset(offset int32) ApiGetVideosRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetVideosRequest) Depth(depth int32) ApiGetVideosRequest {
	r.depth = &depth
	return r
}

// load the given directly related object, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) CameraLoad(cameraLoad string) ApiGetVideosRequest {
	r.cameraLoad = &cameraLoad
	return r
}

// load the given indirectly related objects, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) ReferencedByDetectionLoad(referencedByDetectionLoad string) ApiGetVideosRequest {
	r.referencedByDetectionLoad = &referencedByDetectionLoad
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) IdEq(idEq string) ApiGetVideosRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) IdNe(idNe string) ApiGetVideosRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) IdGt(idGt string) ApiGetVideosRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) IdGte(idGte string) ApiGetVideosRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) IdLt(idLt string) ApiGetVideosRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) IdLte(idLte string) ApiGetVideosRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) IdIn(idIn string) ApiGetVideosRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) IdNotin(idNotin string) ApiGetVideosRequest {
	r.idNotin = &idNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) IdContains(idContains string) ApiGetVideosRequest {
	r.idContains = &idContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) IdNotcontains(idNotcontains string) ApiGetVideosRequest {
	r.idNotcontains = &idNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) IdLike(idLike string) ApiGetVideosRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) IdNotlike(idNotlike string) ApiGetVideosRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) IdIlike(idIlike string) ApiGetVideosRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) IdNotilike(idNotilike string) ApiGetVideosRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) IdDesc(idDesc string) ApiGetVideosRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) IdAsc(idAsc string) ApiGetVideosRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) CreatedAtEq(createdAtEq time.Time) ApiGetVideosRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) CreatedAtNe(createdAtNe time.Time) ApiGetVideosRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) CreatedAtGt(createdAtGt time.Time) ApiGetVideosRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) CreatedAtGte(createdAtGte time.Time) ApiGetVideosRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) CreatedAtLt(createdAtLt time.Time) ApiGetVideosRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) CreatedAtLte(createdAtLte time.Time) ApiGetVideosRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) CreatedAtIn(createdAtIn time.Time) ApiGetVideosRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetVideosRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) CreatedAtContains(createdAtContains time.Time) ApiGetVideosRequest {
	r.createdAtContains = &createdAtContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) CreatedAtNotcontains(createdAtNotcontains time.Time) ApiGetVideosRequest {
	r.createdAtNotcontains = &createdAtNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) CreatedAtLike(createdAtLike time.Time) ApiGetVideosRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetVideosRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetVideosRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetVideosRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) CreatedAtDesc(createdAtDesc string) ApiGetVideosRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) CreatedAtAsc(createdAtAsc string) ApiGetVideosRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetVideosRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetVideosRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetVideosRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetVideosRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetVideosRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetVideosRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetVideosRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetVideosRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) UpdatedAtContains(updatedAtContains time.Time) ApiGetVideosRequest {
	r.updatedAtContains = &updatedAtContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) UpdatedAtNotcontains(updatedAtNotcontains time.Time) ApiGetVideosRequest {
	r.updatedAtNotcontains = &updatedAtNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetVideosRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetVideosRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetVideosRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetVideosRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetVideosRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetVideosRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetVideosRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetVideosRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetVideosRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetVideosRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetVideosRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetVideosRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetVideosRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetVideosRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) DeletedAtContains(deletedAtContains time.Time) ApiGetVideosRequest {
	r.deletedAtContains = &deletedAtContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) DeletedAtNotcontains(deletedAtNotcontains time.Time) ApiGetVideosRequest {
	r.deletedAtNotcontains = &deletedAtNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetVideosRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetVideosRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetVideosRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetVideosRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) DeletedAtDesc(deletedAtDesc string) ApiGetVideosRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) DeletedAtAsc(deletedAtAsc string) ApiGetVideosRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) FileNameEq(fileNameEq string) ApiGetVideosRequest {
	r.fileNameEq = &fileNameEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) FileNameNe(fileNameNe string) ApiGetVideosRequest {
	r.fileNameNe = &fileNameNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) FileNameGt(fileNameGt string) ApiGetVideosRequest {
	r.fileNameGt = &fileNameGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) FileNameGte(fileNameGte string) ApiGetVideosRequest {
	r.fileNameGte = &fileNameGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) FileNameLt(fileNameLt string) ApiGetVideosRequest {
	r.fileNameLt = &fileNameLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) FileNameLte(fileNameLte string) ApiGetVideosRequest {
	r.fileNameLte = &fileNameLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) FileNameIn(fileNameIn string) ApiGetVideosRequest {
	r.fileNameIn = &fileNameIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) FileNameNotin(fileNameNotin string) ApiGetVideosRequest {
	r.fileNameNotin = &fileNameNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) FileNameContains(fileNameContains string) ApiGetVideosRequest {
	r.fileNameContains = &fileNameContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) FileNameNotcontains(fileNameNotcontains string) ApiGetVideosRequest {
	r.fileNameNotcontains = &fileNameNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) FileNameLike(fileNameLike string) ApiGetVideosRequest {
	r.fileNameLike = &fileNameLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) FileNameNotlike(fileNameNotlike string) ApiGetVideosRequest {
	r.fileNameNotlike = &fileNameNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) FileNameIlike(fileNameIlike string) ApiGetVideosRequest {
	r.fileNameIlike = &fileNameIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) FileNameNotilike(fileNameNotilike string) ApiGetVideosRequest {
	r.fileNameNotilike = &fileNameNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) FileNameDesc(fileNameDesc string) ApiGetVideosRequest {
	r.fileNameDesc = &fileNameDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) FileNameAsc(fileNameAsc string) ApiGetVideosRequest {
	r.fileNameAsc = &fileNameAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) StartedAtEq(startedAtEq time.Time) ApiGetVideosRequest {
	r.startedAtEq = &startedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) StartedAtNe(startedAtNe time.Time) ApiGetVideosRequest {
	r.startedAtNe = &startedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) StartedAtGt(startedAtGt time.Time) ApiGetVideosRequest {
	r.startedAtGt = &startedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) StartedAtGte(startedAtGte time.Time) ApiGetVideosRequest {
	r.startedAtGte = &startedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) StartedAtLt(startedAtLt time.Time) ApiGetVideosRequest {
	r.startedAtLt = &startedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) StartedAtLte(startedAtLte time.Time) ApiGetVideosRequest {
	r.startedAtLte = &startedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) StartedAtIn(startedAtIn time.Time) ApiGetVideosRequest {
	r.startedAtIn = &startedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) StartedAtNotin(startedAtNotin time.Time) ApiGetVideosRequest {
	r.startedAtNotin = &startedAtNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) StartedAtContains(startedAtContains time.Time) ApiGetVideosRequest {
	r.startedAtContains = &startedAtContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) StartedAtNotcontains(startedAtNotcontains time.Time) ApiGetVideosRequest {
	r.startedAtNotcontains = &startedAtNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) StartedAtLike(startedAtLike time.Time) ApiGetVideosRequest {
	r.startedAtLike = &startedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) StartedAtNotlike(startedAtNotlike time.Time) ApiGetVideosRequest {
	r.startedAtNotlike = &startedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) StartedAtIlike(startedAtIlike time.Time) ApiGetVideosRequest {
	r.startedAtIlike = &startedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) StartedAtNotilike(startedAtNotilike time.Time) ApiGetVideosRequest {
	r.startedAtNotilike = &startedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) StartedAtDesc(startedAtDesc string) ApiGetVideosRequest {
	r.startedAtDesc = &startedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) StartedAtAsc(startedAtAsc string) ApiGetVideosRequest {
	r.startedAtAsc = &startedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) EndedAtEq(endedAtEq time.Time) ApiGetVideosRequest {
	r.endedAtEq = &endedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) EndedAtNe(endedAtNe time.Time) ApiGetVideosRequest {
	r.endedAtNe = &endedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) EndedAtGt(endedAtGt time.Time) ApiGetVideosRequest {
	r.endedAtGt = &endedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) EndedAtGte(endedAtGte time.Time) ApiGetVideosRequest {
	r.endedAtGte = &endedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) EndedAtLt(endedAtLt time.Time) ApiGetVideosRequest {
	r.endedAtLt = &endedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) EndedAtLte(endedAtLte time.Time) ApiGetVideosRequest {
	r.endedAtLte = &endedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) EndedAtIn(endedAtIn time.Time) ApiGetVideosRequest {
	r.endedAtIn = &endedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) EndedAtNotin(endedAtNotin time.Time) ApiGetVideosRequest {
	r.endedAtNotin = &endedAtNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) EndedAtContains(endedAtContains time.Time) ApiGetVideosRequest {
	r.endedAtContains = &endedAtContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) EndedAtNotcontains(endedAtNotcontains time.Time) ApiGetVideosRequest {
	r.endedAtNotcontains = &endedAtNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) EndedAtLike(endedAtLike time.Time) ApiGetVideosRequest {
	r.endedAtLike = &endedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) EndedAtNotlike(endedAtNotlike time.Time) ApiGetVideosRequest {
	r.endedAtNotlike = &endedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) EndedAtIlike(endedAtIlike time.Time) ApiGetVideosRequest {
	r.endedAtIlike = &endedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) EndedAtNotilike(endedAtNotilike time.Time) ApiGetVideosRequest {
	r.endedAtNotilike = &endedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) EndedAtDesc(endedAtDesc string) ApiGetVideosRequest {
	r.endedAtDesc = &endedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) EndedAtAsc(endedAtAsc string) ApiGetVideosRequest {
	r.endedAtAsc = &endedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) DurationEq(durationEq int64) ApiGetVideosRequest {
	r.durationEq = &durationEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) DurationNe(durationNe int64) ApiGetVideosRequest {
	r.durationNe = &durationNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) DurationGt(durationGt int64) ApiGetVideosRequest {
	r.durationGt = &durationGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) DurationGte(durationGte int64) ApiGetVideosRequest {
	r.durationGte = &durationGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) DurationLt(durationLt int64) ApiGetVideosRequest {
	r.durationLt = &durationLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) DurationLte(durationLte int64) ApiGetVideosRequest {
	r.durationLte = &durationLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) DurationIn(durationIn int64) ApiGetVideosRequest {
	r.durationIn = &durationIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) DurationNotin(durationNotin int64) ApiGetVideosRequest {
	r.durationNotin = &durationNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) DurationContains(durationContains int64) ApiGetVideosRequest {
	r.durationContains = &durationContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) DurationNotcontains(durationNotcontains int64) ApiGetVideosRequest {
	r.durationNotcontains = &durationNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) DurationDesc(durationDesc string) ApiGetVideosRequest {
	r.durationDesc = &durationDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) DurationAsc(durationAsc string) ApiGetVideosRequest {
	r.durationAsc = &durationAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) FileSizeEq(fileSizeEq float64) ApiGetVideosRequest {
	r.fileSizeEq = &fileSizeEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) FileSizeNe(fileSizeNe float64) ApiGetVideosRequest {
	r.fileSizeNe = &fileSizeNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) FileSizeGt(fileSizeGt float64) ApiGetVideosRequest {
	r.fileSizeGt = &fileSizeGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) FileSizeGte(fileSizeGte float64) ApiGetVideosRequest {
	r.fileSizeGte = &fileSizeGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) FileSizeLt(fileSizeLt float64) ApiGetVideosRequest {
	r.fileSizeLt = &fileSizeLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) FileSizeLte(fileSizeLte float64) ApiGetVideosRequest {
	r.fileSizeLte = &fileSizeLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) FileSizeIn(fileSizeIn float64) ApiGetVideosRequest {
	r.fileSizeIn = &fileSizeIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) FileSizeNotin(fileSizeNotin float64) ApiGetVideosRequest {
	r.fileSizeNotin = &fileSizeNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) FileSizeContains(fileSizeContains float64) ApiGetVideosRequest {
	r.fileSizeContains = &fileSizeContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) FileSizeNotcontains(fileSizeNotcontains float64) ApiGetVideosRequest {
	r.fileSizeNotcontains = &fileSizeNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) FileSizeDesc(fileSizeDesc string) ApiGetVideosRequest {
	r.fileSizeDesc = &fileSizeDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) FileSizeAsc(fileSizeAsc string) ApiGetVideosRequest {
	r.fileSizeAsc = &fileSizeAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) ThumbnailNameEq(thumbnailNameEq string) ApiGetVideosRequest {
	r.thumbnailNameEq = &thumbnailNameEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) ThumbnailNameNe(thumbnailNameNe string) ApiGetVideosRequest {
	r.thumbnailNameNe = &thumbnailNameNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) ThumbnailNameGt(thumbnailNameGt string) ApiGetVideosRequest {
	r.thumbnailNameGt = &thumbnailNameGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) ThumbnailNameGte(thumbnailNameGte string) ApiGetVideosRequest {
	r.thumbnailNameGte = &thumbnailNameGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) ThumbnailNameLt(thumbnailNameLt string) ApiGetVideosRequest {
	r.thumbnailNameLt = &thumbnailNameLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) ThumbnailNameLte(thumbnailNameLte string) ApiGetVideosRequest {
	r.thumbnailNameLte = &thumbnailNameLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) ThumbnailNameIn(thumbnailNameIn string) ApiGetVideosRequest {
	r.thumbnailNameIn = &thumbnailNameIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) ThumbnailNameNotin(thumbnailNameNotin string) ApiGetVideosRequest {
	r.thumbnailNameNotin = &thumbnailNameNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) ThumbnailNameContains(thumbnailNameContains string) ApiGetVideosRequest {
	r.thumbnailNameContains = &thumbnailNameContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) ThumbnailNameNotcontains(thumbnailNameNotcontains string) ApiGetVideosRequest {
	r.thumbnailNameNotcontains = &thumbnailNameNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ThumbnailNameLike(thumbnailNameLike string) ApiGetVideosRequest {
	r.thumbnailNameLike = &thumbnailNameLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ThumbnailNameNotlike(thumbnailNameNotlike string) ApiGetVideosRequest {
	r.thumbnailNameNotlike = &thumbnailNameNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ThumbnailNameIlike(thumbnailNameIlike string) ApiGetVideosRequest {
	r.thumbnailNameIlike = &thumbnailNameIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ThumbnailNameNotilike(thumbnailNameNotilike string) ApiGetVideosRequest {
	r.thumbnailNameNotilike = &thumbnailNameNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) ThumbnailNameDesc(thumbnailNameDesc string) ApiGetVideosRequest {
	r.thumbnailNameDesc = &thumbnailNameDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) ThumbnailNameAsc(thumbnailNameAsc string) ApiGetVideosRequest {
	r.thumbnailNameAsc = &thumbnailNameAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) StatusEq(statusEq string) ApiGetVideosRequest {
	r.statusEq = &statusEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) StatusNe(statusNe string) ApiGetVideosRequest {
	r.statusNe = &statusNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) StatusGt(statusGt string) ApiGetVideosRequest {
	r.statusGt = &statusGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) StatusGte(statusGte string) ApiGetVideosRequest {
	r.statusGte = &statusGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) StatusLt(statusLt string) ApiGetVideosRequest {
	r.statusLt = &statusLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) StatusLte(statusLte string) ApiGetVideosRequest {
	r.statusLte = &statusLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) StatusIn(statusIn string) ApiGetVideosRequest {
	r.statusIn = &statusIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) StatusNotin(statusNotin string) ApiGetVideosRequest {
	r.statusNotin = &statusNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) StatusContains(statusContains string) ApiGetVideosRequest {
	r.statusContains = &statusContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) StatusNotcontains(statusNotcontains string) ApiGetVideosRequest {
	r.statusNotcontains = &statusNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) StatusLike(statusLike string) ApiGetVideosRequest {
	r.statusLike = &statusLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) StatusNotlike(statusNotlike string) ApiGetVideosRequest {
	r.statusNotlike = &statusNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) StatusIlike(statusIlike string) ApiGetVideosRequest {
	r.statusIlike = &statusIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) StatusNotilike(statusNotilike string) ApiGetVideosRequest {
	r.statusNotilike = &statusNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) StatusDesc(statusDesc string) ApiGetVideosRequest {
	r.statusDesc = &statusDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) StatusAsc(statusAsc string) ApiGetVideosRequest {
	r.statusAsc = &statusAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilEq(objectDetectorClaimedUntilEq time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilEq = &objectDetectorClaimedUntilEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilNe(objectDetectorClaimedUntilNe time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilNe = &objectDetectorClaimedUntilNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilGt(objectDetectorClaimedUntilGt time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilGt = &objectDetectorClaimedUntilGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilGte(objectDetectorClaimedUntilGte time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilGte = &objectDetectorClaimedUntilGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilLt(objectDetectorClaimedUntilLt time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilLt = &objectDetectorClaimedUntilLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilLte(objectDetectorClaimedUntilLte time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilLte = &objectDetectorClaimedUntilLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilIn(objectDetectorClaimedUntilIn time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilIn = &objectDetectorClaimedUntilIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilNotin(objectDetectorClaimedUntilNotin time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilNotin = &objectDetectorClaimedUntilNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilContains(objectDetectorClaimedUntilContains time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilContains = &objectDetectorClaimedUntilContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilNotcontains(objectDetectorClaimedUntilNotcontains time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilNotcontains = &objectDetectorClaimedUntilNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilLike(objectDetectorClaimedUntilLike time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilLike = &objectDetectorClaimedUntilLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilNotlike(objectDetectorClaimedUntilNotlike time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilNotlike = &objectDetectorClaimedUntilNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilIlike(objectDetectorClaimedUntilIlike time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilIlike = &objectDetectorClaimedUntilIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilNotilike(objectDetectorClaimedUntilNotilike time.Time) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilNotilike = &objectDetectorClaimedUntilNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilDesc(objectDetectorClaimedUntilDesc string) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilDesc = &objectDetectorClaimedUntilDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) ObjectDetectorClaimedUntilAsc(objectDetectorClaimedUntilAsc string) ApiGetVideosRequest {
	r.objectDetectorClaimedUntilAsc = &objectDetectorClaimedUntilAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilEq(objectTrackerClaimedUntilEq time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilEq = &objectTrackerClaimedUntilEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilNe(objectTrackerClaimedUntilNe time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilNe = &objectTrackerClaimedUntilNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilGt(objectTrackerClaimedUntilGt time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilGt = &objectTrackerClaimedUntilGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilGte(objectTrackerClaimedUntilGte time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilGte = &objectTrackerClaimedUntilGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilLt(objectTrackerClaimedUntilLt time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilLt = &objectTrackerClaimedUntilLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilLte(objectTrackerClaimedUntilLte time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilLte = &objectTrackerClaimedUntilLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilIn(objectTrackerClaimedUntilIn time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilIn = &objectTrackerClaimedUntilIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilNotin(objectTrackerClaimedUntilNotin time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilNotin = &objectTrackerClaimedUntilNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilContains(objectTrackerClaimedUntilContains time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilContains = &objectTrackerClaimedUntilContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilNotcontains(objectTrackerClaimedUntilNotcontains time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilNotcontains = &objectTrackerClaimedUntilNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilLike(objectTrackerClaimedUntilLike time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilLike = &objectTrackerClaimedUntilLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilNotlike(objectTrackerClaimedUntilNotlike time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilNotlike = &objectTrackerClaimedUntilNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilIlike(objectTrackerClaimedUntilIlike time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilIlike = &objectTrackerClaimedUntilIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilNotilike(objectTrackerClaimedUntilNotilike time.Time) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilNotilike = &objectTrackerClaimedUntilNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilDesc(objectTrackerClaimedUntilDesc string) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilDesc = &objectTrackerClaimedUntilDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) ObjectTrackerClaimedUntilAsc(objectTrackerClaimedUntilAsc string) ApiGetVideosRequest {
	r.objectTrackerClaimedUntilAsc = &objectTrackerClaimedUntilAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetVideosRequest) CameraIdEq(cameraIdEq string) ApiGetVideosRequest {
	r.cameraIdEq = &cameraIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetVideosRequest) CameraIdNe(cameraIdNe string) ApiGetVideosRequest {
	r.cameraIdNe = &cameraIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetVideosRequest) CameraIdGt(cameraIdGt string) ApiGetVideosRequest {
	r.cameraIdGt = &cameraIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) CameraIdGte(cameraIdGte string) ApiGetVideosRequest {
	r.cameraIdGte = &cameraIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetVideosRequest) CameraIdLt(cameraIdLt string) ApiGetVideosRequest {
	r.cameraIdLt = &cameraIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetVideosRequest) CameraIdLte(cameraIdLte string) ApiGetVideosRequest {
	r.cameraIdLte = &cameraIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) CameraIdIn(cameraIdIn string) ApiGetVideosRequest {
	r.cameraIdIn = &cameraIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetVideosRequest) CameraIdNotin(cameraIdNotin string) ApiGetVideosRequest {
	r.cameraIdNotin = &cameraIdNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) CameraIdContains(cameraIdContains string) ApiGetVideosRequest {
	r.cameraIdContains = &cameraIdContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) CameraIdNotcontains(cameraIdNotcontains string) ApiGetVideosRequest {
	r.cameraIdNotcontains = &cameraIdNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) CameraIdLike(cameraIdLike string) ApiGetVideosRequest {
	r.cameraIdLike = &cameraIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) CameraIdNotlike(cameraIdNotlike string) ApiGetVideosRequest {
	r.cameraIdNotlike = &cameraIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) CameraIdIlike(cameraIdIlike string) ApiGetVideosRequest {
	r.cameraIdIlike = &cameraIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetVideosRequest) CameraIdNotilike(cameraIdNotilike string) ApiGetVideosRequest {
	r.cameraIdNotilike = &cameraIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) CameraIdDesc(cameraIdDesc string) ApiGetVideosRequest {
	r.cameraIdDesc = &cameraIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) CameraIdAsc(cameraIdAsc string) ApiGetVideosRequest {
	r.cameraIdAsc = &cameraIdAsc
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) CameraIdObjectContains(cameraIdObjectContains interface{}) ApiGetVideosRequest {
	r.cameraIdObjectContains = &cameraIdObjectContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) CameraIdObjectNotcontains(cameraIdObjectNotcontains interface{}) ApiGetVideosRequest {
	r.cameraIdObjectNotcontains = &cameraIdObjectNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) CameraIdObjectDesc(cameraIdObjectDesc string) ApiGetVideosRequest {
	r.cameraIdObjectDesc = &cameraIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) CameraIdObjectAsc(cameraIdObjectAsc string) ApiGetVideosRequest {
	r.cameraIdObjectAsc = &cameraIdObjectAsc
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) DetectionSummaryContains(detectionSummaryContains interface{}) ApiGetVideosRequest {
	r.detectionSummaryContains = &detectionSummaryContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) DetectionSummaryNotcontains(detectionSummaryNotcontains interface{}) ApiGetVideosRequest {
	r.detectionSummaryNotcontains = &detectionSummaryNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) DetectionSummaryDesc(detectionSummaryDesc string) ApiGetVideosRequest {
	r.detectionSummaryDesc = &detectionSummaryDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) DetectionSummaryAsc(detectionSummaryAsc string) ApiGetVideosRequest {
	r.detectionSummaryAsc = &detectionSummaryAsc
	return r
}

// SQL @&gt; comparison
func (r ApiGetVideosRequest) ReferencedByDetectionVideoIdObjectsContains(referencedByDetectionVideoIdObjectsContains interface{}) ApiGetVideosRequest {
	r.referencedByDetectionVideoIdObjectsContains = &referencedByDetectionVideoIdObjectsContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetVideosRequest) ReferencedByDetectionVideoIdObjectsNotcontains(referencedByDetectionVideoIdObjectsNotcontains interface{}) ApiGetVideosRequest {
	r.referencedByDetectionVideoIdObjectsNotcontains = &referencedByDetectionVideoIdObjectsNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) ReferencedByDetectionVideoIdObjectsDesc(referencedByDetectionVideoIdObjectsDesc string) ApiGetVideosRequest {
	r.referencedByDetectionVideoIdObjectsDesc = &referencedByDetectionVideoIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetVideosRequest) ReferencedByDetectionVideoIdObjectsAsc(referencedByDetectionVideoIdObjectsAsc string) ApiGetVideosRequest {
	r.referencedByDetectionVideoIdObjectsAsc = &referencedByDetectionVideoIdObjectsAsc
	return r
}

func (r ApiGetVideosRequest) Execute() (*ResponseWithGenericOfVideo, *http.Response, error) {
	return r.ApiService.GetVideosExecute(r)
}

/*
GetVideos Method for GetVideos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetVideosRequest
*/
func (a *VideoAPIService) GetVideos(ctx context.Context) ApiGetVideosRequest {
	return ApiGetVideosRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfVideo
func (a *VideoAPIService) GetVideosExecute(r ApiGetVideosRequest) (*ResponseWithGenericOfVideo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfVideo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoAPIService.GetVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/videos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	if r.cameraLoad != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera__load", r.cameraLoad, "")
	}
	if r.referencedByDetectionLoad != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_detection__load", r.referencedByDetectionLoad, "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "")
	}
	if r.idContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__contains", r.idContains, "")
	}
	if r.idNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notcontains", r.idNotcontains, "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "")
	}
	if r.createdAtContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__contains", r.createdAtContains, "")
	}
	if r.createdAtNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notcontains", r.createdAtNotcontains, "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "")
	}
	if r.updatedAtContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__contains", r.updatedAtContains, "")
	}
	if r.updatedAtNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notcontains", r.updatedAtNotcontains, "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "")
	}
	if r.deletedAtContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__contains", r.deletedAtContains, "")
	}
	if r.deletedAtNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notcontains", r.deletedAtNotcontains, "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "")
	}
	if r.fileNameEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__eq", r.fileNameEq, "")
	}
	if r.fileNameNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__ne", r.fileNameNe, "")
	}
	if r.fileNameGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__gt", r.fileNameGt, "")
	}
	if r.fileNameGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__gte", r.fileNameGte, "")
	}
	if r.fileNameLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__lt", r.fileNameLt, "")
	}
	if r.fileNameLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__lte", r.fileNameLte, "")
	}
	if r.fileNameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__in", r.fileNameIn, "")
	}
	if r.fileNameNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__notin", r.fileNameNotin, "")
	}
	if r.fileNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__contains", r.fileNameContains, "")
	}
	if r.fileNameNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__notcontains", r.fileNameNotcontains, "")
	}
	if r.fileNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__like", r.fileNameLike, "")
	}
	if r.fileNameNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__notlike", r.fileNameNotlike, "")
	}
	if r.fileNameIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__ilike", r.fileNameIlike, "")
	}
	if r.fileNameNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__notilike", r.fileNameNotilike, "")
	}
	if r.fileNameDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__desc", r.fileNameDesc, "")
	}
	if r.fileNameAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name__asc", r.fileNameAsc, "")
	}
	if r.startedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__eq", r.startedAtEq, "")
	}
	if r.startedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__ne", r.startedAtNe, "")
	}
	if r.startedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__gt", r.startedAtGt, "")
	}
	if r.startedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__gte", r.startedAtGte, "")
	}
	if r.startedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__lt", r.startedAtLt, "")
	}
	if r.startedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__lte", r.startedAtLte, "")
	}
	if r.startedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__in", r.startedAtIn, "")
	}
	if r.startedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__notin", r.startedAtNotin, "")
	}
	if r.startedAtContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__contains", r.startedAtContains, "")
	}
	if r.startedAtNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__notcontains", r.startedAtNotcontains, "")
	}
	if r.startedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__like", r.startedAtLike, "")
	}
	if r.startedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__notlike", r.startedAtNotlike, "")
	}
	if r.startedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__ilike", r.startedAtIlike, "")
	}
	if r.startedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__notilike", r.startedAtNotilike, "")
	}
	if r.startedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__desc", r.startedAtDesc, "")
	}
	if r.startedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started_at__asc", r.startedAtAsc, "")
	}
	if r.endedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__eq", r.endedAtEq, "")
	}
	if r.endedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__ne", r.endedAtNe, "")
	}
	if r.endedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__gt", r.endedAtGt, "")
	}
	if r.endedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__gte", r.endedAtGte, "")
	}
	if r.endedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__lt", r.endedAtLt, "")
	}
	if r.endedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__lte", r.endedAtLte, "")
	}
	if r.endedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__in", r.endedAtIn, "")
	}
	if r.endedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__notin", r.endedAtNotin, "")
	}
	if r.endedAtContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__contains", r.endedAtContains, "")
	}
	if r.endedAtNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__notcontains", r.endedAtNotcontains, "")
	}
	if r.endedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__like", r.endedAtLike, "")
	}
	if r.endedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__notlike", r.endedAtNotlike, "")
	}
	if r.endedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__ilike", r.endedAtIlike, "")
	}
	if r.endedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__notilike", r.endedAtNotilike, "")
	}
	if r.endedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__desc", r.endedAtDesc, "")
	}
	if r.endedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ended_at__asc", r.endedAtAsc, "")
	}
	if r.durationEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__eq", r.durationEq, "")
	}
	if r.durationNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__ne", r.durationNe, "")
	}
	if r.durationGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__gt", r.durationGt, "")
	}
	if r.durationGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__gte", r.durationGte, "")
	}
	if r.durationLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__lt", r.durationLt, "")
	}
	if r.durationLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__lte", r.durationLte, "")
	}
	if r.durationIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__in", r.durationIn, "")
	}
	if r.durationNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__notin", r.durationNotin, "")
	}
	if r.durationContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__contains", r.durationContains, "")
	}
	if r.durationNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__notcontains", r.durationNotcontains, "")
	}
	if r.durationDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__desc", r.durationDesc, "")
	}
	if r.durationAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration__asc", r.durationAsc, "")
	}
	if r.fileSizeEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__eq", r.fileSizeEq, "")
	}
	if r.fileSizeNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__ne", r.fileSizeNe, "")
	}
	if r.fileSizeGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__gt", r.fileSizeGt, "")
	}
	if r.fileSizeGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__gte", r.fileSizeGte, "")
	}
	if r.fileSizeLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__lt", r.fileSizeLt, "")
	}
	if r.fileSizeLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__lte", r.fileSizeLte, "")
	}
	if r.fileSizeIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__in", r.fileSizeIn, "")
	}
	if r.fileSizeNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__notin", r.fileSizeNotin, "")
	}
	if r.fileSizeContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__contains", r.fileSizeContains, "")
	}
	if r.fileSizeNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__notcontains", r.fileSizeNotcontains, "")
	}
	if r.fileSizeDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__desc", r.fileSizeDesc, "")
	}
	if r.fileSizeAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_size__asc", r.fileSizeAsc, "")
	}
	if r.thumbnailNameEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__eq", r.thumbnailNameEq, "")
	}
	if r.thumbnailNameNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__ne", r.thumbnailNameNe, "")
	}
	if r.thumbnailNameGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__gt", r.thumbnailNameGt, "")
	}
	if r.thumbnailNameGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__gte", r.thumbnailNameGte, "")
	}
	if r.thumbnailNameLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__lt", r.thumbnailNameLt, "")
	}
	if r.thumbnailNameLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__lte", r.thumbnailNameLte, "")
	}
	if r.thumbnailNameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__in", r.thumbnailNameIn, "")
	}
	if r.thumbnailNameNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__notin", r.thumbnailNameNotin, "")
	}
	if r.thumbnailNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__contains", r.thumbnailNameContains, "")
	}
	if r.thumbnailNameNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__notcontains", r.thumbnailNameNotcontains, "")
	}
	if r.thumbnailNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__like", r.thumbnailNameLike, "")
	}
	if r.thumbnailNameNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__notlike", r.thumbnailNameNotlike, "")
	}
	if r.thumbnailNameIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__ilike", r.thumbnailNameIlike, "")
	}
	if r.thumbnailNameNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__notilike", r.thumbnailNameNotilike, "")
	}
	if r.thumbnailNameDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__desc", r.thumbnailNameDesc, "")
	}
	if r.thumbnailNameAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail_name__asc", r.thumbnailNameAsc, "")
	}
	if r.statusEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__eq", r.statusEq, "")
	}
	if r.statusNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__ne", r.statusNe, "")
	}
	if r.statusGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__gt", r.statusGt, "")
	}
	if r.statusGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__gte", r.statusGte, "")
	}
	if r.statusLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__lt", r.statusLt, "")
	}
	if r.statusLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__lte", r.statusLte, "")
	}
	if r.statusIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__in", r.statusIn, "")
	}
	if r.statusNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__notin", r.statusNotin, "")
	}
	if r.statusContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__contains", r.statusContains, "")
	}
	if r.statusNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__notcontains", r.statusNotcontains, "")
	}
	if r.statusLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__like", r.statusLike, "")
	}
	if r.statusNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__notlike", r.statusNotlike, "")
	}
	if r.statusIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__ilike", r.statusIlike, "")
	}
	if r.statusNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__notilike", r.statusNotilike, "")
	}
	if r.statusDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__desc", r.statusDesc, "")
	}
	if r.statusAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__asc", r.statusAsc, "")
	}
	if r.objectDetectorClaimedUntilEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__eq", r.objectDetectorClaimedUntilEq, "")
	}
	if r.objectDetectorClaimedUntilNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__ne", r.objectDetectorClaimedUntilNe, "")
	}
	if r.objectDetectorClaimedUntilGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__gt", r.objectDetectorClaimedUntilGt, "")
	}
	if r.objectDetectorClaimedUntilGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__gte", r.objectDetectorClaimedUntilGte, "")
	}
	if r.objectDetectorClaimedUntilLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__lt", r.objectDetectorClaimedUntilLt, "")
	}
	if r.objectDetectorClaimedUntilLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__lte", r.objectDetectorClaimedUntilLte, "")
	}
	if r.objectDetectorClaimedUntilIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__in", r.objectDetectorClaimedUntilIn, "")
	}
	if r.objectDetectorClaimedUntilNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__notin", r.objectDetectorClaimedUntilNotin, "")
	}
	if r.objectDetectorClaimedUntilContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__contains", r.objectDetectorClaimedUntilContains, "")
	}
	if r.objectDetectorClaimedUntilNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__notcontains", r.objectDetectorClaimedUntilNotcontains, "")
	}
	if r.objectDetectorClaimedUntilLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__like", r.objectDetectorClaimedUntilLike, "")
	}
	if r.objectDetectorClaimedUntilNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__notlike", r.objectDetectorClaimedUntilNotlike, "")
	}
	if r.objectDetectorClaimedUntilIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__ilike", r.objectDetectorClaimedUntilIlike, "")
	}
	if r.objectDetectorClaimedUntilNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__notilike", r.objectDetectorClaimedUntilNotilike, "")
	}
	if r.objectDetectorClaimedUntilDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__desc", r.objectDetectorClaimedUntilDesc, "")
	}
	if r.objectDetectorClaimedUntilAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_detector_claimed_until__asc", r.objectDetectorClaimedUntilAsc, "")
	}
	if r.objectTrackerClaimedUntilEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__eq", r.objectTrackerClaimedUntilEq, "")
	}
	if r.objectTrackerClaimedUntilNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__ne", r.objectTrackerClaimedUntilNe, "")
	}
	if r.objectTrackerClaimedUntilGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__gt", r.objectTrackerClaimedUntilGt, "")
	}
	if r.objectTrackerClaimedUntilGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__gte", r.objectTrackerClaimedUntilGte, "")
	}
	if r.objectTrackerClaimedUntilLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__lt", r.objectTrackerClaimedUntilLt, "")
	}
	if r.objectTrackerClaimedUntilLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__lte", r.objectTrackerClaimedUntilLte, "")
	}
	if r.objectTrackerClaimedUntilIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__in", r.objectTrackerClaimedUntilIn, "")
	}
	if r.objectTrackerClaimedUntilNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__notin", r.objectTrackerClaimedUntilNotin, "")
	}
	if r.objectTrackerClaimedUntilContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__contains", r.objectTrackerClaimedUntilContains, "")
	}
	if r.objectTrackerClaimedUntilNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__notcontains", r.objectTrackerClaimedUntilNotcontains, "")
	}
	if r.objectTrackerClaimedUntilLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__like", r.objectTrackerClaimedUntilLike, "")
	}
	if r.objectTrackerClaimedUntilNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__notlike", r.objectTrackerClaimedUntilNotlike, "")
	}
	if r.objectTrackerClaimedUntilIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__ilike", r.objectTrackerClaimedUntilIlike, "")
	}
	if r.objectTrackerClaimedUntilNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__notilike", r.objectTrackerClaimedUntilNotilike, "")
	}
	if r.objectTrackerClaimedUntilDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__desc", r.objectTrackerClaimedUntilDesc, "")
	}
	if r.objectTrackerClaimedUntilAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_tracker_claimed_until__asc", r.objectTrackerClaimedUntilAsc, "")
	}
	if r.cameraIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__eq", r.cameraIdEq, "")
	}
	if r.cameraIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__ne", r.cameraIdNe, "")
	}
	if r.cameraIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__gt", r.cameraIdGt, "")
	}
	if r.cameraIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__gte", r.cameraIdGte, "")
	}
	if r.cameraIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__lt", r.cameraIdLt, "")
	}
	if r.cameraIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__lte", r.cameraIdLte, "")
	}
	if r.cameraIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__in", r.cameraIdIn, "")
	}
	if r.cameraIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__notin", r.cameraIdNotin, "")
	}
	if r.cameraIdContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__contains", r.cameraIdContains, "")
	}
	if r.cameraIdNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__notcontains", r.cameraIdNotcontains, "")
	}
	if r.cameraIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__like", r.cameraIdLike, "")
	}
	if r.cameraIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__notlike", r.cameraIdNotlike, "")
	}
	if r.cameraIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__ilike", r.cameraIdIlike, "")
	}
	if r.cameraIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__notilike", r.cameraIdNotilike, "")
	}
	if r.cameraIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__desc", r.cameraIdDesc, "")
	}
	if r.cameraIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__asc", r.cameraIdAsc, "")
	}
	if r.cameraIdObjectContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id_object__contains", r.cameraIdObjectContains, "")
	}
	if r.cameraIdObjectNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id_object__notcontains", r.cameraIdObjectNotcontains, "")
	}
	if r.cameraIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id_object__desc", r.cameraIdObjectDesc, "")
	}
	if r.cameraIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id_object__asc", r.cameraIdObjectAsc, "")
	}
	if r.detectionSummaryContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detection_summary__contains", r.detectionSummaryContains, "")
	}
	if r.detectionSummaryNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detection_summary__notcontains", r.detectionSummaryNotcontains, "")
	}
	if r.detectionSummaryDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detection_summary__desc", r.detectionSummaryDesc, "")
	}
	if r.detectionSummaryAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detection_summary__asc", r.detectionSummaryAsc, "")
	}
	if r.referencedByDetectionVideoIdObjectsContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_detection_video_id_objects__contains", r.referencedByDetectionVideoIdObjectsContains, "")
	}
	if r.referencedByDetectionVideoIdObjectsNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_detection_video_id_objects__notcontains", r.referencedByDetectionVideoIdObjectsNotcontains, "")
	}
	if r.referencedByDetectionVideoIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_detection_video_id_objects__desc", r.referencedByDetectionVideoIdObjectsDesc, "")
	}
	if r.referencedByDetectionVideoIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_detection_video_id_objects__asc", r.referencedByDetectionVideoIdObjectsAsc, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchVideoRequest struct {
	ctx context.Context
	ApiService *VideoAPIService
	primaryKey string
	video *Video
	depth *int64
}

func (r ApiPatchVideoRequest) Video(video Video) ApiPatchVideoRequest {
	r.video = &video
	return r
}

// Query parameter depth
func (r ApiPatchVideoRequest) Depth(depth int64) ApiPatchVideoRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchVideoRequest) Execute() (*ResponseWithGenericOfVideo, *http.Response, error) {
	return r.ApiService.PatchVideoExecute(r)
}

/*
PatchVideo Method for PatchVideo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPatchVideoRequest
*/
func (a *VideoAPIService) PatchVideo(ctx context.Context, primaryKey string) ApiPatchVideoRequest {
	return ApiPatchVideoRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfVideo
func (a *VideoAPIService) PatchVideoExecute(r ApiPatchVideoRequest) (*ResponseWithGenericOfVideo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfVideo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoAPIService.PatchVideo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/videos/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.video == nil {
		return localVarReturnValue, nil, reportError("video is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.video
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostVideosRequest struct {
	ctx context.Context
	ApiService *VideoAPIService
	video *[]Video
	depth *int64
}

func (r ApiPostVideosRequest) Video(video []Video) ApiPostVideosRequest {
	r.video = &video
	return r
}

// Query parameter depth
func (r ApiPostVideosRequest) Depth(depth int64) ApiPostVideosRequest {
	r.depth = &depth
	return r
}

func (r ApiPostVideosRequest) Execute() (*ResponseWithGenericOfVideo, *http.Response, error) {
	return r.ApiService.PostVideosExecute(r)
}

/*
PostVideos Method for PostVideos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostVideosRequest
*/
func (a *VideoAPIService) PostVideos(ctx context.Context) ApiPostVideosRequest {
	return ApiPostVideosRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfVideo
func (a *VideoAPIService) PostVideosExecute(r ApiPostVideosRequest) (*ResponseWithGenericOfVideo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfVideo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoAPIService.PostVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/videos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.video == nil {
		return localVarReturnValue, nil, reportError("video is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.video
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostVideosObjectDetectorClaimRequest struct {
	ctx context.Context
	ApiService *VideoAPIService
	primaryKey string
	videoObjectDetectorClaimRequest *VideoObjectDetectorClaimRequest
	depth *int64
}

func (r ApiPostVideosObjectDetectorClaimRequest) VideoObjectDetectorClaimRequest(videoObjectDetectorClaimRequest VideoObjectDetectorClaimRequest) ApiPostVideosObjectDetectorClaimRequest {
	r.videoObjectDetectorClaimRequest = &videoObjectDetectorClaimRequest
	return r
}

// Query parameter depth
func (r ApiPostVideosObjectDetectorClaimRequest) Depth(depth int64) ApiPostVideosObjectDetectorClaimRequest {
	r.depth = &depth
	return r
}

func (r ApiPostVideosObjectDetectorClaimRequest) Execute() (*ResponseWithGenericOfVideo, *http.Response, error) {
	return r.ApiService.PostVideosObjectDetectorClaimExecute(r)
}

/*
PostVideosObjectDetectorClaim Method for PostVideosObjectDetectorClaim

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPostVideosObjectDetectorClaimRequest
*/
func (a *VideoAPIService) PostVideosObjectDetectorClaim(ctx context.Context, primaryKey string) ApiPostVideosObjectDetectorClaimRequest {
	return ApiPostVideosObjectDetectorClaimRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfVideo
func (a *VideoAPIService) PostVideosObjectDetectorClaimExecute(r ApiPostVideosObjectDetectorClaimRequest) (*ResponseWithGenericOfVideo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfVideo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoAPIService.PostVideosObjectDetectorClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/videos/{primaryKey}/object-detector-claim"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.videoObjectDetectorClaimRequest == nil {
		return localVarReturnValue, nil, reportError("videoObjectDetectorClaimRequest is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.videoObjectDetectorClaimRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostVideosObjectTrackerClaimRequest struct {
	ctx context.Context
	ApiService *VideoAPIService
	primaryKey string
	videoObjectTrackerClaimRequest *VideoObjectTrackerClaimRequest
	depth *int64
}

func (r ApiPostVideosObjectTrackerClaimRequest) VideoObjectTrackerClaimRequest(videoObjectTrackerClaimRequest VideoObjectTrackerClaimRequest) ApiPostVideosObjectTrackerClaimRequest {
	r.videoObjectTrackerClaimRequest = &videoObjectTrackerClaimRequest
	return r
}

// Query parameter depth
func (r ApiPostVideosObjectTrackerClaimRequest) Depth(depth int64) ApiPostVideosObjectTrackerClaimRequest {
	r.depth = &depth
	return r
}

func (r ApiPostVideosObjectTrackerClaimRequest) Execute() (*ResponseWithGenericOfVideo, *http.Response, error) {
	return r.ApiService.PostVideosObjectTrackerClaimExecute(r)
}

/*
PostVideosObjectTrackerClaim Method for PostVideosObjectTrackerClaim

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPostVideosObjectTrackerClaimRequest
*/
func (a *VideoAPIService) PostVideosObjectTrackerClaim(ctx context.Context, primaryKey string) ApiPostVideosObjectTrackerClaimRequest {
	return ApiPostVideosObjectTrackerClaimRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfVideo
func (a *VideoAPIService) PostVideosObjectTrackerClaimExecute(r ApiPostVideosObjectTrackerClaimRequest) (*ResponseWithGenericOfVideo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfVideo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoAPIService.PostVideosObjectTrackerClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/videos/{primaryKey}/object-tracker-claim"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.videoObjectTrackerClaimRequest == nil {
		return localVarReturnValue, nil, reportError("videoObjectTrackerClaimRequest is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.videoObjectTrackerClaimRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
