/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// DetectionAPIService DetectionAPI service
type DetectionAPIService service

type ApiDeleteDetectionRequest struct {
	ctx context.Context
	ApiService *DetectionAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiDeleteDetectionRequest) Depth(depth int64) ApiDeleteDetectionRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteDetectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDetectionExecute(r)
}

/*
DeleteDetection Method for DeleteDetection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiDeleteDetectionRequest
*/
func (a *DetectionAPIService) DeleteDetection(ctx context.Context, primaryKey string) ApiDeleteDetectionRequest {
	return ApiDeleteDetectionRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *DetectionAPIService) DeleteDetectionExecute(r ApiDeleteDetectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DetectionAPIService.DeleteDetection")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/detections/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDetectionRequest struct {
	ctx context.Context
	ApiService *DetectionAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiGetDetectionRequest) Depth(depth int64) ApiGetDetectionRequest {
	r.depth = &depth
	return r
}

func (r ApiGetDetectionRequest) Execute() (*ResponseWithGenericOfDetection, *http.Response, error) {
	return r.ApiService.GetDetectionExecute(r)
}

/*
GetDetection Method for GetDetection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiGetDetectionRequest
*/
func (a *DetectionAPIService) GetDetection(ctx context.Context, primaryKey string) ApiGetDetectionRequest {
	return ApiGetDetectionRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfDetection
func (a *DetectionAPIService) GetDetectionExecute(r ApiGetDetectionRequest) (*ResponseWithGenericOfDetection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfDetection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DetectionAPIService.GetDetection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/detections/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDetectionsRequest struct {
	ctx context.Context
	ApiService *DetectionAPIService
	limit *int32
	offset *int32
	depth *int32
	videoLoad *string
	cameraLoad *string
	idEq *string
	idNe *string
	idGt *string
	idGte *string
	idLt *string
	idLte *string
	idIn *string
	idNotin *string
	idContains *string
	idNotcontains *string
	idLike *string
	idNotlike *string
	idIlike *string
	idNotilike *string
	idDesc *string
	idAsc *string
	createdAtEq *time.Time
	createdAtNe *time.Time
	createdAtGt *time.Time
	createdAtGte *time.Time
	createdAtLt *time.Time
	createdAtLte *time.Time
	createdAtIn *time.Time
	createdAtNotin *time.Time
	createdAtContains *time.Time
	createdAtNotcontains *time.Time
	createdAtLike *time.Time
	createdAtNotlike *time.Time
	createdAtIlike *time.Time
	createdAtNotilike *time.Time
	createdAtDesc *string
	createdAtAsc *string
	updatedAtEq *time.Time
	updatedAtNe *time.Time
	updatedAtGt *time.Time
	updatedAtGte *time.Time
	updatedAtLt *time.Time
	updatedAtLte *time.Time
	updatedAtIn *time.Time
	updatedAtNotin *time.Time
	updatedAtContains *time.Time
	updatedAtNotcontains *time.Time
	updatedAtLike *time.Time
	updatedAtNotlike *time.Time
	updatedAtIlike *time.Time
	updatedAtNotilike *time.Time
	updatedAtDesc *string
	updatedAtAsc *string
	deletedAtEq *time.Time
	deletedAtNe *time.Time
	deletedAtGt *time.Time
	deletedAtGte *time.Time
	deletedAtLt *time.Time
	deletedAtLte *time.Time
	deletedAtIn *time.Time
	deletedAtNotin *time.Time
	deletedAtContains *time.Time
	deletedAtNotcontains *time.Time
	deletedAtLike *time.Time
	deletedAtNotlike *time.Time
	deletedAtIlike *time.Time
	deletedAtNotilike *time.Time
	deletedAtDesc *string
	deletedAtAsc *string
	seenAtEq *time.Time
	seenAtNe *time.Time
	seenAtGt *time.Time
	seenAtGte *time.Time
	seenAtLt *time.Time
	seenAtLte *time.Time
	seenAtIn *time.Time
	seenAtNotin *time.Time
	seenAtContains *time.Time
	seenAtNotcontains *time.Time
	seenAtLike *time.Time
	seenAtNotlike *time.Time
	seenAtIlike *time.Time
	seenAtNotilike *time.Time
	seenAtDesc *string
	seenAtAsc *string
	classIdEq *int64
	classIdNe *int64
	classIdGt *int64
	classIdGte *int64
	classIdLt *int64
	classIdLte *int64
	classIdIn *int64
	classIdNotin *int64
	classIdContains *int64
	classIdNotcontains *int64
	classIdDesc *string
	classIdAsc *string
	classNameEq *string
	classNameNe *string
	classNameGt *string
	classNameGte *string
	classNameLt *string
	classNameLte *string
	classNameIn *string
	classNameNotin *string
	classNameContains *string
	classNameNotcontains *string
	classNameLike *string
	classNameNotlike *string
	classNameIlike *string
	classNameNotilike *string
	classNameDesc *string
	classNameAsc *string
	scoreEq *float64
	scoreNe *float64
	scoreGt *float64
	scoreGte *float64
	scoreLt *float64
	scoreLte *float64
	scoreIn *float64
	scoreNotin *float64
	scoreContains *float64
	scoreNotcontains *float64
	scoreDesc *string
	scoreAsc *string
	centroidContains *interface{}
	centroidNotcontains *interface{}
	centroidDesc *string
	centroidAsc *string
	boundingBoxContains *interface{}
	boundingBoxNotcontains *interface{}
	boundingBoxDesc *string
	boundingBoxAsc *string
	videoIdEq *string
	videoIdNe *string
	videoIdGt *string
	videoIdGte *string
	videoIdLt *string
	videoIdLte *string
	videoIdIn *string
	videoIdNotin *string
	videoIdContains *string
	videoIdNotcontains *string
	videoIdLike *string
	videoIdNotlike *string
	videoIdIlike *string
	videoIdNotilike *string
	videoIdDesc *string
	videoIdAsc *string
	videoIdObjectContains *interface{}
	videoIdObjectNotcontains *interface{}
	videoIdObjectDesc *string
	videoIdObjectAsc *string
	cameraIdEq *string
	cameraIdNe *string
	cameraIdGt *string
	cameraIdGte *string
	cameraIdLt *string
	cameraIdLte *string
	cameraIdIn *string
	cameraIdNotin *string
	cameraIdContains *string
	cameraIdNotcontains *string
	cameraIdLike *string
	cameraIdNotlike *string
	cameraIdIlike *string
	cameraIdNotilike *string
	cameraIdDesc *string
	cameraIdAsc *string
	cameraIdObjectContains *interface{}
	cameraIdObjectNotcontains *interface{}
	cameraIdObjectDesc *string
	cameraIdObjectAsc *string
}

// SQL LIMIT operator
func (r ApiGetDetectionsRequest) Limit(limit int32) ApiGetDetectionsRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetDetectionsRequest) Offset(offset int32) ApiGetDetectionsRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetDetectionsRequest) Depth(depth int32) ApiGetDetectionsRequest {
	r.depth = &depth
	return r
}

// load the given directly related object, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) VideoLoad(videoLoad string) ApiGetDetectionsRequest {
	r.videoLoad = &videoLoad
	return r
}

// load the given directly related object, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) CameraLoad(cameraLoad string) ApiGetDetectionsRequest {
	r.cameraLoad = &cameraLoad
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) IdEq(idEq string) ApiGetDetectionsRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) IdNe(idNe string) ApiGetDetectionsRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) IdGt(idGt string) ApiGetDetectionsRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) IdGte(idGte string) ApiGetDetectionsRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) IdLt(idLt string) ApiGetDetectionsRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) IdLte(idLte string) ApiGetDetectionsRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) IdIn(idIn string) ApiGetDetectionsRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) IdNotin(idNotin string) ApiGetDetectionsRequest {
	r.idNotin = &idNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) IdContains(idContains string) ApiGetDetectionsRequest {
	r.idContains = &idContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) IdNotcontains(idNotcontains string) ApiGetDetectionsRequest {
	r.idNotcontains = &idNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) IdLike(idLike string) ApiGetDetectionsRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) IdNotlike(idNotlike string) ApiGetDetectionsRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) IdIlike(idIlike string) ApiGetDetectionsRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) IdNotilike(idNotilike string) ApiGetDetectionsRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) IdDesc(idDesc string) ApiGetDetectionsRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) IdAsc(idAsc string) ApiGetDetectionsRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) CreatedAtEq(createdAtEq time.Time) ApiGetDetectionsRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) CreatedAtNe(createdAtNe time.Time) ApiGetDetectionsRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) CreatedAtGt(createdAtGt time.Time) ApiGetDetectionsRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) CreatedAtGte(createdAtGte time.Time) ApiGetDetectionsRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) CreatedAtLt(createdAtLt time.Time) ApiGetDetectionsRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) CreatedAtLte(createdAtLte time.Time) ApiGetDetectionsRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) CreatedAtIn(createdAtIn time.Time) ApiGetDetectionsRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetDetectionsRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) CreatedAtContains(createdAtContains time.Time) ApiGetDetectionsRequest {
	r.createdAtContains = &createdAtContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) CreatedAtNotcontains(createdAtNotcontains time.Time) ApiGetDetectionsRequest {
	r.createdAtNotcontains = &createdAtNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) CreatedAtLike(createdAtLike time.Time) ApiGetDetectionsRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetDetectionsRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetDetectionsRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetDetectionsRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) CreatedAtDesc(createdAtDesc string) ApiGetDetectionsRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) CreatedAtAsc(createdAtAsc string) ApiGetDetectionsRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetDetectionsRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetDetectionsRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetDetectionsRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetDetectionsRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetDetectionsRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetDetectionsRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetDetectionsRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetDetectionsRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) UpdatedAtContains(updatedAtContains time.Time) ApiGetDetectionsRequest {
	r.updatedAtContains = &updatedAtContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) UpdatedAtNotcontains(updatedAtNotcontains time.Time) ApiGetDetectionsRequest {
	r.updatedAtNotcontains = &updatedAtNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetDetectionsRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetDetectionsRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetDetectionsRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetDetectionsRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetDetectionsRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetDetectionsRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetDetectionsRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetDetectionsRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetDetectionsRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetDetectionsRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetDetectionsRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetDetectionsRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetDetectionsRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetDetectionsRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) DeletedAtContains(deletedAtContains time.Time) ApiGetDetectionsRequest {
	r.deletedAtContains = &deletedAtContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) DeletedAtNotcontains(deletedAtNotcontains time.Time) ApiGetDetectionsRequest {
	r.deletedAtNotcontains = &deletedAtNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetDetectionsRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetDetectionsRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetDetectionsRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetDetectionsRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) DeletedAtDesc(deletedAtDesc string) ApiGetDetectionsRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) DeletedAtAsc(deletedAtAsc string) ApiGetDetectionsRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) SeenAtEq(seenAtEq time.Time) ApiGetDetectionsRequest {
	r.seenAtEq = &seenAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) SeenAtNe(seenAtNe time.Time) ApiGetDetectionsRequest {
	r.seenAtNe = &seenAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) SeenAtGt(seenAtGt time.Time) ApiGetDetectionsRequest {
	r.seenAtGt = &seenAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) SeenAtGte(seenAtGte time.Time) ApiGetDetectionsRequest {
	r.seenAtGte = &seenAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) SeenAtLt(seenAtLt time.Time) ApiGetDetectionsRequest {
	r.seenAtLt = &seenAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) SeenAtLte(seenAtLte time.Time) ApiGetDetectionsRequest {
	r.seenAtLte = &seenAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) SeenAtIn(seenAtIn time.Time) ApiGetDetectionsRequest {
	r.seenAtIn = &seenAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) SeenAtNotin(seenAtNotin time.Time) ApiGetDetectionsRequest {
	r.seenAtNotin = &seenAtNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) SeenAtContains(seenAtContains time.Time) ApiGetDetectionsRequest {
	r.seenAtContains = &seenAtContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) SeenAtNotcontains(seenAtNotcontains time.Time) ApiGetDetectionsRequest {
	r.seenAtNotcontains = &seenAtNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) SeenAtLike(seenAtLike time.Time) ApiGetDetectionsRequest {
	r.seenAtLike = &seenAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) SeenAtNotlike(seenAtNotlike time.Time) ApiGetDetectionsRequest {
	r.seenAtNotlike = &seenAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) SeenAtIlike(seenAtIlike time.Time) ApiGetDetectionsRequest {
	r.seenAtIlike = &seenAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) SeenAtNotilike(seenAtNotilike time.Time) ApiGetDetectionsRequest {
	r.seenAtNotilike = &seenAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) SeenAtDesc(seenAtDesc string) ApiGetDetectionsRequest {
	r.seenAtDesc = &seenAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) SeenAtAsc(seenAtAsc string) ApiGetDetectionsRequest {
	r.seenAtAsc = &seenAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) ClassIdEq(classIdEq int64) ApiGetDetectionsRequest {
	r.classIdEq = &classIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) ClassIdNe(classIdNe int64) ApiGetDetectionsRequest {
	r.classIdNe = &classIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ClassIdGt(classIdGt int64) ApiGetDetectionsRequest {
	r.classIdGt = &classIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ClassIdGte(classIdGte int64) ApiGetDetectionsRequest {
	r.classIdGte = &classIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ClassIdLt(classIdLt int64) ApiGetDetectionsRequest {
	r.classIdLt = &classIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ClassIdLte(classIdLte int64) ApiGetDetectionsRequest {
	r.classIdLte = &classIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) ClassIdIn(classIdIn int64) ApiGetDetectionsRequest {
	r.classIdIn = &classIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) ClassIdNotin(classIdNotin int64) ApiGetDetectionsRequest {
	r.classIdNotin = &classIdNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) ClassIdContains(classIdContains int64) ApiGetDetectionsRequest {
	r.classIdContains = &classIdContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) ClassIdNotcontains(classIdNotcontains int64) ApiGetDetectionsRequest {
	r.classIdNotcontains = &classIdNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) ClassIdDesc(classIdDesc string) ApiGetDetectionsRequest {
	r.classIdDesc = &classIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) ClassIdAsc(classIdAsc string) ApiGetDetectionsRequest {
	r.classIdAsc = &classIdAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) ClassNameEq(classNameEq string) ApiGetDetectionsRequest {
	r.classNameEq = &classNameEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) ClassNameNe(classNameNe string) ApiGetDetectionsRequest {
	r.classNameNe = &classNameNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ClassNameGt(classNameGt string) ApiGetDetectionsRequest {
	r.classNameGt = &classNameGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ClassNameGte(classNameGte string) ApiGetDetectionsRequest {
	r.classNameGte = &classNameGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ClassNameLt(classNameLt string) ApiGetDetectionsRequest {
	r.classNameLt = &classNameLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ClassNameLte(classNameLte string) ApiGetDetectionsRequest {
	r.classNameLte = &classNameLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) ClassNameIn(classNameIn string) ApiGetDetectionsRequest {
	r.classNameIn = &classNameIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) ClassNameNotin(classNameNotin string) ApiGetDetectionsRequest {
	r.classNameNotin = &classNameNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) ClassNameContains(classNameContains string) ApiGetDetectionsRequest {
	r.classNameContains = &classNameContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) ClassNameNotcontains(classNameNotcontains string) ApiGetDetectionsRequest {
	r.classNameNotcontains = &classNameNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) ClassNameLike(classNameLike string) ApiGetDetectionsRequest {
	r.classNameLike = &classNameLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) ClassNameNotlike(classNameNotlike string) ApiGetDetectionsRequest {
	r.classNameNotlike = &classNameNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) ClassNameIlike(classNameIlike string) ApiGetDetectionsRequest {
	r.classNameIlike = &classNameIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) ClassNameNotilike(classNameNotilike string) ApiGetDetectionsRequest {
	r.classNameNotilike = &classNameNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) ClassNameDesc(classNameDesc string) ApiGetDetectionsRequest {
	r.classNameDesc = &classNameDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) ClassNameAsc(classNameAsc string) ApiGetDetectionsRequest {
	r.classNameAsc = &classNameAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) ScoreEq(scoreEq float64) ApiGetDetectionsRequest {
	r.scoreEq = &scoreEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) ScoreNe(scoreNe float64) ApiGetDetectionsRequest {
	r.scoreNe = &scoreNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ScoreGt(scoreGt float64) ApiGetDetectionsRequest {
	r.scoreGt = &scoreGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ScoreGte(scoreGte float64) ApiGetDetectionsRequest {
	r.scoreGte = &scoreGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ScoreLt(scoreLt float64) ApiGetDetectionsRequest {
	r.scoreLt = &scoreLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) ScoreLte(scoreLte float64) ApiGetDetectionsRequest {
	r.scoreLte = &scoreLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) ScoreIn(scoreIn float64) ApiGetDetectionsRequest {
	r.scoreIn = &scoreIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) ScoreNotin(scoreNotin float64) ApiGetDetectionsRequest {
	r.scoreNotin = &scoreNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) ScoreContains(scoreContains float64) ApiGetDetectionsRequest {
	r.scoreContains = &scoreContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) ScoreNotcontains(scoreNotcontains float64) ApiGetDetectionsRequest {
	r.scoreNotcontains = &scoreNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) ScoreDesc(scoreDesc string) ApiGetDetectionsRequest {
	r.scoreDesc = &scoreDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) ScoreAsc(scoreAsc string) ApiGetDetectionsRequest {
	r.scoreAsc = &scoreAsc
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) CentroidContains(centroidContains interface{}) ApiGetDetectionsRequest {
	r.centroidContains = &centroidContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) CentroidNotcontains(centroidNotcontains interface{}) ApiGetDetectionsRequest {
	r.centroidNotcontains = &centroidNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) CentroidDesc(centroidDesc string) ApiGetDetectionsRequest {
	r.centroidDesc = &centroidDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) CentroidAsc(centroidAsc string) ApiGetDetectionsRequest {
	r.centroidAsc = &centroidAsc
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) BoundingBoxContains(boundingBoxContains interface{}) ApiGetDetectionsRequest {
	r.boundingBoxContains = &boundingBoxContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) BoundingBoxNotcontains(boundingBoxNotcontains interface{}) ApiGetDetectionsRequest {
	r.boundingBoxNotcontains = &boundingBoxNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) BoundingBoxDesc(boundingBoxDesc string) ApiGetDetectionsRequest {
	r.boundingBoxDesc = &boundingBoxDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) BoundingBoxAsc(boundingBoxAsc string) ApiGetDetectionsRequest {
	r.boundingBoxAsc = &boundingBoxAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) VideoIdEq(videoIdEq string) ApiGetDetectionsRequest {
	r.videoIdEq = &videoIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) VideoIdNe(videoIdNe string) ApiGetDetectionsRequest {
	r.videoIdNe = &videoIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) VideoIdGt(videoIdGt string) ApiGetDetectionsRequest {
	r.videoIdGt = &videoIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) VideoIdGte(videoIdGte string) ApiGetDetectionsRequest {
	r.videoIdGte = &videoIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) VideoIdLt(videoIdLt string) ApiGetDetectionsRequest {
	r.videoIdLt = &videoIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) VideoIdLte(videoIdLte string) ApiGetDetectionsRequest {
	r.videoIdLte = &videoIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) VideoIdIn(videoIdIn string) ApiGetDetectionsRequest {
	r.videoIdIn = &videoIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) VideoIdNotin(videoIdNotin string) ApiGetDetectionsRequest {
	r.videoIdNotin = &videoIdNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) VideoIdContains(videoIdContains string) ApiGetDetectionsRequest {
	r.videoIdContains = &videoIdContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) VideoIdNotcontains(videoIdNotcontains string) ApiGetDetectionsRequest {
	r.videoIdNotcontains = &videoIdNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) VideoIdLike(videoIdLike string) ApiGetDetectionsRequest {
	r.videoIdLike = &videoIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) VideoIdNotlike(videoIdNotlike string) ApiGetDetectionsRequest {
	r.videoIdNotlike = &videoIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) VideoIdIlike(videoIdIlike string) ApiGetDetectionsRequest {
	r.videoIdIlike = &videoIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) VideoIdNotilike(videoIdNotilike string) ApiGetDetectionsRequest {
	r.videoIdNotilike = &videoIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) VideoIdDesc(videoIdDesc string) ApiGetDetectionsRequest {
	r.videoIdDesc = &videoIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) VideoIdAsc(videoIdAsc string) ApiGetDetectionsRequest {
	r.videoIdAsc = &videoIdAsc
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) VideoIdObjectContains(videoIdObjectContains interface{}) ApiGetDetectionsRequest {
	r.videoIdObjectContains = &videoIdObjectContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) VideoIdObjectNotcontains(videoIdObjectNotcontains interface{}) ApiGetDetectionsRequest {
	r.videoIdObjectNotcontains = &videoIdObjectNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) VideoIdObjectDesc(videoIdObjectDesc string) ApiGetDetectionsRequest {
	r.videoIdObjectDesc = &videoIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) VideoIdObjectAsc(videoIdObjectAsc string) ApiGetDetectionsRequest {
	r.videoIdObjectAsc = &videoIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetDetectionsRequest) CameraIdEq(cameraIdEq string) ApiGetDetectionsRequest {
	r.cameraIdEq = &cameraIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetDetectionsRequest) CameraIdNe(cameraIdNe string) ApiGetDetectionsRequest {
	r.cameraIdNe = &cameraIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) CameraIdGt(cameraIdGt string) ApiGetDetectionsRequest {
	r.cameraIdGt = &cameraIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) CameraIdGte(cameraIdGte string) ApiGetDetectionsRequest {
	r.cameraIdGte = &cameraIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) CameraIdLt(cameraIdLt string) ApiGetDetectionsRequest {
	r.cameraIdLt = &cameraIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetDetectionsRequest) CameraIdLte(cameraIdLte string) ApiGetDetectionsRequest {
	r.cameraIdLte = &cameraIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) CameraIdIn(cameraIdIn string) ApiGetDetectionsRequest {
	r.cameraIdIn = &cameraIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetDetectionsRequest) CameraIdNotin(cameraIdNotin string) ApiGetDetectionsRequest {
	r.cameraIdNotin = &cameraIdNotin
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) CameraIdContains(cameraIdContains string) ApiGetDetectionsRequest {
	r.cameraIdContains = &cameraIdContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) CameraIdNotcontains(cameraIdNotcontains string) ApiGetDetectionsRequest {
	r.cameraIdNotcontains = &cameraIdNotcontains
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) CameraIdLike(cameraIdLike string) ApiGetDetectionsRequest {
	r.cameraIdLike = &cameraIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) CameraIdNotlike(cameraIdNotlike string) ApiGetDetectionsRequest {
	r.cameraIdNotlike = &cameraIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) CameraIdIlike(cameraIdIlike string) ApiGetDetectionsRequest {
	r.cameraIdIlike = &cameraIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetDetectionsRequest) CameraIdNotilike(cameraIdNotilike string) ApiGetDetectionsRequest {
	r.cameraIdNotilike = &cameraIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) CameraIdDesc(cameraIdDesc string) ApiGetDetectionsRequest {
	r.cameraIdDesc = &cameraIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) CameraIdAsc(cameraIdAsc string) ApiGetDetectionsRequest {
	r.cameraIdAsc = &cameraIdAsc
	return r
}

// SQL @&gt; comparison
func (r ApiGetDetectionsRequest) CameraIdObjectContains(cameraIdObjectContains interface{}) ApiGetDetectionsRequest {
	r.cameraIdObjectContains = &cameraIdObjectContains
	return r
}

// SQL NOT @&gt; comparison
func (r ApiGetDetectionsRequest) CameraIdObjectNotcontains(cameraIdObjectNotcontains interface{}) ApiGetDetectionsRequest {
	r.cameraIdObjectNotcontains = &cameraIdObjectNotcontains
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) CameraIdObjectDesc(cameraIdObjectDesc string) ApiGetDetectionsRequest {
	r.cameraIdObjectDesc = &cameraIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetDetectionsRequest) CameraIdObjectAsc(cameraIdObjectAsc string) ApiGetDetectionsRequest {
	r.cameraIdObjectAsc = &cameraIdObjectAsc
	return r
}

func (r ApiGetDetectionsRequest) Execute() (*ResponseWithGenericOfDetection, *http.Response, error) {
	return r.ApiService.GetDetectionsExecute(r)
}

/*
GetDetections Method for GetDetections

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDetectionsRequest
*/
func (a *DetectionAPIService) GetDetections(ctx context.Context) ApiGetDetectionsRequest {
	return ApiGetDetectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfDetection
func (a *DetectionAPIService) GetDetectionsExecute(r ApiGetDetectionsRequest) (*ResponseWithGenericOfDetection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfDetection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DetectionAPIService.GetDetections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/detections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	if r.videoLoad != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video__load", r.videoLoad, "")
	}
	if r.cameraLoad != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera__load", r.cameraLoad, "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "")
	}
	if r.idContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__contains", r.idContains, "")
	}
	if r.idNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notcontains", r.idNotcontains, "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "")
	}
	if r.createdAtContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__contains", r.createdAtContains, "")
	}
	if r.createdAtNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notcontains", r.createdAtNotcontains, "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "")
	}
	if r.updatedAtContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__contains", r.updatedAtContains, "")
	}
	if r.updatedAtNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notcontains", r.updatedAtNotcontains, "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "")
	}
	if r.deletedAtContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__contains", r.deletedAtContains, "")
	}
	if r.deletedAtNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notcontains", r.deletedAtNotcontains, "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "")
	}
	if r.seenAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__eq", r.seenAtEq, "")
	}
	if r.seenAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__ne", r.seenAtNe, "")
	}
	if r.seenAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__gt", r.seenAtGt, "")
	}
	if r.seenAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__gte", r.seenAtGte, "")
	}
	if r.seenAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__lt", r.seenAtLt, "")
	}
	if r.seenAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__lte", r.seenAtLte, "")
	}
	if r.seenAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__in", r.seenAtIn, "")
	}
	if r.seenAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__notin", r.seenAtNotin, "")
	}
	if r.seenAtContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__contains", r.seenAtContains, "")
	}
	if r.seenAtNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__notcontains", r.seenAtNotcontains, "")
	}
	if r.seenAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__like", r.seenAtLike, "")
	}
	if r.seenAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__notlike", r.seenAtNotlike, "")
	}
	if r.seenAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__ilike", r.seenAtIlike, "")
	}
	if r.seenAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__notilike", r.seenAtNotilike, "")
	}
	if r.seenAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__desc", r.seenAtDesc, "")
	}
	if r.seenAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seen_at__asc", r.seenAtAsc, "")
	}
	if r.classIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__eq", r.classIdEq, "")
	}
	if r.classIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__ne", r.classIdNe, "")
	}
	if r.classIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__gt", r.classIdGt, "")
	}
	if r.classIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__gte", r.classIdGte, "")
	}
	if r.classIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__lt", r.classIdLt, "")
	}
	if r.classIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__lte", r.classIdLte, "")
	}
	if r.classIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__in", r.classIdIn, "")
	}
	if r.classIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__notin", r.classIdNotin, "")
	}
	if r.classIdContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__contains", r.classIdContains, "")
	}
	if r.classIdNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__notcontains", r.classIdNotcontains, "")
	}
	if r.classIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__desc", r.classIdDesc, "")
	}
	if r.classIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_id__asc", r.classIdAsc, "")
	}
	if r.classNameEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__eq", r.classNameEq, "")
	}
	if r.classNameNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__ne", r.classNameNe, "")
	}
	if r.classNameGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__gt", r.classNameGt, "")
	}
	if r.classNameGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__gte", r.classNameGte, "")
	}
	if r.classNameLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__lt", r.classNameLt, "")
	}
	if r.classNameLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__lte", r.classNameLte, "")
	}
	if r.classNameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__in", r.classNameIn, "")
	}
	if r.classNameNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__notin", r.classNameNotin, "")
	}
	if r.classNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__contains", r.classNameContains, "")
	}
	if r.classNameNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__notcontains", r.classNameNotcontains, "")
	}
	if r.classNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__like", r.classNameLike, "")
	}
	if r.classNameNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__notlike", r.classNameNotlike, "")
	}
	if r.classNameIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__ilike", r.classNameIlike, "")
	}
	if r.classNameNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__notilike", r.classNameNotilike, "")
	}
	if r.classNameDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__desc", r.classNameDesc, "")
	}
	if r.classNameAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class_name__asc", r.classNameAsc, "")
	}
	if r.scoreEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__eq", r.scoreEq, "")
	}
	if r.scoreNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__ne", r.scoreNe, "")
	}
	if r.scoreGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__gt", r.scoreGt, "")
	}
	if r.scoreGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__gte", r.scoreGte, "")
	}
	if r.scoreLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__lt", r.scoreLt, "")
	}
	if r.scoreLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__lte", r.scoreLte, "")
	}
	if r.scoreIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__in", r.scoreIn, "")
	}
	if r.scoreNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__notin", r.scoreNotin, "")
	}
	if r.scoreContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__contains", r.scoreContains, "")
	}
	if r.scoreNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__notcontains", r.scoreNotcontains, "")
	}
	if r.scoreDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__desc", r.scoreDesc, "")
	}
	if r.scoreAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score__asc", r.scoreAsc, "")
	}
	if r.centroidContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "centroid__contains", r.centroidContains, "")
	}
	if r.centroidNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "centroid__notcontains", r.centroidNotcontains, "")
	}
	if r.centroidDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "centroid__desc", r.centroidDesc, "")
	}
	if r.centroidAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "centroid__asc", r.centroidAsc, "")
	}
	if r.boundingBoxContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bounding_box__contains", r.boundingBoxContains, "")
	}
	if r.boundingBoxNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bounding_box__notcontains", r.boundingBoxNotcontains, "")
	}
	if r.boundingBoxDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bounding_box__desc", r.boundingBoxDesc, "")
	}
	if r.boundingBoxAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bounding_box__asc", r.boundingBoxAsc, "")
	}
	if r.videoIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__eq", r.videoIdEq, "")
	}
	if r.videoIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__ne", r.videoIdNe, "")
	}
	if r.videoIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__gt", r.videoIdGt, "")
	}
	if r.videoIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__gte", r.videoIdGte, "")
	}
	if r.videoIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__lt", r.videoIdLt, "")
	}
	if r.videoIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__lte", r.videoIdLte, "")
	}
	if r.videoIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__in", r.videoIdIn, "")
	}
	if r.videoIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__notin", r.videoIdNotin, "")
	}
	if r.videoIdContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__contains", r.videoIdContains, "")
	}
	if r.videoIdNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__notcontains", r.videoIdNotcontains, "")
	}
	if r.videoIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__like", r.videoIdLike, "")
	}
	if r.videoIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__notlike", r.videoIdNotlike, "")
	}
	if r.videoIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__ilike", r.videoIdIlike, "")
	}
	if r.videoIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__notilike", r.videoIdNotilike, "")
	}
	if r.videoIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__desc", r.videoIdDesc, "")
	}
	if r.videoIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id__asc", r.videoIdAsc, "")
	}
	if r.videoIdObjectContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id_object__contains", r.videoIdObjectContains, "")
	}
	if r.videoIdObjectNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id_object__notcontains", r.videoIdObjectNotcontains, "")
	}
	if r.videoIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id_object__desc", r.videoIdObjectDesc, "")
	}
	if r.videoIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "video_id_object__asc", r.videoIdObjectAsc, "")
	}
	if r.cameraIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__eq", r.cameraIdEq, "")
	}
	if r.cameraIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__ne", r.cameraIdNe, "")
	}
	if r.cameraIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__gt", r.cameraIdGt, "")
	}
	if r.cameraIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__gte", r.cameraIdGte, "")
	}
	if r.cameraIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__lt", r.cameraIdLt, "")
	}
	if r.cameraIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__lte", r.cameraIdLte, "")
	}
	if r.cameraIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__in", r.cameraIdIn, "")
	}
	if r.cameraIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__notin", r.cameraIdNotin, "")
	}
	if r.cameraIdContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__contains", r.cameraIdContains, "")
	}
	if r.cameraIdNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__notcontains", r.cameraIdNotcontains, "")
	}
	if r.cameraIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__like", r.cameraIdLike, "")
	}
	if r.cameraIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__notlike", r.cameraIdNotlike, "")
	}
	if r.cameraIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__ilike", r.cameraIdIlike, "")
	}
	if r.cameraIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__notilike", r.cameraIdNotilike, "")
	}
	if r.cameraIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__desc", r.cameraIdDesc, "")
	}
	if r.cameraIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id__asc", r.cameraIdAsc, "")
	}
	if r.cameraIdObjectContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id_object__contains", r.cameraIdObjectContains, "")
	}
	if r.cameraIdObjectNotcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id_object__notcontains", r.cameraIdObjectNotcontains, "")
	}
	if r.cameraIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id_object__desc", r.cameraIdObjectDesc, "")
	}
	if r.cameraIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "camera_id_object__asc", r.cameraIdObjectAsc, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchDetectionRequest struct {
	ctx context.Context
	ApiService *DetectionAPIService
	primaryKey string
	detection *Detection
	depth *int64
}

func (r ApiPatchDetectionRequest) Detection(detection Detection) ApiPatchDetectionRequest {
	r.detection = &detection
	return r
}

// Query parameter depth
func (r ApiPatchDetectionRequest) Depth(depth int64) ApiPatchDetectionRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchDetectionRequest) Execute() (*ResponseWithGenericOfDetection, *http.Response, error) {
	return r.ApiService.PatchDetectionExecute(r)
}

/*
PatchDetection Method for PatchDetection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPatchDetectionRequest
*/
func (a *DetectionAPIService) PatchDetection(ctx context.Context, primaryKey string) ApiPatchDetectionRequest {
	return ApiPatchDetectionRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfDetection
func (a *DetectionAPIService) PatchDetectionExecute(r ApiPatchDetectionRequest) (*ResponseWithGenericOfDetection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfDetection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DetectionAPIService.PatchDetection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/detections/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.detection == nil {
		return localVarReturnValue, nil, reportError("detection is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.detection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostDetectionsRequest struct {
	ctx context.Context
	ApiService *DetectionAPIService
	detection *[]Detection
	depth *int64
}

func (r ApiPostDetectionsRequest) Detection(detection []Detection) ApiPostDetectionsRequest {
	r.detection = &detection
	return r
}

// Query parameter depth
func (r ApiPostDetectionsRequest) Depth(depth int64) ApiPostDetectionsRequest {
	r.depth = &depth
	return r
}

func (r ApiPostDetectionsRequest) Execute() (*ResponseWithGenericOfDetection, *http.Response, error) {
	return r.ApiService.PostDetectionsExecute(r)
}

/*
PostDetections Method for PostDetections

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostDetectionsRequest
*/
func (a *DetectionAPIService) PostDetections(ctx context.Context) ApiPostDetectionsRequest {
	return ApiPostDetectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfDetection
func (a *DetectionAPIService) PostDetectionsExecute(r ApiPostDetectionsRequest) (*ResponseWithGenericOfDetection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfDetection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DetectionAPIService.PostDetections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/detections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.detection == nil {
		return localVarReturnValue, nil, reportError("detection is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.detection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetCamerasDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
